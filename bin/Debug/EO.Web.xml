<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EO.Web</name>
  </assembly>
  <members>
    <member name="T:EO.Web.ASPXToPDF">
      <summary>
            Provides a convenient way to render ASPX page output as PDF.
            </summary>
      <remarks>
            To output the current page as PDF, simply place an
            <see cref="T:EO.Web.ASPXToPDF"></see> control in the page, then
            call <see cref="M:EO.Web.ASPXToPDF.RenderAsPDF"></see> when you need to
            render the page as PDF.
            </remarks>
    </member>
    <member name="M:EO.Web.ASPXToPDF.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.ASPXToPDF"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.ASPXToPDF.Result">
      <summary>
            Gets the conversion result.
            </summary>
      <remarks>
        <para>
            This property can be accessed inside <see cref="E:EO.Web.ASPXToPDF.AfterRender"></see>
            event. Before that event it is null. 
            </para>
        <para>
            The returned value is an 
            <a href="http://doc.essentialobjects.com/library/4/eo.pdf.htmltopdfresult.aspx">EO.Pdf.HtmlToPdfResult</a>
            object, thus you must cast it to that type in order to retrieve
            any meaningful data from this property.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Web.ASPXToPDF.AutoFormsAuthentication">
      <summary>
            Gets or sets a value indicating whether ASPXToPDF should impersonate
            the current forms authentication user identify.
            </summary>
    </member>
    <member name="P:EO.Web.ASPXToPDF.ResultAsDownload">
      <summary>
            Gets or sets a value indicating whether ASPXToPDF should send the result PDF file as a download.
            </summary>
      <remarks>
            The default value is <b>true</b>, in which case ASPXToPDF control sends the output
            to the client as a download so that user can save the file. When this property is
            <b>false</b>, the browser opens the PDF file directly in the browser window.
            </remarks>
    </member>
    <member name="P:EO.Web.ASPXToPDF.Instance">
      <summary>
            Returns the only ASPXToPDF control in the current page.
            </summary>
    </member>
    <member name="M:EO.Web.ASPXToPDF.RenderAsPDF(System.String)">
      <summary>
            Renders the current page output as PDF.
            </summary>
      <param name="fileName">The "Save As" file name to be suggested by the browser.</param>
      <remarks>
        <para>
            This function renders the current page output as PDF. The
            conversion is done on the fly, so no physical file is
            created. The <i>fileName</i> argument is the "Save As" file
            name prompted by the browser, not the physical file name.
            </para>
        <para>
            If you do wish to create a physical PDF file on your server,
            you can do so in your <see cref="E:EO.Web.ASPXToPDF.AfterRender"></see> event
            handler.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Web.ASPXToPDF.RenderAsPDF">
      <summary>
            Renders the current page output as PDF and sends
            the output PDF file directly to the client.
            </summary>
      <remarks>
            This function uses the current page name as the file name.
            For example, if the current page name is "Default.aspx",
            then the result file name is "Default.pdf". The output is
            directly sent to the client.
            </remarks>
    </member>
    <member name="M:EO.Web.ASPXToPDF.RenderAsPDF(System.Boolean)">
      <summary>
            Renders the current page output as PDF.
            </summary>
      <param name="sendToClient">
        <b>true</b> to send the output
            to the client, <b>false</b> to perform the conversion only.</param>
      <remarks>
            Call this method with <b>false</b> to perform the conversion
            only without sending the output to the client. You can access
            the conversion result inside <see cref="E:EO.Web.ASPXToPDF.AfterRender"></see> event
            handler.
            </remarks>
    </member>
    <member name="E:EO.Web.ASPXToPDF.BeforeRender">
      <summary>
            Occurs before the page has been converted to PDF.
            </summary>
      <remarks>
            You can setup various HTML to PDF conversion parameters
            inside this event handler. For example, the following code
            set the output paper size as A4:
            <code lang="C#" title="C#">
            //Set the page size as A4
            HtmlToPdf.Options.PageSize = PdfPageSize.A4;
            </code><code lang="VB" title="Visual Basic.NET">
            'Set the page size as A4
            HtmlToPdf.Options.PageSize = PdfPageSize.A4
            </code><para>
            See <a href="http://doc.essentialobjects.com/library/4/overview.aspx">EO.Pdf documentation</a> for all available options.
            </para></remarks>
    </member>
    <member name="E:EO.Web.ASPXToPDF.AfterRender">
      <summary>
            Occurs after the page has been converted to PDF.
            </summary>
      <remarks>
        <para>
            You can handle this event to examine or perform any
            "post process" task with the generated PDF document.
            Use <b>HtmlToPdf.Result</b> to access the
            conversion result, for example, the following code
            returns total number of pages:
            </para>
        <code lang="HTML" title="ASPX">
            &lt;eo:ASPXToPDF runat="server" ID="ASPXToPDF1" OnAfterRender="ASPXToPDF1_AfterRender" /&gt;
            </code>
        <code lang="C#" title="C#">
            protected void ASPXToPDF1_AfterRender(object sender, EventArgs e)
            {
                'Get the conversion result
                HtmlToPdfResult result = HtmlToPdf.Result;
            
                //Get the total page count
                int nPageCount = result.PdfDocument.Pages.Count;
                ....
            }
            </code>
        <code lang="VB" title="Visual Basic.NET">
            Protected Sub ASPXToPDF1_AfterRender(sender As Object, e As EventArgs)
                'Get the conversion result
                Dim result As HtmlToPdfResult = HtmlToPdf.Result
            
                'Get the total page count
                Dim nPageCount As Integer = result.PdfDocument.Pages.Count
                ....
            End Sub
            </code>
        <para>
            The following code saves the result to a file:
            </para>
        <code lang="C#" title="C#">
            'Get the conversion result
            HtmlToPdfResult result = HtmlToPdf.Result;
            
            //Save the conversion result to a file
            result.PdfDocument.Save(fileName);
            </code>
        <code lang="VB" title="Visual Basic.NET">
            'Get the conversion result
            Dim result As HtmlToPdfResult = HtmlToPdf.Result
            
            'Save the conversion result to a file
            result.PdfDocument.Save(fileName);
            </code>
      </remarks>
    </member>
    <member name="T:EO.Web.TemplatedPopup">
      <summary>
            Represents a template based popup.
            </summary>
    </member>
    <member name="P:EO.Web.TemplatedPopup.For">
      <summary>
            Gets or sets the ID of the trigger control.
            </summary>
    </member>
    <member name="P:EO.Web.TemplatedPopup.ExpandDirection">
      <summary>
            Gets or sets the popup expand direction.
            </summary>
    </member>
    <member name="P:EO.Web.TemplatedPopup.OffsetX">
      <summary>
            Gets the horizontal offset of the default popup start location and the actual start location.
            </summary>
    </member>
    <member name="P:EO.Web.TemplatedPopup.OffsetY">
      <summary>
            Gets the vertical offset of the default popup start location and the actual start location.
            </summary>
    </member>
    <member name="P:EO.Web.TemplatedPopup.ContentContainer">
      <summary>
            Returns the container control for the content template.
            </summary>
      <remarks>
        <p>
            Controls defined by <see cref="P:EO.Web.TemplatedPopup.ContentTemplate"></see> are created
            as child control of this control. So you can use this control to gain
            access to those controls. 
            </p>
        <p>
            This property returns <b>null</b> if <see cref="P:EO.Web.TemplatedPopup.ContentTemplate"></see> is not set.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TemplatedPopup.ContentTemplate">
      <summary>
            Gets or sets the content template.
            </summary>
      <remarks>
            The content template defines the popup content.
            </remarks>
    </member>
    <member name="T:EO.Web.BaseNavigator">
      <summary>
            Serves as base class that defines the methods, properties and events common 
            to all EO.Web navigation controls. 
            </summary>
    </member>
    <member name="M:EO.Web.BaseNavigator.#ctor">
      <summary>
            Constructor for BaseNavigator. Internal use only.
            </summary>
    </member>
    <member name="P:EO.Web.BaseNavigator.ClientSideOnItemClick">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            when a navigation item is clicked. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The name of the client side JavaScript function to be executed
            when a navigation item is clicked. 
            This property is read/write.
            </value>
      <remarks>
            See <see href="Web/MenuCommon/HandlingEvent/client_event.html">client side event handling</see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.ClientSideOnItemMouseDown">
      <summary>
            Specifies the name of the client side JavaScript function to be executed when 
            user clicks the mouse on a navigation item. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The name of the client side JavaScript function to be executed  
            when user clicks the mouse button on a navigation item. 
            This property is read/write.
            </value>
      <remarks>
            See <see href="Web/MenuCommon/HandlingEvent/client_event.html">client side event handling</see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.ClientSideOnItemMouseOver">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            when mouse moves over a navigation item. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The name of the client side JavaScript function  to be executed when 
            mouse moves over a navigation item. 
            This property is read/write.
            </value>
      <remarks>
            See <see href="Web/MenuCommon/HandlingEvent/client_event.html">client side event handling</see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.ClientSideOnItemMouseOut">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            when mouse leaves a navigation item.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The name of the client side JavaScript function to be executed when 
            when mouse leaves a navigation item. 
            This property is read/write.
            </value>
      <remarks>
            See <see href="Web/MenuCommon/HandlingEvent/client_event.html">client side event handling</see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.ClientSideOnMouseOut">
      <summary>
            Specifies the name of the client side JavaScript function to be executed when 
            the mouse cursor leaves the control. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The name of the client side JavaScript function to be executed   
            when the mouse leaves the control. 
            This property is read/write.
            </value>
      <remarks>
            See <see href="Web/MenuCommon/HandlingEvent/client_event.html">client side event handling</see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.ClientSideOnGroupExpand">
      <summary>
            Specifies the name of the client side JavaScript function to be executed when 
            a navigation group is about to expand.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The name of the client side JavaScript function to be executed when 
            when a navigation group is about to expand.
            This property is read/write.
            </value>
      <remarks>
            See <see href="Web/MenuCommon/HandlingEvent/client_event.html">client side event handling</see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.ClientSideOnGroupCollapsed">
      <summary>
            Specifies the name of the client side JavaScript function to be executed when 
            a navigation group has just collapsed.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The name of the client side JavaScript function to be executed when 
            when a menu group has collapsed.
            This property is read/write.
            </value>
      <remarks>
            See <see href="Web/MenuCommon/HandlingEvent/client_event.html">client side event handling</see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.BackColor">
      <summary>
            Gets or sets background color of top level group. 
            </summary>
      <value>
        <p>
          <see cref="T:System.Drawing.Color">System.Drawing.Color</see>
        </p>
            The background color of top level group. 
            This property is read/write. 
            </value>
      <remarks>
            This property specified background color of top level group. 
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.BorderColor">
      <summary>
            Gets or sets border color of top level group.
            </summary>
      <value>
        <p>
          <see cref="T:System.Drawing.Color">System.Drawing.Color</see>
        </p>
            Border color of top level group. 
            This property is read/write. 
            </value>
      <remarks>
            A <see cref="T:System.Drawing.Color">System.Drawing.Color</see> that represents 
            border color of top level group. The default is <see cref="F:System.Drawing.Color.Empty">Color.Empty</see>, 
            which indicates that this property is not set.				
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.BorderStyle">
      <summary>
            Gets or sets border style of top level group.
            </summary>
      <value>
        <p>
          <see cref="T:System.Web.UI.WebControls.BorderStyle">BorderStyle enumeration</see>
        </p>
            The border style of top level group. 
            This property is read/write. 
            </value>
      <remarks>
            Specifies border style of top level group. 
            The value is one of the <see cref="T:System.Web.UI.WebControls.BorderStyle">BorderStyle</see> enumeration values. 
            The default is <b>NotSet</b>.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.BorderWidth">
      <summary>
             Gets or sets border width of top level group.
            </summary>
      <value>
        <p>
          <see cref="T:System.Web.UI.WebControls.Unit">Unit</see>
        </p>
            The border width of top level group. The type of the Unit must be <see cref="T:System.Web.UI.WebControls.UnitType">UnitType.Pixel</see>.
            This property is read/write. 
            </value>
      <remarks>
            Specifies border width (in pixel) of top level group. 
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.ForeColor">
      <summary>
            Gets or sets foreground color of top level group.
            </summary>
      <value>
        <p>
          <see cref="T:System.Drawing.Color">System.Drawing.Color</see>
        </p>
            The foreground color of top level group. 
            <p>This property is read/write. </p></value>
      <remarks>
            A <see cref="T:System.Drawing.Color">System.Drawing.Color</see> that represents 
            the foreground color of top level group. The default is <see cref="F:System.Drawing.Color.Empty">Color.Empty</see>, 
            which indicates that this property is not set.				
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.CssClass">
      <summary>
            Gets or sets the CSS class name applied to top level group.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            A string represents the CSS class name applied to top level group.
            <p>This property is read/write. </p></value>
      <remarks>
            Specifies the CSS class name applied to top level group. 
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.EnableScrolling">
      <summary>
            Gets or sets the value indicating whether scrolling is enabled.
            </summary>
      <remarks>
        <p>
            When scrolling is enabled, the control automatically displays up/down
            scroller button when the actual height is bigger than 
            available screen size or control's height property.
            </p>
        <p>
          <see cref="P:EO.Web.BaseNavigator.ScrollUpLookID">
          </see>
            and <see cref="P:EO.Web.BaseNavigator.ScrollDownLookID"></see> are used 
            to control the appearance setting of the scrolling items.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.ScrollSpeed">
      <summary>
            Specifies a scroll speed when scrolling is enabled. 
            </summary>
      <remarks>
        <p>
            This property specifies how many pixels the contents scroll up or down
            at each timer interval when scrolling. The default value is 6.</p>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.ScrollUpLookID">
      <summary>
            Gets or sets the look ID for upper scroller.
            </summary>
      <remarks>
            ScrollUpLookID is applied when scrolling is enabled.  Use <see cref="P:EO.Web.BaseNavigator.EnableScrolling"></see>
            to enable/disable scrolling. 
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.ScrollDownLookID">
      <summary>
            Gets or sets the look ID for down scroller.
            </summary>
      <remarks>
            ScrollDownLookID is applied when scrolling is enabled.  Use <see cref="P:EO.Web.BaseNavigator.EnableScrolling"></see>
            to enable/disable scrolling. 
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.SaveStateCrossPages">
      <summary>
            Gets or sets the value indicating whether control state should be saved across pages.
            </summary>
      <remarks>
        <p>
            EO.Web navigational control can save and pass certain state information 
            across pages. For example, if the site has multiple pages with the same
            layout (or multiple pages using the same master page in ASP.NET) and the
            same slide menu appears on all of these pages, the slide menu's expand/selected
            state information can be saved and pass across this pages. The result is
            if user expanded one slide pane on Page1.aspx and then navigate to Page2.aspx,
            the pane that was expanded will keep expanded.
            </p>
        <p>
            The following information is saved when SaveStateCrossPages is true:
            <list type="table"><listheader><term>When the control is...</term><description>Information saved</description></listheader><item><term><see cref="T:EO.Web.Menu"></see></term><description>Selected state</description></item><item><term><see cref="T:EO.Web.SlideMenu"></see></term><description>Expanded and selected state</description></item><item><term><see cref="T:EO.Web.TabStrip"></see></term><description>Selected tab</description></item><item><term><see cref="T:EO.Web.TreeView"></see></term><description>Selected, Expanded and Checked state</description></item></list></p>
        <p>
            In order for cross page state to work, controls in both page must have
            the same ID. Using a master page in ASP.NET 2.0 would be a good solution
            to guarantee this.
            </p>
        <p>
            By default, query string is used to save the state information. You can switch
            to cookie by setting <see cref="P:EO.Web.BaseNavigator.StateCookieName"></see>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.StateCookieName">
      <summary>
            Gets or sets the name of the cookie that is used to save control state across pages.
            </summary>
      <remarks>
        <p>
            EO.Web navigational controls can carry state information across pages when
            <see cref="P:EO.Web.BaseNavigator.SaveStateCrossPages"></see> is set to true. By default, query string
            is used to pass the state information. Set this property to use cookie instead
            of query string.
            </p>
        <p>
            This property has no effect when <see cref="P:EO.Web.BaseNavigator.SaveStateCrossPages"></see> is <b>false</b>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.PathSeparator">
      <summary>
            Gets or sets the character used to delimit the path of 
            an item in a navigation control.
            </summary>
      <value>
        <p>
          <see cref="T:System.Char">System.Char</see>
        </p>
            The character used to delimit the path of a navigation item. 
            This property is read / write.
            </value>
      <remarks>
        <p>Each navigation item (MenuItem, TreeNode and TabItem are all navigation items) 
            in a control has a <see cref="P:EO.Web.NavigationItem.Path"></see> property that represents 
            the position of the item. The path is a string of delimited 
            navigation item IDs that form the path from the root item to the current item. 
            Use the <b>PathSeparator</b> property to specify the delimiting character used 
            to separate the navigation item IDs in the path.
            </p>
        <p>Depending on the <see cref="P:EO.Web.NavigationItem.ItemID"></see> property of a 
            navigation item, the delimiter character might need to be changed to prevent 
            conflicts. 
            
            For example, if you set the delimiter character to a comma, 
            the <see cref="P:EO.Web.NavigationItem.ItemID">ItemID</see> of all the navigation items
            should not contain any commas; otherwise, the <see cref="P:EO.Web.NavigationItem.Path"></see> 
            property cannot be parsed correctly.
            </p>
        <warning>
            This property is important for server event. Server event may not be correctly
            fired if the <b>Path</b> property cannot be parsed correctly because a conflict exists. 
            </warning>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.MultiPageID">
      <summary>
            Gets or sets the ID of the associated <see cref="T:EO.Web.MultiPage"></see> control.
            </summary>
      <remarks>
        <p>
            All navigation controls (Menu, SlideMenu, TabStrip and TreeView) 
            can be associated with a <see cref="T:EO.Web.MultiPage"></see> control. 
            </p>
        <p>
            When associated with a <b>MultiPage</b> control, 
            top level navigation item automatically associates with 
            <see cref="T:EO.Web.PageView"></see> control
            which has the same index as the item, e.g, the first navigation item in the group
            maps to the first PageView in the MultiPage etc. 
            </p>
        <p>
            To explicitly map a specific item to a specific PageView, set the 
            item's <see cref="P:EO.Web.NavigationItem.PageViewID"></see> property. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.CheckIconUrl">
      <summary>
            Specifies the Url of the image used to be displayed on 
            the left side of a navigation item when the item's Checked property is true. 
            </summary>
      <remarks>
        <p>
            Use <b>CheckIconUrl</b> to override the default check icon
            <img src="images/DefaultCheckIcon.gif" />.
            </p>
        <p>
            The "check icon" is displayed in place of "left icon" when
            an item's <see cref="P:EO.Web.BaseMenuItem.Checked"></see> property is true. 
            You can specifies whether a navigation item
            is checked by setting the item's <see cref="P:EO.Web.BaseMenuItem.Checked"></see>
            property or calling client side <see href="JSDoc.Public.Web.MenuItem.setChecked.html">setChecked</see> function. 
            </p>
        <p>
            If the value of this property is a relative path, 
            <see cref="P:EO.Web.WebControl.ImageBaseDirectory"></see> property could be used as base path, then
            the final result will be ImageBaseDirectory and this property combined together. 
            Note, you can use "~/" to specify a root relative path in all EO.Web URL properties.
            Once the value starts with "~/", ImageBaseDirectory will not be used.
            </p>
        <p>
            Note: this property only applies to navigation controls that have <b>Checked</b> property.		
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.HideRoleDisabledItems">
      <summary>
             Gets or sets a value indicating to hide or disable navigation items based on roles.
            </summary>
      <remarks>
        <see cref="T:EO.Web.NavigationItem">
        </see> supports <see cref="P:EO.Web.NavigationItem.AllowRoles"></see>
            property through which you can specify roles that allow access to that navigation item. 
            By default, navigation items not allowed are disabled. 
            Setting <b>HideRoleDisabledItems</b> to <b>True</b> to <strong>hide </strong> the not-allowed items instead
            of disabling them.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.AutoSelectSource">
      <summary>
            Specifies how navigation control automatically selects navigation items. 
            </summary>
      <remarks>
        <p>
            When AutoSelect is turned on, EO.Web navigation control will 
            highlight a navigation item which points to currently browsing page.
            </p>
            See <see cref="T:EO.Web.NavigatorAutoSelectSource"></see> for all the options.<br />
            See <see cref="P:EO.Web.BaseNavigator.AutoSelectTarget"></see> for details on 
            options of highlighting item points to current page.
            <seealso cref="P:EO.Web.BaseNavigator.AutoSelectTarget" /></remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.AutoSelectTarget">
      <summary>
            Specifies options on how to highlight a navigation item which points to currently browsing page.
            </summary>
      <remarks>
        <p>
            To determine if an item points to currently browsing page, EO.Web control 
            uses the item's <see cref="P:EO.Web.NavigationItem.NavigateUrl"></see> to match current page's URL
            (see <see cref="P:EO.Web.BaseNavigator.AutoSelectSource"></see> on matching rules), 
            if the URLs are matched, EO.Web control highlights this item by setting it's Selected property to true.
            </p>
        <p>
            EO.Web navigation controls allows you to specify the following options: 
            <list type="table"><listheader><term>Options</term><description>Description</description></listheader><item><term><see cref="F:EO.Web.NavigatorAutoSelectTarget.Item"></see></term><description>Highlight(Selected property set to true) this item only. 
            	</description></item><item><term><see cref="F:EO.Web.NavigatorAutoSelectTarget.Path"></see></term><description>Highlight(Selected property set to true) all items on path.
            	</description></item></list></p>
        <tip>
          <see cref="P:EO.Web.NavigationItem.SelectedStyle">
          </see> will be used when an item's Selected
            property is set to true. In order for the item that points to current page to be highlighted, 
            you also need to specify SelectedStyle property for the item's look.
            </tip>
        <seealso cref="P:EO.Web.BaseNavigator.AutoSelectSource" />
        <seealso cref="T:EO.Web.NavigatorAutoSelectTarget" />
      </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.Orientation">
      <summary>
            Gets or sets the orientation of top level group.		
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.Orientation">
          </see> enumeration</p>
            One of the <b>Orientation</b> enumeration values. The default is <b>Orientation.Horizontal</b>.
            <p> This property is read/write.</p></value>
      <remarks>
            The following table lists the available Orientation options.
            <list type="table"><listheader><term>Orientation </term><description>Description</description></listheader><item><term>Horizontal</term><description>Top level group is rendered horizontally.</description></item><item><term>Vertical</term><description>Top level group is rendered vertically.		
            	</description></item></list><tip>
            You can also set the orientation of each sub navigation group in a control
            by using NavigationGroup's <see cref="P:EO.Web.BaseMenuItemGroup.Orientation"></see> 
            property. By default, groups below top level are rendered vertically.
            </tip></remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.RaisesServerEvent">
      <summary>
            Gets or sets a boolean indicates if a server side postback <see cref="E:EO.Web.BaseNavigator.ItemClick"></see>
            event should be raised when an item is clicked.
            Default value is <b>false</b>.
            </summary>
      <inherit type="EO.Web.NullableBool">
      </inherit>
      <remarks>
        <p>
            Setting this property to <see cref="F:EO.Web.NullableBool.True"></see> causes 
            the page to raise server side <see cref="E:EO.Web.BaseNavigator.ItemClick"></see> postback event 
            when a item in this control is clicked.
            You can handle the event in <b>ItemClick</b> event handler.
            In the event handler, the clicked item can be accessed through 
            <see cref="T:EO.Web.NavigationItemEventArgs"></see>'s properties.
            </p>
        <p>
          <b>Value Inheritance</b> section lists generic rules to determine final value during runtime, 
            however, there is one exception for <b>slide menu's top level items</b>: 		
            <list type="bullet"><item>For slide menu, a top level item's RaisesServerEvent must be set to true 
            	to raise server event when that item is clicked. Because by default slide menu's 
            	top level items expand sub menu panes when clicked.
            	</item></list></p>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.CausesValidation">
      <summary>
            Gets or sets a boolean indicates if clicking an item causes validation to be performed
            on any controls that require validation. 
            </summary>
      <inherit type="EO.Web.NullableBool">
      </inherit>
      <remarks>
        <p>
            Setting this property to <see cref="F:EO.Web.NullableBool.True"></see> causes 
            validation to be performed on any controls that require validation		
            </p>
        <p>
          <b>Value Inheritance</b> section lists generic rules to determine final value during runtime. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.TopLevelItemAlign">
      <summary>
            Gets or sets the value to specify how navigation items in top level horizontal group are aligned. 
            Applies to navigation control that has horizontal style (e.g, a horizontal menu) only.
            </summary>
      <value>
        <p>One of the <see cref="T:EO.Web.TopLevelItemAlign"></see> enumeration values</p>
            Default is <see cref="F:EO.Web.TopLevelItemAlign.Left"></see>.
            <p> This property is read/write.</p></value>
      <remarks>
            This property only applies to navigation control that has horizontal style (e.g, a horizontal menu). 
            </remarks>
      <seealso cref="P:EO.Web.BaseNavigator.TopLevelItemAlign">
      </seealso>
    </member>
    <member name="P:EO.Web.BaseNavigator.TargetWindow">
      <summary>
            Gets or sets the target window to display <see cref="P:EO.Web.NavigationItem.NavigateUrl"></see>. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The string value represents the target of the window 
            to open the NavigateUrl when the item is clicked. </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
          <b>TargetWindow</b> specifies in which window the browser should open <b>NavigateUrl</b> when an item is clicked.
            When the user clicks on an item, the navigation control will use <b>window.open</b> to load <b>NavigateUrl</b>. 
            the value of <b>TargetWindow</b> property will be passed as the second parameter to window.open function. 
            </p>		
            The following table from MSDN shows the target name that Internet Explorer supports. Note that some of the names might only
            available in Internet Explorer.
            <list type="table"><listheader><term>Built-in TargetWindow names</term><description>Meaning</description></listheader><item><term>Any name you specify</term><description>The name of the target window </description></item><item><term>_blank</term><description>Load the linked document into a new blank window. This window is not named. </description></item><item><term>_media</term><description>Load the linked document into the HTML content area of the Media Bar. Available in Internet Explorer 6 or later.</description></item><item><term>_parent</term><description>Load the linked document into the immediate parent of the document the link is in. </description></item><item><term>_search</term><description>Load the linked document into the browser search pane. Available in Internet Explorer 5 or later. </description></item><item><term>_self</term><description>Default. Load the linked document into the window in which the link was clicked (the active window). </description></item><item><term>_top</term><description>Load the linked document into the topmost window. </description></item></list>
            For example, if you set an item's NavigateUrl to "http://www.yahoo.com", and want to open a new window when user
            clicks on the item, you can set TargetWindow property to "_blank". 
            <code lang="C#">MyMenu.TargetWindow="_blank";</code><code lang="VB">MyMenu.TargetWindow="_blank"</code></remarks>
    </member>
    <member name="M:EO.Web.BaseNavigator.FindItem(System.String)">
      <summary>
             Retrieves the navigation item at the specified <see cref="P:EO.Web.NavigationItem.ItemID"></see> path.
             </summary>
      <param name="path">The <see cref="P:EO.Web.NavigationItem.ItemID"></see> path to the returned navigation item.</param>
      <returns>
             A <see cref="T:EO.Web.NavigationItem"></see> object that represents the navigation item at the specified ID path, or <b>null</b>
             if no matching navigation item is found.
             </returns>
      <remarks>
             FindItem method is used to retrieve a <see cref="T:EO.Web.NavigationItem"></see> object at the specified path. 		
             The value path for a navigation item is a delimited list of items' <see cref="P:EO.Web.NavigationItem.ItemID"></see> property value
             that forms a path from the root navigation item to the current navigation item.
             To determine the delimiter character, use the <see cref="P:EO.Web.BaseNavigator.PathSeparator"></see> property.
             <code lang="C#">
             // Declare the ID path to the Dessert menu item using
             // the delimiter character specified in the PathSeparator
             // property. In this example, the delimiter character is the default
             // value - slash. Note that you can not specify "/" in any of your menu item's ID.
             String valuePath= @"Home/Food/Dessert";
             
             // Use the FindItem method to get the Classical navigation item using
             // its ID path.
             EO.Web.MenuItem item = (EO.Web.MenuItem)MyMenu.FindItem(valuePath);
            
             //Indicate whether the navigation item was found.
             if (item != null)
             {
                Message.Text = "Menu item found.";
             }
             else
             {
            	   Message.Text = "Menu item not found.";
            	}		
             </code><code lang="VB">
             ' Declare the ID path to the Dessert menu item using
             ' the delimiter character specified in the PathSeparator
             ' property. In this example, the delimiter character is the default
             ' value - slash. Note that you can not specify "/" in any of your 
             ' menu item's ID.
             Dim valuePath As String = "Home/Food/Dessert"
             
             ' Use the FindItem method to get the Classical menu item using
             ' its ID path.
             Dim item As EO.Web.MenuItem = CType(MyMenu.FindItem(valuePath), EO.Web.MenuItem)
            
             ' Indicate whether the menu item was found.
             If Not item Is Nothing Then
                Message.Text = "Menu item found. "
             Else
            	   Message.Text = "Menu item not found."
            	End If 
             </code></remarks>
    </member>
    <member name="M:EO.Web.BaseNavigator.SearchItems(System.String,EO.Web.NavigationItemSearchOptions)">
      <summary>
            Returns all navigation items that meet the specified certain criteria. 
            </summary>
      <param name="s"> Specifies the string value to be searched for, 
            depending on parameter <i>options</i>, this value can match navigation item's 
            <see cref="P:EO.Web.NavigationItem.ItemID"></see>,
            <see cref="P:EO.Web.NavigationItemText.Html">Text.Html</see>
             or <see cref="P:EO.Web.NavigationItem.Value"></see>. 
            </param>
      <param name="options"> Provides additional options for the search. 
            see <see cref="T:EO.Web.NavigationItemSearchOptions"></see> for details.</param>
      <returns>Return an array of navigation items. 
            An array with zero element indicates no navigation item is found.
            </returns>
    </member>
    <member name="M:EO.Web.BaseNavigator.SearchItems(System.String)">
      <summary>
            Returns an array of navigation items which contain the specified string in their ItemID properties.
            </summary>
      <param name="itemId">The string with which the returned items' ItemID properties start. </param>
      <returns>
            Return an array of navigation items which IDs start with the given string. 
            An array with zero element indicates no item is found.
            </returns>
      <remarks>
        <p>
            This <b>SearchItem</b> method  
            returns an array of items which ItemID starts with the input string parameter. 		
            For example, if a navigation item's <b>ItemID</b> is "item5", 
            calling <b>SearchItem</b> with "item" will return the
            navigation item as a match.
            </p>
        <tip>Use <b>string.Empty</b> as parameter to return all items in a navigation control.		
            </tip>
      </remarks>
    </member>
    <member name="E:EO.Web.BaseNavigator.ItemClick">
      <summary>
            Occurs when a navigation item is clicked. 
            </summary>
      <remarks>
            See <see href="Web/MenuCommon/HandlingEvent/server_event.html">handling server side event</see> for details.
            </remarks>
    </member>
    <member name="E:EO.Web.BaseNavigator.ItemCreated">
      <summary>
            Occurs when a <see cref="T:EO.Web.NavigationItem"></see> is created during data binding.
            </summary>
      <remarks>
        <p>
            When a navigation item with custom item is created, <b>ItemCreated</b> event is fired before <see cref="E:EO.Web.BaseNavigator.CustomItemCreated"></see> event.
            </p>
        <p>
            See <see href="Web/MenuCommon/HandlingEvent/server_event.html">handling server side event</see> for details.
            </p>
      </remarks>
    </member>
    <member name="E:EO.Web.BaseNavigator.CustomItemCreated">
      <summary>
            Occurs when an embedded <see cref="T:EO.Web.CustomItem"></see> is created during data binding.
            </summary>
      <remarks>
            See <see href="Web/MenuCommon/HandlingEvent/server_event.html">handling server side event</see> for details.
            </remarks>
    </member>
    <member name="E:EO.Web.BaseNavigator.ItemDataBound">
      <summary>
            Occurs after an item is created by data binding.
            </summary>
      <remarks>
            See <see href="Web/MenuCommon/HandlingEvent/server_event.html">handling server side event</see> for details.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.DataSource">
      <summary>
            Gets or sets a data source used to populate navigation items. 
            </summary>
      <value>
            A 
            <see cref="T:System.Data.DataSet">DataSet</see>, 
            <see cref="T:System.Data.DataTable">DataTable</see>, 
            <see cref="T:System.Data.DataView">DataView</see> or any objects that implements 
            <see cref="T:System.Data.IDataReader">IDataReader</see> or
            <see cref="T:System.Collections.IEnumerable">IEnumerable</see>.
            The default value is a null reference (Nothing in Visual Basic).
            </value>
      <remarks>
            Use the <b>DataSource</b> property to specify the source of values to bind to
            a <b>BaseNavigator</b> control. The data source can be an object of one of the following types:
            <list type="bullet"><item><b>DataSet</b></item> - OR - 
            	<item><b>DataTable</b></item> - OR -
            	<item><b>DataView</b></item> - OR -
            	<item><b>IDataReader</b></item> - OR -
            	<item><b>IEnumerable</b></item></list><p>
            EO.Web navigation controls can populate multi-level navigation items 
            from a any of the above objects except <b>IEnumerable</b>.
            </p><list type="bullet"><item>When <b>DataSet</b> is used as the DataSource, 
            <see cref="T:System.Data.DataRelation"></see> objects
            defined in the <b>DataSet</b> is used to abstract hierarchical data structure 
            from the <b>DataSet</b>. 
            </item><item>
            When <b>DataTable</b>, <b>DataView</b> or <b>IDataReader</b> is used, 
            <see cref="P:EO.Web.BaseNavigator.DataFields"></see> must be set to provide a list of key 
            fields used to abstract hierarchical data structure from the data source.
            </item><item>
            When DataSource is an object that implements <b>IEnumerable</b>, 
            only one level of navigation items is populated.
            </item></list>
            See <see href="Web/MenuCommon/DataBinding/DataBinding_overview.html">data binding</see> for details.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.Bindings">
      <summary>
            Gets a collection of bindings that map fields of the 
            data source to the properties of the item. 
            </summary>
      <remarks>
            Use <b>Bindings</b> to define both the mappings between data fields and 
            navigation item properties, and 
            format strings. For example:
            <code>
            &lt;eo:Menu runat="server" DataFields="Country|State|City"&gt;
              &lt;TopGroup&gt;
                &lt;Bindings&gt;
                    &lt;eo:DataBinding
                        Property="Text-Html"
                        DataField="WebSite"
                        Depth="2"
                &lt;/eo:Bindings&gt;
              &lt;/TopGroup&gt;
            &lt;/eo:Menu&gt;
            </code>
            For more information about data binding, see <see href="Web/MenuCommon/DataBinding/DataBinding_overview.html">data binding</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.DataFields">
      <summary>
            Specifies a list of fields used during data binding 
            when binding to an ADO.NET data object. 
            Use '|' to separate multiple fields. 
            </summary>
      <remarks>
        <b>DataFields</b> must be provided to abstract hierarchical data structure from a data
            source of
            <see cref="T:System.Data.DataTable"></see>, <see cref="T:System.Data.DataView"></see>
            or an object that implements <see cref="T:System.Data.IDataReader"></see> interface. For example,
            Data fields "Country|City|ZipCode" abstract hierarchical
            structure from the following <b>DataTable</b> (or <b>DataView</b>, <b>IDataReader</b>):
            <div class="tablediv"><table class="dtTABLE" cellspacing="0"><tr valign="top"><th>Country</th><th>City</th><th>ZipCode</th></tr><tr><td>U.S.A</td><td>New York</td><td>10471</td></tr><tr><td>U.S.A</td><td>New York</td><td>10471</td></tr><tr><td>Canada</td><td>Toronto</td><td>M1W2V6</td></tr><tr><td>U.K</td><td>London</td><td>W114BE</td></tr></table></div><p>
            And results the following menu:<br /><img src="images/datafields_demo.gif"></img></p><p>
            You can use a JOIN to easily return such data from a database.
            </p><p>
            By default, values in fields specified in <b>DataFields</b> will also be used to populate 
            Text property, however, you can change this mapping
            by providing your own <see cref="T:EO.Web.DataBinding"></see> object through <see cref="P:EO.Web.BaseNavigator.Bindings"></see> 
            property.
            </p><p>
            When bind to a <see cref="T:System.Data.DataSet">DataSet</see>,
            <b>DataFields</b> is not required as it is not used to 
            abstract hierarchical data structure.
            However, it could be used to populate navigation item text. 
            When data source is a <b>DataSet</b>,
            <b>DataFields</b> specifies a list of field names which values will be used as item text.
            </p><p><b>DataFields</b> is not used when bind to an object that implement 
            <see cref="T:System.Collections.IEnumerable">IEnumerable</see>.
            </p><p>
            Refer to <see href="Web/MenuCommon/DataBinding/DataBinding_overview.html">data binding</see> for more details.
            </p></remarks>
    </member>
    <member name="P:EO.Web.BaseNavigator.XmlFile">
      <summary>
            Used to support binding the control to XML data source on .NET 1.1.
            </summary>
      <remarks>
            In .NET 1.1 only, use this property to specify the name of the XML file 
            which contains the XML data source. The control automatically binds to this XML data source. <br />
            Since .NET 2.0 has native support on XML data binding, DataSourceID property 
            is used to specify the ID of XmlDataSource class to support 
            binding the control to an XML source.
            </remarks>
      <seealso href="Web/MenuCommon/DataBinding/populate_datasource.html">Binding to XML data source</seealso>
    </member>
    <member name="P:EO.Web.BaseNavigator.DataTable">
      <summary>
            Gets or sets the name of the DataTable object 
            when <see cref="P:EO.Web.BaseNavigator.DataSource"></see> is a DataSet.
            </summary>
    </member>
    <member name="M:EO.Web.BaseNavigator.DataBind">
      <summary>
            Populate navigation items from a data source.
            </summary>
      <remarks>
        <p>
            EO.Web navigation controls can populate the whole control or individual navigation group from a
            <see cref="T:System.Data.DataSet">DataSet</see>, 
            <see cref="T:System.Data.DataTable">DataTable</see>, 
            <see cref="T:System.Data.DataView">DataView</see> or any objects that implements 
            <see cref="T:System.Data.IDataReader">IDataReader</see> or
            <see cref="T:System.Collections.IEnumerable">IEnumerable</see>.
            </p>
        <p>
            To populate navigation items from a data source:
            <list type="number"><item><description>Assigning the data source to the <see cref="P:EO.Web.BaseNavigator.DataSource">BaseNavigator.DataSource</see> or 
            	<see cref="P:EO.Web.NavigationItemGroup.DataSource">NavigationItemGroup.DataSource</see>;</description></item><item><description>
            	If a data source is <b>DataTable</b>, <b>DataView</b> or <b>IDataReader</b>,
            	you should also provide <see cref="P:EO.Web.BaseNavigator.DataFields"></see> to abstract
            	hierarchical data structure from the data source;
            	</description></item><item><description>
            	Optionally, use <see cref="T:EO.Web.DataBinding"></see> object to define the mappings 
            	between data fields and <b>NavigationItem</b> properties.
            	If this step is omitted, fields specifies in 
            	<see cref="P:EO.Web.BaseNavigator.DataFields"></see> will be used to 
            	fill <see cref="P:EO.Web.NavigationItemText.Html">NavigationItem.Text.Html</see>,
            	this step is mandatory if <b>DataSource</b> is a <b>DataSet</b> object.
            	</description></item><item>
            	Call <b>BaseNavigation.DataBind</b> method or 
            	<see cref="M:EO.Web.NavigationItemGroup.DataBind">NavigationItemGroup.DataBind</see> method
            	to populate navigation items.
            </item></list></p>
            See <see href="Web/MenuCommon/DataBinding/DataBinding_overview.html">data binding</see> for more details.
            </remarks>
      <seealso cref="P:EO.Web.BaseNavigator.DataSource">
      </seealso>
    </member>
    <member name="M:EO.Web.BaseNavigator.AutoSelect">
      <summary>
            Automatically select an item based on <see cref="P:EO.Web.BaseNavigator.AutoSelectSource"></see>
            and <see cref="P:EO.Web.BaseNavigator.AutoSelectTarget"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.BaseNavigator.DataSourceID">
      <summary>
            Gets or sets the ID of this control's data source object. Used in .NET 2.0 only.
            </summary>
    </member>
    <member name="T:EO.Web.NavigatorAutoSelectTarget">
      <summary>
            When the event specified by <see cref="P:EO.Web.BaseNavigator.AutoSelectSource"></see>
            happens, use this property to specify what kind of matching 
            navigation item's Selected property should be set to true.
            </summary>
    </member>
    <member name="F:EO.Web.NavigatorAutoSelectTarget.Item">
      <summary>
            Automatically sets the first matching navigation item's Selected property to true.
            </summary>
    </member>
    <member name="F:EO.Web.NavigatorAutoSelectTarget.Path">
      <summary>
            Automatically sets the Selected property of all the items on the path 
            from leaf up to the first matching item to true.
            </summary>
    </member>
    <member name="T:EO.Web.NavigatorAutoSelectSource">
      <summary>
            Used by <see cref="P:EO.Web.BaseNavigator.AutoSelectSource"></see> to control
            how a navigation control automatically selects navigation items. 
            </summary>
    </member>
    <member name="F:EO.Web.NavigatorAutoSelectSource.None">
      <summary>
            Do not automatically set navigation item's Selected property to true.
            </summary>
    </member>
    <member name="F:EO.Web.NavigatorAutoSelectSource.NavigateUrl">
      <summary>
            When an item's NavigateUrl excluding the parameters part matches 
            current page's URL, automatically selects the item. 
            </summary>
    </member>
    <member name="F:EO.Web.NavigatorAutoSelectSource.NavigateUrlExact">
      <summary>
            When an item's NavigateUrl including the parameters part matches current page's URL, 
            automatically selects the item. 
            </summary>
    </member>
    <member name="F:EO.Web.NavigatorAutoSelectSource.ItemClick">
      <summary>
            When an item is clicked, 
            automatically selects the item. 
            </summary>
    </member>
    <member name="F:EO.Web.NavigatorAutoSelectSource.ItemClickAndNavigateUrl">
      <summary>
            When an item is clicked, and 
            the item's NavigateUrl excluding the parameters part matches current page's URL,
            automatically selects the item. 
            </summary>
    </member>
    <member name="F:EO.Web.NavigatorAutoSelectSource.ItemClickAndNavigateUrlExact">
      <summary>
            When an item is clicked, and 
            the item's NavigateUrl including the parameters part matches current page's URL, 
            automatically selects the item. 
            </summary>
    </member>
    <member name="F:EO.Web.NavigatorAutoSelectSource.Auto">
      <summary>
            The corresponding navigation control's default value is used.
            </summary>
    </member>
    <member name="T:EO.Web.NavigationItemEventArgs">
      <summary>
            Provides data for various <see cref="P:EO.Web.NavigationItemEventArgs.NavigationItem"></see> events.
            </summary>
    </member>
    <member name="M:EO.Web.NavigationItemEventArgs.#ctor(EO.Web.NavigationItem,System.Object)">
      <summary>
            Creates a new instance of the NavigationItemEventArgs class.
            </summary>
      <param name="item">The navigation item that caused the event.</param>
      <param name="data">Addtional data related to the specific event.</param>
    </member>
    <member name="M:EO.Web.NavigationItemEventArgs.#ctor(EO.Web.NavigationItem)">
      <summary>
            Creates a new instance of the NavigationItemEventArgs class.
            </summary>
      <param name="item">The navigation item that caused the event.</param>
    </member>
    <member name="P:EO.Web.NavigationItemEventArgs.Data">
      <summary>
            Additional data related to the specific event.
            </summary>
      <remarks>
            The following table lists all possible values for this property:
            <list type="table"><listheader><term>Event</term><description>Remarks</description></listheader><item><term><see cref="E:EO.Web.TreeView.ItemPopulate">TreeView.ItemPopulate</see></term><description>
                    returns the argument that was passed to client side function
                    <see href="JSDoc.Public.Web.TreeNode.populateOnDemand.html">populateOnDemand</see>
                    as a string if the event was being triggered by this function.
                    </description></item></list></remarks>
    </member>
    <member name="P:EO.Web.NavigationItemEventArgs.NavigationItem">
      <summary>
            Gets the referenced <see cref="P:EO.Web.NavigationItemEventArgs.NavigationItem"></see> when the event is raised.
            </summary>
      <remarks>
            Use this property to programmatically access the referenced <see cref="P:EO.Web.NavigationItemEventArgs.NavigationItem"></see> when the event is raised.
            Following coding example demostrates the case when NavigationItem is a MenuItem. Similiar
            logic applies to other objects that inherit from NavigationItem, such as TreeNode, TabItem and ToolbarItem.
            <code lang="C#">
            private void Menu1_ItemClick(
            			object sender, EO.Web.NavigationItemClickEventArgs e)
            {
            	// Use parameter e to get the clicked MenuItem object.
            	// Note: you need to explicitly cast NavigationItem to MenuItem
            	// to access MenuItem properties. 
            	MenuItem myItem = e.NavigationItem as MenuItem;
            	LabelItemID.Text = myItem.ItemID;		
            	LabelItemText.Text = myItem.ItemHTML;		
            }
            </code><code lang="VB">
            Private Sub Menu1_ItemClick( _
            			sender As Object, e As EO.Web.NavigationItemEventArgs)  _
            			Handles Menu1.ItemClick
            	' Use parameter e to get the clicked MenuItem object.
            	' Note: you may need to explicitly cast NavigationItem to MenuItem
            	' to access MenuItem specific properties. 
            	Dim myItem as MenuItem 
            	If TypeOf e.NavigationItem Is MenuItem Then
            	    myItem = e.NavigationItem
            		LabelItemID.Text = myItem.ItemID		
            		LabelItemText.Text = myItem.ItemHTML		
            	End If
            	
            End Sub 'Menu1_ItemClick
            </code></remarks>
    </member>
    <member name="P:EO.Web.NavigationItemEventArgs.MenuItem">
      <summary>
            Gets the referenced <see cref="T:EO.Web.MenuItem"></see> when the event is raised.
            </summary>
      <remarks>
            This property returns <b>null</b> (Visual Basic <b>Nothing</b>) 
            if the event source is not a menu.
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemEventArgs.TabItem">
      <summary>
            Gets the referenced <see cref="T:EO.Web.TabItem"></see> when the event is raised.
            </summary>
      <remarks>
            This property returns <b>null</b> (Visual Basic <b>Nothing</b>) 
            if the event source is not a TabStrip.
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemEventArgs.TreeNode">
      <summary>
            Gets the referenced <see cref="T:EO.Web.TreeNode"></see> when the event is raised.
            </summary>
      <remarks>
            This property returns <b>null</b> (Visual Basic <b>Nothing</b>) 
            if the event source is not a TreeView.
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemEventArgs.CustomItem">
      <summary>
            Gets the <see cref="P:EO.Web.NavigationItemEventArgs.CustomItem"></see> object that was created.
            </summary>
      <remarks>
            Uses this property to programmatically access the <see cref="P:EO.Web.NavigationItemEventArgs.CustomItem"></see> that was created.
            </remarks>
    </member>
    <member name="T:EO.Web.NavigationItemEventHandler">
      <summary>
            Represents the method that handles event that references to a navigation item.
            </summary>
    </member>
    <member name="T:EO.Web.NavigationItemSearchOptions">
      <summary>
            Defines the flags to control <see cref="M:EO.Web.BaseNavigator.SearchItems(System.String,EO.Web.NavigationItemSearchOptions)"></see> behaviors.
            </summary>
      <remarks>
        <p>
            This enumeration has a <see cref="T:System.FlagsAttribute">FlagsAttribute</see> that allows a bitwise 
            combination of its member values. 
            </p>
        <p>
            Note that <b>SearchValue</b> cannot be combined with <b>SearchText</b>.
            </p>
      </remarks>
      <seealso cref="M:EO.Web.BaseNavigator.SearchItems(System.String,EO.Web.NavigationItemSearchOptions)">
      </seealso>
    </member>
    <member name="F:EO.Web.NavigationItemSearchOptions.None">
      <summary>
            Search the navigation item by ItemID property.
            </summary>
    </member>
    <member name="F:EO.Web.NavigationItemSearchOptions.IgnoreCase">
      <summary>
            Ignore the case when searching the navigation item.
            </summary>
    </member>
    <member name="F:EO.Web.NavigationItemSearchOptions.SearchValue">
      <summary>
            Search the navigation item by Value property.
            </summary>
    </member>
    <member name="F:EO.Web.NavigationItemSearchOptions.SearchText">
      <summary>
            Search the navigation item by Text.Html property.
            </summary>
    </member>
    <member name="F:EO.Web.NavigationItemSearchOptions.ExactMatch">
      <summary>
            Specifies whether search by exact match. For example, by default "abc" would
            match "abcd", but not if <b>ExactMatch</b> is set.
            </summary>
    </member>
    <member name="T:EO.Web.TopLevelItemAlign">
      <summary>
            Specifies how navigation items in a horizontal navigation group are aligned.
            </summary>
      <remarks>
            TopLevelItemAlign only applies to horizontal navigation controls, e.g, a horizontal menu. 
            TopLevelItemAlign uses this enum to control the alignment of 
            top level items.  
            </remarks>
    </member>
    <member name="F:EO.Web.TopLevelItemAlign.None">
      <summary>
            Do not align top level items. 
            Use this option if you want to manually control the alignment.
            </summary>
    </member>
    <member name="F:EO.Web.TopLevelItemAlign.Left">
      <summary>
            Top level items will be aligned to the left.
            </summary>
    </member>
    <member name="F:EO.Web.TopLevelItemAlign.Right">
      <summary>
            Top level items will be aligned to the right.
            </summary>
    </member>
    <member name="T:EO.Web.BorderImages">
      <summary>
            Provides a list of images used to create customized borders for the control.
            </summary>
      <remarks>
        <p>
            Most EO.Web controls support customized border images. Up to 16 border 
            images can be provided to create customized borders around the control. 
            The following diagram illustrates the position where each image is 
            displayed. 
            </p>
        <img src="images/BorderImages.gif" />
        <p>
            In this diagram:
            <list type="bullet"><item>
            	Each text label represents the name of the corresponding <b>BorderImages</b> 
            	property;
            	</item><item>
            	The light gray area in the center represents the control;
            	</item><item>
            	The blue ellipse provides visual indications of how a round corner
            	can spread into several images;
            	</item></list></p>
        <p>
            Not all images are required. For example, one can provide <see cref="P:EO.Web.BorderImages.TopBorder"></see>
            but without providing <see cref="P:EO.Web.BorderImages.TopLeftCornerRight"></see>
            and <see cref="P:EO.Web.BorderImages.TopRightCornerLeft"></see>, in which case
            <see cref="P:EO.Web.BorderImages.TopBorder"></see> will be displayed for all these
            locations.
            </p>
        <p>
            The following controls do not support customized border images:
            <see cref="T:EO.Web.Splitter"></see>, <see cref="T:EO.Web.CallbackPanel"></see>,
            <see cref="T:EO.Web.AJAXUploader"></see>, <see cref="T:EO.Web.CustomItem"></see>, 
            <see cref="T:EO.Web.ContextMenu"></see>, <see cref="T:EO.Web.PageContextMenu"></see>,
            <see cref="T:EO.Web.MultiPage"></see> and
            <see cref="T:EO.Web.PageView"></see>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.BorderImages.TopLeftCorner">
      <summary>
            Gets or sets the image used for the top left corner.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.TopLeftCornerRight">
      <summary>
            Gets or sets the image to be placed to the right side of <see cref="P:EO.Web.BorderImages.TopLeftCorner"></see> image.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.TopLeftCornerBottom">
      <summary>
            Gets or sets the image to be placed below <see cref="P:EO.Web.BorderImages.TopLeftCorner"></see> image.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.TopBorder">
      <summary>
            Gets or sets the image used for the top border.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.TopRightCorner">
      <summary>
            Gets or sets the image used for the top right corner.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.TopRightCornerLeft">
      <summary>
            Gets or sets the image to be placed to the left side of <see cref="P:EO.Web.BorderImages.TopRightCorner"></see> image.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.TopRightCornerBottom">
      <summary>
            Gets or sets the image to be placed below <see cref="P:EO.Web.BorderImages.TopRightCorner"></see> image.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.RightBorder">
      <summary>
            Gets or sets the image used for the right border.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.BottomRightCorner">
      <summary>
            Gets or sets the image used for the bottom right corner.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.BottomRightCornerTop">
      <summary>
            Gets or sets the image to be placed above <see cref="P:EO.Web.BorderImages.BottomRightCorner"></see> image.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.BottomRightCornerLeft">
      <summary>
            Gets or sets the image to be placed to the left side of <see cref="P:EO.Web.BorderImages.BottomRightCorner"></see> image.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.BottomBorder">
      <summary>
            Gets or sets the image used for the bottom border.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.BottomLeftCorner">
      <summary>
            Gets or sets the image used for the bottom left corner.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.BottomLeftCornerTop">
      <summary>
            Gets or sets the image to be placed above <see cref="P:EO.Web.BorderImages.BottomLeftCorner"></see> image.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.BottomLeftCornerRight">
      <summary>
            Gets or sets the image to be placed to the right side of <see cref="P:EO.Web.BorderImages.BottomLeftCorner"></see> image.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.LeftBorder">
      <summary>
            Gets or sets the image used for the left border.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.Body">
      <summary>
            Gets or sets the image used for filling the body area.
            </summary>
    </member>
    <member name="P:EO.Web.BorderImages.IsEmpty">
      <summary>
            Returns an value indicating whether any border image has been provided.
            </summary>
    </member>
    <member name="T:EO.Web.Calendar">
      <summary>
            Provides an easy way to represent time in divisions, such as weeks, months, and years. 
            Calendar control represents a static calendar which will be displayed by default.
            </summary>
    </member>
    <member name="M:EO.Web.Calendar.#ctor">
      <summary>
            Initializes a new instance of Calendar class.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.CalendarStyle">
      <summary>
            Gets or sets the style properties for the Calendar control.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.AbbreviatedDayNames">
      <summary>
            Specifies an array of strings containing the 
            culture-specific abbreviated names of the days in a week, started from Sunday. 
            </summary>
      <remarks>
        <p>
            If <see cref="P:EO.Web.Calendar.DayHeaderFormat"></see> property is set to <see cref="F:System.Web.UI.WebControls.DayNameFormat.Short"></see>,
            this property is used to display as header of days in a week.		
            </p>
        <p>
            The first name should represent Sunday's abbreviated name. If the array is empty, default names will be used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.DayNames">
      <summary>
            Specifies an array of strings containing the 
            culture-specific full names of the days of the week, started from 
            Sunday.
            </summary>
      <remarks>
        <p>
            If <see cref="P:EO.Web.Calendar.DayHeaderFormat"></see> property is set to <see cref="F:System.Web.UI.WebControls.DayNameFormat.Full"></see>,
            this property is used to display as header of days in a week.		
            </p>
        <p>
            The first name should represent Sunday's abbreviated name. If the array is empty, default names will be used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.AbbreviatedMonthNames">
      <summary>
            Specifies an array of strings containing 
            the culture-specific abbreviated names of the months, started from January.
            </summary>
      <remarks>
        <p>
            This property is used with <see cref="P:EO.Web.Calendar.TitleFormat"></see> property.
            When TitleFormat property specifies an abbreviation month format (MMM) to be displayed
            as title of each month, this property is used to display the abbreviated month names.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthNames">
      <summary>
            Specifies an array of strings containing 
            the culture-specific names of the months, started from January.
            </summary>
      <remarks>
        <p>
            This property is used with <see cref="P:EO.Web.Calendar.TitleFormat"></see> property.
            When TitleFormat property specifies a full month format (MMMM) to be displayed
            as title of each month, this property is used to display the full month names.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.TitleVisible">
      <summary>
            Gets or sets whether the title section of the Calendar control is visible.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.TitleStyle">
      <summary>
            Gets or sets style properties of title area for a Calendar control.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.TitleArrowStyle">
      <summary>
            Specifies the style of "next" and "previous" arrows displayed on title area.  
            </summary>
      <remarks>
        <remarks>
            "Next" and "Previous" arrows are used to navigate pages. 
            They are displayed on 
            left end and right end of title area.
            A page may display one or multiple months. 
            </remarks>
      </remarks>
      <seealso cref="T:EO.Web.ElementStyle">
      </seealso>
      <seealso cref="P:EO.Web.Calendar.TitleArrowImageWidth">
      </seealso>
      <seealso cref="P:EO.Web.Calendar.TitleArrowHoverStyle">
      </seealso>
    </member>
    <member name="P:EO.Web.Calendar.TitleArrowHoverStyle">
      <summary>
            Specifies the style of "next" and "previous" arrows displayed on title area when mouse positions over the arrows.  
            </summary>
      <remarks>
            "Next" and "Previous" arrows are used to navigate pages. 
            They are displayed on  
            left end and right end of title area.
            A page may display one or multiple months. 
            </remarks>
      <seealso cref="T:EO.Web.ElementStyle">
      </seealso>
      <seealso cref="P:EO.Web.Calendar.TitleArrowImageWidth">
      </seealso>
      <seealso cref="P:EO.Web.Calendar.TitleArrowStyle">
      </seealso>
    </member>
    <member name="P:EO.Web.Calendar.TitleArrowDownStyle">
      <summary>
            Specifies the style of "next" and "previous" arrows displayed on title area
            when mouse button is pressed down on the arrows.  
            </summary>
      <remarks>
            "Next" and "Previous" arrows are used to navigate pages. 
            They are displayed on  
            left end and right end of title area.
            A page may display one or multiple months. 
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.TitleArrowImageWidth">
      <summary>
            Specifies the width (in pixel) for "next" and "previous" arrows displayed on title area.
            </summary>
      <remarks>
            "Next" and "Previous" arrows are used to navigate pages. 
            They are displayed on  
            left end and right end of title area.
            A page may display one or multiple months. 
            </remarks>
      <seealso cref="P:EO.Web.Calendar.TitleArrowImageHeight">
      </seealso>
      <seealso cref="T:EO.Web.ElementStyle">
      </seealso>
      <seealso cref="P:EO.Web.Calendar.TitleArrowHoverStyle">
      </seealso>
      <seealso cref="P:EO.Web.Calendar.TitleArrowStyle">
      </seealso>
    </member>
    <member name="P:EO.Web.Calendar.TitleArrowImageHeight">
      <summary>
            Specifies the height (in pixel) for "next" and "previous" arrows displayed on title area.
            </summary>
      <remarks>
            "Next" and "Previous" arrows are used to navigate pages. 
            They are displayed on  
            left end and right end of title area.
            A page may display one or multiple months. 
            </remarks>
      <seealso cref="T:EO.Web.ElementStyle">
      </seealso>
      <seealso cref="P:EO.Web.Calendar.TitleArrowHoverStyle">
      </seealso>
      <seealso cref="P:EO.Web.Calendar.TitleArrowStyle">
      </seealso>
      <seealso cref="P:EO.Web.Calendar.TitleArrowImageWidth">
      </seealso>
    </member>
    <member name="P:EO.Web.Calendar.TitleLeftArrowImageUrl">
      <summary>
            Specifies the URL string that points to the arrow image
            displayed on the left side of the title heading area.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">
          </see>
        </p>
        <p>A string specifying image URL to display as navigation arrow on left end of title area. </p>
            This property is read / write.
            </value>
      <remarks>
        <p>
            "Next" and "Previous" arrows are used to navigate pages. 
            They are displayed on the 
            left end and right end of title area.
            A page may display one or multiple months. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.TitleLeftArrowHoverImageUrl">
      <summary>
            Specifies the URL string that points to the arrow image
            displayed on the left side of the title heading area when the mouse is positioned over the left arrow.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">
          </see>
        </p>
        <p>A string specifying image URL to display as navigation arrow on left end of title area when the mouse is positioned the left arrow. </p>
            This property is read / write.
            </value>
      <remarks>
        <p>
            "Next" and "Previous" arrows are used to navigate pages. 
            They are displayed on the 
            left end and right end of title area.
            A page may display one or multiple months. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.TitleLeftArrowDownImageUrl">
      <summary>
            Specifies the URL string that points to the arrow image
            displayed on the left side of the title heading area when the mouse is pressed down.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">
          </see>
        </p>
        <p>A string specifying image URL to display as navigation arrow on left end of title area when the mouse is pressed down. </p>
            This property is read / write.
            </value>
      <remarks>
        <p>
            "Next" and "Previous" arrows are used to navigate pages. 
            They are displayed on the 
            left end and right end of title area.
            A page may display one or multiple months. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.TitleLeftArrowHtml">
      <summary>
            Specifies the text displayed
            as the left arrow on the left side of the title heading area. By default, 
            &lt;&lt;  is used.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.TitleRightArrowImageUrl">
      <summary>
            Specifies the URL string that points to the arrow image
            displayed on the right side of the title heading area.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.TitleRightArrowHoverImageUrl">
      <summary>
            Specifies the URL string that points to the arrow image
            displayed on the right side of the title heading area when mouse is pressed down.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.TitleRightArrowDownImageUrl">
      <summary>
            Specifies the URL string that points to the arrow image
            displayed on the right side of the title heading area when mouse is pressed down.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.TitleRightArrowHtml">
      <summary>
            Specifies the text displayed
            as the left arrow on the right side of the title heading area. By default, 
            &gt;&gt;  is used.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.TitleFormat">
      <summary>
            Gets or sets the string to specify date format to display for the title section. 
            </summary>
      <remarks>
        <p>
            Use this property to specify date format to display for the title section. For example, 
            set this property to "MMMM yyyy" displays "January 2007" as month title. 
            </p>
            You can use the following Custom DateTime Format Specifier to specify the title format.
            <list type="table"><listheader><term>Specifier</term><description>Description</description></listheader><item><term>d</term><description>
            	Displays the current day of the month, 
            	measured as a number between 1 and 31, inclusive. 
            	If the day is a single digit only (1-9), 
            	then it is displayed as a single digit.
            	</description></item><item><term>dd</term><description>
            	Displays the current day of the month, 
            	measured as a number between 1 and 31, inclusive. 
            	If the day is a single digit only (1-9), it is formatted 
            	with a preceding 0 (01-09).
            	</description></item><item><term>ddd</term><description>Displays the abbreviated name of the day for the 
            	specified DateTime. 
            	If specified, <see cref="P:EO.Web.Calendar.AbbreviatedDayNames"></see> property 
            	is used, otherwise, default is used.
            	</description></item><item><term>dddd</term><description>
            	Displays the full name of the day for the specified DateTime.
            	If specified, <see cref="P:EO.Web.Calendar.DayNames"></see> property 
            	is used, otherwise, default is used.
            	</description></item><item><term>M</term><description>
            	Displays the month, measured as a number between 1 and 12, inclusive. 
            	If the month is a single digit (1-9), it is displayed as a single digit.
            	</description></item><item><term>MM</term><description>
            	Displays the month, measured as a number between 1 and 12, inclusive. 
            	If the month is a single digit (1-9), it is formatted with a preceding 0 (01-09).
            	</description></item><item><term>MMM</term><description>
            	Displays the abbreviated name of the month for the specified DateTime.
            	If specified, <see cref="P:EO.Web.Calendar.AbbreviatedMonthNames"></see> property 
            	is used, otherwise, default is used.
            	</description></item><item><term>MMMM</term><description>
            	Displays the full name of the month for the specified DateTime.
            	If specified, <see cref="P:EO.Web.Calendar.MonthNames"></see> property 
            	is used, otherwise, default is used.
            	</description></item><item><term>y</term><description>
            	Displays the year for the specified DateTime as a 
            	maximum two-digit number. The first two digits of 
            	the year are omitted. If the year is a single digit (1-9), 
            	it is displayed as a single digit.
            	</description></item><item><term>yy</term><description>
            	Displays the year for the specified DateTime as a 
            	maximum two-digit number. The first two digits of the 
            	year are omitted. If the year is a single digit (1-9), 
            	it is formatted with a preceding 0 (01-09).
            	</description></item><item><term>yyyy</term><description>
            	Displays the year for the specified DateTime, 
            	including the century. If the year is less than 
            	four digits in length, then preceding zeros are 
            	appended as necessary to make the displayed year 
            	four digits long.
            	</description></item></list></remarks>
    </member>
    <member name="P:EO.Web.Calendar.TitleRangeSeparator">
      <summary>
            Specifies the string used to separate the currently displaying month range for the title area.		
            </summary>
      <remarks>
            Specifies the string used to separate the currently displaying month range for the title area.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthTitleVisible">
      <summary>
            When a Calendar displayes multiple months in one page, use this property to specify
            if month title area is visible for each month. 
            </summary>
      <remarks>
        <p>
            This property only applies to Calendar that have multiple months display on a page.
            </p>
        <p>
            When <see cref="P:EO.Web.Calendar.MonthRows"></see>  or <see cref="P:EO.Web.Calendar.MonthColumns"></see> 
            is set to a value greater than 1, multiple months are displayed on one page.
            In this case, month title area is the header of each month. Setting 
            this property to true/false will show/hide this area.
            </p>
        <p>
            When there is only one month displayed on a page, month title area will always be displayed
            in order to identify the current month. This property value will be ignored.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthTitleStyle">
      <summary>
            Specifies the appearance settings for month title area. Applies to Calendar with multiple month
            
            </summary>
      <remarks>
        <p>
            Specifies the appearance settings for month title area.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthColumns">
      <summary>
            Specifies number of month columns displayed in the Calendar.
            </summary>
      <remarks>
        <p>
            Specifies number of month columns displayed in the Calendar.
            Use <see cref="P:EO.Web.Calendar.MonthRows"></see> to specify the number of month rows displayed in the calendar.
            </p>
        <p>
            Columns and rows create grid, each month displays in each grid cell. Use <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see>
            property to specify lines between each grid cell to separate months.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthRows">
      <summary>
            Specifies the number of month rows displayed in the Calendar.
            </summary>
      <remarks>
        <p>
            Specifies the number of month rows displayed in the Calendar.
            Use <see cref="P:EO.Web.Calendar.MonthColumns"></see> to specify the number of month columns displayed in the calendar.
            </p>
        <p>
            Columns and rows create grid, each month displays in each grid cell. Use <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see>
            property to specify lines between each grid cell to separate months.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthStyle">
      <summary>
            Specifies appearance style for area that displays month.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.VisibleDate">
      <summary>
            Gets or sets the date that specifies the first month to display in a Calendar control.
            </summary>
      <remarks>
            Gets or sets the date that specifies the first month to display in a Calendar control.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.DayCellSpacing">
      <summary>
            Specifies the space (in pixel) between each day cell. 
            This property is ignored if <see cref="P:EO.Web.Calendar.GridLineVisible"></see> property is true. 
            </summary>
      <remarks>
            Specifies the space (in pixel) between each day cell. 
            This property is ignored if <see cref="P:EO.Web.Calendar.GridLineVisible"></see> property is true. 
            When GridLIneVisible is true, grid line will be displayed betweeen each day cell.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthSelectorVisible">
      <summary>
            Specifies if month selector is visible. Month selector is used to select the whole month.
            </summary>
      <remarks>
        <p>
            Specifies if month selector is visible. 
            Month selector is used to select the whole month
            and is located at the left side of the day header.
            </p>
        <p>
            When the whole month is selected,
            <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> property is used to display each selected day in the month. 
            <see cref="P:EO.Web.Calendar.SelectedDates"></see> property is used to retrieve all the selected days.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthSelectorStyle">
      <summary>
            Specifies the appearance style of the month selector.
            </summary>
      <remarks>
            Specifies the appearance style of the month selector.
            Month selector is used to select the whole month
            and is located at the left side of the day header.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthSelectorImageHeight">
      <summary>
            Specifies the height (in pixel) of the month selector image which is specified by <see cref="P:EO.Web.Calendar.MonthSelectorImageUrl"></see>.
            </summary>
      <remarks>
            Specifies the height (in pixel) of the month selector image which is specified by <see cref="P:EO.Web.Calendar.MonthSelectorImageUrl"></see>.
            Month selector is used to select the whole month
            and is located at the left side of the day header.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthSelectorImageWidth">
      <summary>
            Specifies the width (in pixel) of the month selector image which is specified by <see cref="P:EO.Web.Calendar.MonthSelectorImageUrl"></see>.
            </summary>
      <remarks>
            Specifies the width (in pixel) of the month selector image which is specified by <see cref="P:EO.Web.Calendar.MonthSelectorImageUrl"></see>.
            Month selector is used to select the whole month
            and is located at the left side of the day header.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthSelectorImageUrl">
      <summary>
            Specifies the url of the month selector image.
            </summary>
      <remarks>
            Specifies the url of the month selector image.
            Month selector is used to select the whole month
            and is located at the left side of the day header.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthSelectorHtml">
      <summary>
            Specifies the html to display for the month selector.
            </summary>
      <remarks>
            Specifies the html to display for the month selector.
            Month selector is used to select the whole month
            and is located at the left side of the day header.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.WeekSelectorVisible">
      <summary>
            Specifies if week selector is visible. Week selector is used to select the whole week.
            </summary>
      <remarks>
        <p>
            Specifies if week selector is visible. 
            week selector is used to select the whole week
            and is located at the left side of each week.
            </p>
        <p>
            When the whole week is selected,
            <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> property is used to display each selected day in the week. 
            <see cref="P:EO.Web.Calendar.SelectedDates"></see> property is used to retrieve all the selected days.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.WeekSelectorStyle">
      <summary>
            Specifies the appearance setting of week selector.
            </summary>
      <remarks>
        <p>
            Specifies the appearance setting of week selector.
            Week selector is used to select the whole week
            </p>
            and is located at the left side of each week.
            <p>
            When the whole week is selected,
            <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> property is used to display each selected day in the week. 
            <see cref="P:EO.Web.Calendar.SelectedDates"></see> property is used to retrieve all the selected days.
            </p></remarks>
    </member>
    <member name="P:EO.Web.Calendar.WeekSelectorImageHeight">
      <summary>
            Specifies the height (in pixel) for the week selector image specified by <see cref="P:EO.Web.Calendar.WeekSelectorImageUrl"></see> property.
            </summary>
      <remarks>
        <p>
            Specifies the height (in pixel) for the week selector image specified by <see cref="P:EO.Web.Calendar.WeekSelectorImageUrl"></see> property.
            Week selector is used to select the whole week
            and is located at the left side of each week.
            </p>
        <p>
            When the whole week is selected,
            <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> property is used to display each selected day in the week. 
            <see cref="P:EO.Web.Calendar.SelectedDates"></see> property is used to retrieve all the selected days.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.WeekSelectorImageWidth">
      <summary>
            Specifies the width (in pixel) for the week selector image specified by <see cref="P:EO.Web.Calendar.WeekSelectorImageUrl"></see> property.
            </summary>
      <remarks>
        <p>
            Specifies the width (in pixel) for the week selector image specified by <see cref="P:EO.Web.Calendar.WeekSelectorImageUrl"></see> property.
            Week selector is used to select the whole week
            and is located at the left side of each week.
            </p>
        <p>
            When the whole week is selected,
            <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> property is used to display each selected day in the week. 
            <see cref="P:EO.Web.Calendar.SelectedDates"></see> property is used to retrieve all the selected days.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.WeekSelectorImageUrl">
      <summary>
            Specifies the url of the week selector image.
            </summary>
      <remarks>
        <p>
            Specifies the url of the week selector image.
            Week selector is used to select the whole week
            and is located at the left side of each week.
            </p>
        <p>
            When the whole week is selected,
            <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> property is used to display each selected day in the week. 
            <see cref="P:EO.Web.Calendar.SelectedDates"></see> property is used to retrieve all the selected days.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.WeekSelectorHtml">
      <summary>
            Specifies the html to display for the week selector.
            </summary>
      <remarks>
        <p>
            Specifies the html to display for the week selector.
            Week selector is used to select the whole week
            </p>
            and is located at the left side of each week.
            <p>
            When the whole week is selected,
            <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> property is used to display each selected day in the week. 
            <see cref="P:EO.Web.Calendar.SelectedDates"></see> property is used to retrieve all the selected days.
            </p></remarks>
    </member>
    <member name="P:EO.Web.Calendar.DayHeaderVisible">
      <summary>
            Use this property to specify
            if day header area is visible for each month. 
            </summary>
      <remarks>
        <p>
            Use this property to specify
            if day header area is visible for each month. 
            </p>
        <p>
            Day header area displays the name of days in a week.
            Use <see cref="P:EO.Web.Calendar.DayHeaderFormat"></see> property to specify which format to display.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.DayHeaderStyle">
      <summary>
            Specifies the appearance setting for day header area. 
            </summary>
      <remarks>
        <p>
            Specifies the appearance setting for day header area. 		
            </p>
        <p>
            Day header area displays the name of days in a week.		
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.DayHeaderFormat">
      <summary>
            Specifies which format of day name to display in day header area.
            </summary>
      <value>
        <p>
          <see cref="T:System.Web.UI.WebControls.DayNameFormat">
          </see>
        </p>
        <p>A DayNameFormat specifying which format to display the day name.</p>
      </value>
      <remarks>
            Specifies which format of day name to display in day header area.		
            See <see cref="T:System.Web.UI.WebControls.DayNameFormat" /> on all possible formats.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.GridLineVisible">
      <summary>
            Specifies if grid lines that separate each day cell in a month is visible.
            </summary>
      <remarks>
        <p>
            Specifies if grid lines that separate each day cell in a month is visible.
            </p>
        <p>
            Use <see cref="P:EO.Web.Calendar.GridLineFrameVisible"></see> to show/hide the frame of grid lines for each month.
            Use <see cref="P:EO.Web.Calendar.GridLineColor"></see> to specify the color of the grid lines.
            Use <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see> to show/hide the grid lines that separate each
            month cell in a multi-month calendar.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.GridLineColor">
      <summary>
            Specifies the color of grid lines that separate each day cell in a month.
            </summary>
      <remarks>
        <p>
            Specifies the color of grid lines that separate each day cell in a month.
            Applies only when <see cref="P:EO.Web.Calendar.GridLineVisible"></see> is true.
            </p>
        <p>
            Use <see cref="P:EO.Web.Calendar.GridLineVisible"></see> to show/hide the grid lines that separate each day cell.
            Use <see cref="P:EO.Web.Calendar.GridLineFrameVisible"></see> to show/hide the frame of grid lines for each month.		
            Use <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see> to show/hide the grid lines that separate each
            month cell in a multi-month calendar.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.GridLineFrameVisible">
      <summary>
            When <see cref="P:EO.Web.Calendar.GridLineVisible"></see> is true, 
            use this property to show/hide the frame of grid lines for each month.
            </summary>
      <remarks>
        <p>
            When <see cref="P:EO.Web.Calendar.GridLineVisible"></see> property is true, 
            use this property to show/hide the frame of each month. <br />
            When GridLivisible property is false, this property is ignored.
            </p>
        <p>
            Use <see cref="P:EO.Web.Calendar.GridLineVisible"></see> to show/hide the grid lines that separate each day cell.
            Use <see cref="P:EO.Web.Calendar.GridLineColor"></see> to specify the color of the grid lines.
            Use <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see> to show/hide the grid lines that separate each
            month cell in a multi-month calendar.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthGridLineVisible">
      <summary>		
            Use this property to show/hide the grid lines that separate month cell in a multi-month calendar. 
            </summary>
      <remarks>
        <p>
            Use this property to show/hide the grid lines that separate month cell in a multi-month calendar. 
            </p>
        <p>
            Use <see cref="P:EO.Web.Calendar.MonthGridLineFrameVisible"></see> to show/hide the frame of grid lines.
            Use <see cref="P:EO.Web.Calendar.MonthGridLineColor"></see> to specify the color of the grid lines.
            Use <see cref="P:EO.Web.Calendar.GridLineVisible"></see> to show/hide the grid lines that separate each day cell.		
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthGridLineColor">
      <summary>		
            When <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see> property is true, 
            use this property to specify the color of grid line.
            </summary>
      <remarks>
        <p>
            When <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see> property is true, 
            use this property to specify the color of grid line.
            </p>
        <p>
            Use <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see> to show/hide grid lines that separate each month cell.
            Use <see cref="P:EO.Web.Calendar.MonthGridLineFrameVisible"></see> to show/hide the frame of grid lines.
            Use <see cref="P:EO.Web.Calendar.GridLineVisible"></see> to show/hide the grid lines that separate each day cell.		
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MonthGridLineFrameVisible">
      <summary>		
            When <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see> property is true, 
            use this property to show/hide the frame of grid lines.
            </summary>
      <remarks>
        <p>
            When <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see> property is true, 
            use this property to show/hide the frame of grid lines.
            </p>
        <p>
            Use <see cref="P:EO.Web.Calendar.MonthGridLineVisible"></see> to show/hide grid lines that separate each month cell.
            Use <see cref="P:EO.Web.Calendar.MonthGridLineColor"></see> to specify the color of grid lines.
            Use <see cref="P:EO.Web.Calendar.GridLineVisible"></see> to show/hide the grid lines that separate each day cell.		
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.DayCellHeight">
      <summary>
            Specifies the height (in pixel) of a day cell.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.DayCellWidth">
      <summary>
            Specifies the width (in pixel) of a day cell.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.DayStyle">
      <summary>
            Specifies the appearance settings for a day cell.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.DayHoverStyle">
      <summary>
            Specifies the appearance setting of a day cell when mouse is positioned over it.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.TodayStyle">
      <summary>
            Specifies the appearance setting of the day cell that represents today.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.TodayHoverStyle">
      <summary>
            Specifies the appearance setting of the day cell that represents today when mouse is positioned over it.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.WeekendDayStyle">
      <summary>
            Specifies the appearance setting of weekend day cells.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.WeekendDayHoverStyle">
      <summary>
            Specifies the appearance setting of weekend day cells when mouse is positioned over it.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.SelectedDayStyle">
      <summary>
            Specifies the appearance setting of day cells that belong to <see cref="P:EO.Web.Calendar.SelectedDates"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.DisabledDayStyle">
      <summary>
            Specifies the appearance setting of day cells that belong to <see cref="P:EO.Web.Calendar.DisabledDates"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.OtherMonthDayStyle">
      <summary>
            When <see cref="P:EO.Web.Calendar.OtherMonthDayVisible"></see> is true, use 
            this property to specify the appearance for day cells 
            that do not belong to current month. 
            </summary>
      <remarks>
        <p>
            When <see cref="P:EO.Web.Calendar.OtherMonthDayVisible"></see> is true, use 
            this property to specify the appearance for day cells 
            that do not belong to current month. 
            If this property is not set, <see cref="P:EO.Web.Calendar.DisabledDayStyle"></see> 
            will apply for those day cells.
            </p>
        <p>
            When <see cref="P:EO.Web.Calendar.OtherMonthDayVisible"></see> is false, this
            property is ignored. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.OutOfRangeDayStyle">
      <summary>
            Specifies the appearance setting for day cells 
            which dates are either before <see cref="P:EO.Web.Calendar.MinValidDate"></see> or after <see cref="P:EO.Web.Calendar.MaxValidDate"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.SelectedDate">
      <summary>
            Gets or sets a date to which <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> will be applied.
            </summary>
      <value>
        <p>
          <see cref="T:System.DateTime">
          </see>
        </p>
        <p>A DateTime specifying the selected date.
            </p>
      </value>
      <remarks>
        <p>
            Gets or sets a date to which <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> will be applied.
            This property is the first element of <see cref="P:EO.Web.Calendar.SelectedDates"></see>.
            </p>
        <note>
            Consider using <see cref="P:EO.Web.Calendar.SelectedDateString"></see> instead of this property
            if you want to use data binding expression. This property is of type <b>DateTime</b>,
            thus it can not accept null (or DbNull.Value) value.
            </note>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.SelectedDateString">
      <summary>
            Gets or sets a date in as a string rather as a DateTime.
            </summary>
      <remarks>
        <p>
            This property is especially useful if you want to use data binding
            expression to set <see cref="P:EO.Web.Calendar.SelectedDate"></see>. <b>SelectedDate</b>
            can not accept a null value (or DbNull.Value), while this property
            can.
            </p>
        <note>
            This property is culture sensitive. It uses the system culture
            to format and parse date.
            </note>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.SelectedDates">
      <summary>
            Gets or sets a collection of dates to which <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> will be applied.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.DateCollection">
          </see>
        </p>
        <p>A DateCollection specifying the selected dates.</p>
      </value>
      <remarks>
            Gets or sets a collection of dates to which <see cref="P:EO.Web.Calendar.SelectedDayStyle"></see> will be applied.
            The first element of this property is the same as <see cref="P:EO.Web.Calendar.SelectedDate"></see> property.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.DisabledDates">
      <summary>
            Gets or sets a collection of dates to which <see cref="P:EO.Web.Calendar.DisabledDayStyle"></see> will be applied.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.DateCollection">
          </see>
        </p>
        <p>A DateCollection specifying the disabled dates.</p>
      </value>
      <remarks>
            Gets or sets a collection of dates to which <see cref="P:EO.Web.Calendar.DisabledDayStyle"></see> will be applied.		
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.FirstMonth">
      <summary>
            FirstMonth and LastMonth define the visible date range for the calendar.
            The calendar does not display dates beyond the specified range.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.LastMonth">
      <summary>
            FirstMonth and LastMonth define the visible date range for the calendar.
            The calendar does not display dates beyond the specified range.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.MinValidDate">
      <summary>
            MinValidDate and MaxValidDate define the valid range for the calendar.
            Days that are out of this range will apply <see cref="P:EO.Web.Calendar.OutOfRangeDayStyle"></see> or <see cref="P:EO.Web.Calendar.DisabledDayStyle"></see>.
            </summary>
      <remarks>
            MinValidDate and MaxValidDate define the valid range for the calendar.
            Days that are out of this range will apply <see cref="P:EO.Web.Calendar.OutOfRangeDayStyle"></see>, if not defined, <see cref="P:EO.Web.Calendar.DisabledDayStyle"></see> will apply.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MaxValidDate">
      <summary>
            MinValidDate and MaxValidDate define the valid range for the calendar.
            Days that are out of this range will apply <see cref="P:EO.Web.Calendar.OutOfRangeDayStyle"></see> or <see cref="P:EO.Web.Calendar.DisabledDayStyle"></see>.
            </summary>
      <remarks>
            MinValidDate and MaxValidDate define the valid range for the calendar.
            Days that are out of this range will apply <see cref="P:EO.Web.Calendar.OutOfRangeDayStyle"></see>, if not defined, <see cref="P:EO.Web.Calendar.DisabledDayStyle"></see> will apply.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.OtherMonthDayVisible">
      <summary>
            Gets or sets a boolean value to show/hide day cells that do not belong to current
            month. 
            </summary>
      <remarks>
        <p>
            Gets or sets a boolean value to show/hide day cells that do not belong to current
            month. 
            </p>
        <p>
            By default, this property is false. If this property is true, 
            those day cells will apply <see cref="P:EO.Web.Calendar.OtherMonthDayStyle"></see> if specified.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.DisableWeekendDays">
      <summary>
            Gets or sets a boolean value to enable/disable weekend day cells.
            </summary>
      <remarks>
            Gets or sets a boolean value to enable/disable weekend day cells.
            By default, this property is false, weekend day cells will not apply <see cref="P:EO.Web.Calendar.DisabledDayStyle"></see>.
            If this property is set to true, weekend day cells will apply DisabledDayStyle.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.FirstDayOfWeek">
      <summary>
            Specifies which day in a week should be displayed as the first day of the week.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.TitleTemplate">
      <summary>
            Specifies any customized HTML to be displayed in a calendar's title area.		
            </summary>
      <remarks>
        <p>
            Use this property to define customized HTML in title area. You can include any 
            HTML tags and define your own variable by using <b>var</b> keyword.
            </p>
            Following is an example of putting HTML into title area. In template, it defines 
            a built in variable <b>today</b> and its displaying format (MM/dd/yyyy):
            <code lang="HTML">
            &lt;div style="FONT-WEIGHT: bold; FONT-SIZE: 11px; FONT-FAMILY: Tahoma""&gt;
            		&lt;img src="{img:00040106}"&gt; Today: {var:today:MM/dd/yyyy}
            &lt;/div&gt;
            </code></remarks>
    </member>
    <member name="P:EO.Web.Calendar.TitleTemplateScope">
      <summary>
            Specifies whether TitleTemplate is applied for the whole title area or the title text only.
            </summary>
      <remarks>
            By default, TitleTemplate applies to the whole title area, including
            the left arrow, title text and right arrow. Set this property to
            <see cref="T:EO.Web.CalendarTitleTemplateScope">TextOnly</see> to specify that
            TitleTemplate should only be applied to the title text.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.FooterTemplate">
      <summary>
            Specifies any customized HTML to be displayed in a calendar's footer area.		
            </summary>
      <remarks>
        <p>
            Use this property to define customized HTML in footer area. You can include any 
            HTML tags and define your own variable by using <b>var</b> keyword.
            </p>
            Following is an example of putting HTML into footer area. In template, it defines 
            a built in variable <b>today</b> and its displaying format (MM/dd/yyyy):
            <code lang="HTML">
            &lt;div style="FONT-WEIGHT: bold; FONT-SIZE: 11px; FONT-FAMILY: Tahoma""&gt;
            		&lt;img src="{img:00040106}"&gt; Today: {var:today:MM/dd/yyyy}
            &lt;/div&gt;
            </code></remarks>
    </member>
    <member name="P:EO.Web.Calendar.SwapDuration">
      <summary>
            Defines the duration (in milliseconds) when calender switches one month to another month.
            </summary>
      <remarks>
            Defines the duration (in milliseconds) when calender switches one month to another month.
            By default, it's 300 milliseconds. 
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.SwapStyle">
      <summary>
            Specifies the style when calender switches one month to another month.
            </summary>
      <remarks>
            Specifies the style when calender switches one month to another month.				
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.AutoPostbackOnScroll">
      <summary>
            Specifies if Calendar should raise postback <see cref="E:EO.Web.Calendar.Scroll"></see> event to server when Calendar switches current month.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.AutoPostbackOnSelect">
      <summary>
            Specifies if Calendar should raise postback <see cref="E:EO.Web.Calendar.SelectionChanged"></see> event to 
            server when a day is selected.
            </summary>
      <remarks>
        <p>
            Specifies if Calendar should raise postback <see cref="E:EO.Web.Calendar.SelectionChanged"></see> event to 
            server when a day is selected.
            </p>
        <p>
            You can select a day by clicking on the day cell. Setting <see cref="P:EO.Web.Calendar.AllowMultiSelect"></see> to 
            true to allow multiple days to be selected by holding Shift key while clicking mouse.
            </p>
        <p>
            When a day is selected, you can retrieve the selected days by using <see cref="P:EO.Web.Calendar.SelectedDates"></see> 
            property.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.AllowMultiSelect">
      <summary>
            Gets or sets a boolean value to allow multiple selection on client side.
            </summary>
      <remarks>
            Gets or sets a boolean value to allow multiple selection on client side.
            You can select multiple days by holding Shift key while clicking on the day cell.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.MultiSelectModifier">
      <summary>
            Gets or sets the modifier key for selecting multiple dates in the Calendar.
            </summary>
    </member>
    <member name="P:EO.Web.Calendar.ClientSideOnScroll">
      <summary>
            Specifies the name of client side JavaScript function which is called 
            when calendar switches to another month.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.calendar_event_handler.html">calendar_event_handler</a>
            for details about parameters and return value of this function.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.ClientSideOnSelect">
      <summary>
            Specifies the name of client side JavaScript function which is called 
            when end user selects a day by clicking on the day cell in browser.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.calendar_event_handler.html">calendar_event_handler</a>
            for details about parameters and return value of this function.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.ClientSideOnChange">
      <summary>
            Specifies the name of client side JavaScript function which is called 
            when current selected date changes.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for details about parameters and return value of this function.
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.EnableOtherMonthDays">
      <summary>
            Gets or sets a boolean value to enable/disable day cells that do not belong to the current month.
            </summary>
      <remarks>
            By default, day cells that do not belong to the current month are disabled
            even if displayed. Set this property to <b>true</b> to enable them. 
            </remarks>
    </member>
    <member name="P:EO.Web.Calendar.WeekNumberBase">
      <summary>
            Specifies whether the Calendar/DatePicker should display week number
            based on month or year.
            </summary>
      <remarks>
        <p>
            Set this property to any value other than <b>None</b> to display a week 
            number in front of every week. 
            </p>
        <p>
            The week number can be based on month or year. When the week number is
            based on month, the Calendar/DatePicker displays "1" for the first week
            of the month, "2" for the second week of the month and so on. When the week
            number is based on year, the Calendar/DatePicker displays "1" for the
            first week of the year, "2" for the second week of the year and so on.
            </p>
        <p>
            Week numbers are displayed at the same place as week selectors, thus
            week selector will not be displayed when this property is set to 
            <b>True</b>. However you can use <see cref="P:EO.Web.Calendar.WeekSelectorStyle"></see>
            to customize the style of week numbers.
            </p>
        <p>
            If you wish to display a custom title (title text, for example),
            for the week numbers, you can do so by setting <see cref="P:EO.Web.Calendar.MonthSelectorVisible"></see> to <b>False</b>, but
            set <see cref="P:EO.Web.Calendar.MonthSelectorStyle"></see> to include a background image.
            This way the image will be displayed in the month selector cell and you
            can modify the image to provide custom title.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Calendar.WaitMessage">
      <summary>
            Gets or sets the message to be displayed while the calendar calls server side <see cref="E:EO.Web.Calendar.DayRender"></see> event handler.
            </summary>
    </member>
    <member name="E:EO.Web.Calendar.DayRender">
      <summary>
            Occurs when day cell is rendered.
            </summary>
    </member>
    <member name="E:EO.Web.Calendar.SelectionChanged">
      <summary>
            Occurs when <see cref="P:EO.Web.Calendar.SelectedDates"></see> property is changed.
            </summary>
    </member>
    <member name="E:EO.Web.Calendar.Scroll">
      <summary>
            Occurs when visible month is changed.
            </summary>
    </member>
    <member name="M:EO.Web.Calendar.LoadCalendar(System.String)">
      <summary>
            Loads a Calendar control from specified path.
            </summary>
      <param name="virtualPath">The virtual path of the Calendar file. 
            You can use '~' to represent the Web application root. 
            For example, you can use "~/calendar1.EOWeb.ascx" to 
            load "calendar1.EOWeb.ascx" in the Web application root directory. 
            </param>
      <returns>Returns the loaded Calendar</returns>
    </member>
    <member name="M:EO.Web.Calendar.LoadCalendarSkin(System.String,System.String)">
      <summary>
            Loads a Calendar skin from specified location.
            </summary>
      <param name="virtualPath">The virtual path of the Calendar skin file. 
            You can use '~' to represent the Web application root. 
            For example, you can use "~/calendar1.EOWeb.ascx" to 
            load "calendar1.EOWeb.ascx" in the Web application root directory. 
            </param>
      <param name="customSkinId">
            The ID of the custom skin. You can set this ID to 
            other calendars to apply this Skin.
            </param>
    </member>
    <member name="M:EO.Web.Calendar.StringToDate(System.String)">
      <summary>
            Convert a string value to a date value in a culture neutral manner.
            </summary>
      <param name="s">
            A string value previously returned by <see cref="M:EO.Web.Calendar.DateToString(System.DateTime)"></see>
            or client side function <a href="JSDoc.Public.Web.Global.eo_DateToString.html">eo_DateToString</a>.
            </param>
      <returns>
            The date represented by s.
            </returns>
      <remarks>
            This function is the server side equivalent of 
            client side function <a href="JSDoc.Public.Web.Global.eo_StringToDate.html">eo_StringToDate</a>.
            Use this function and <b>DateToString</b>/<b>eo_DateToString</b> to ensure the date value is not
            affected by the different cultures.
            </remarks>
    </member>
    <member name="M:EO.Web.Calendar.DateToString(System.DateTime)">
      <summary>
            Converts a date value to a string value in a culture neutral manner.
            </summary>
      <param name="date">The date to be converted.</param>
      <returns>
            The string representation of the date.
            </returns>
      <remarks>
            This function is the server side equivalent of 
            <a href="JSDoc.Public.Web.Global.eo_DateToString.html">eo_DateToString</a>.
            Use this function and <see cref="M:EO.Web.Calendar.StringToDate(System.String)"></see>/<a href="JSDoc.Public.Web.Global.eo_StringToDate.html">eo_StringToDate</a>
            to ensure the date value is not affected by different cultures.
            </remarks>
    </member>
    <member name="T:EO.Web.DayRenderEventArgs">
      <summary>
            Provides data for <see cref="E:EO.Web.Calendar.DayRender"></see> event.
            </summary>
    </member>
    <member name="M:EO.Web.DayRenderEventArgs.#ctor(System.Web.UI.HtmlTextWriter,EO.Web.CalendarDay)">
      <summary>
            Creates a new instance of DayRenderEventArgs.
            </summary>
      <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"></see> to render the day cell.</param>
      <param name="day">The <see cref="T:EO.Web.CalendarDay"></see> object that represents the date.</param>
    </member>
    <member name="P:EO.Web.DayRenderEventArgs.Day">
      <summary>
            Gets the <see cref="T:EO.Web.CalendarDay"></see> object that represents the date.
            </summary>
    </member>
    <member name="P:EO.Web.DayRenderEventArgs.Writer">
      <summary>
            Gets the <see cref="T:System.Web.UI.HtmlTextWriter"></see> to render the day cell.
            </summary>
    </member>
    <member name="T:EO.Web.DayRenderEventHandler">
      <summary>
            Represents the method that handles <see cref="E:EO.Web.Calendar.DayRender"></see> event.
            </summary>
    </member>
    <member name="T:EO.Web.CalendarSwapStyle">
      <summary>
            Specifies the style to switch Calendar from one page to another.
            </summary>
    </member>
    <member name="F:EO.Web.CalendarSwapStyle.None">
      <summary>
            Do not use any swap styles.
            </summary>
    </member>
    <member name="F:EO.Web.CalendarSwapStyle.Exponential">
      <summary>
            Switches the pages at exponential speed.
            </summary>
    </member>
    <member name="F:EO.Web.CalendarSwapStyle.Linear">
      <summary>
            Switches the pages at linear speed.
            </summary>
    </member>
    <member name="T:EO.Web.CalendarDay">
      <summary>
            Represents a date in the <see cref="T:EO.Web.Calendar"></see> control.
            </summary>
      <remarks>
            This class inherits from the standard ASP.NET 
            <see cref="T:System.Web.UI.WebControls.CalendarDay"></see> class. 
            Two additional properties are added in this class: 
            <see cref="P:EO.Web.CalendarDay.IsDisabled"></see> and <see cref="P:EO.Web.CalendarDay.IsOutOfRange"></see>.
            Both properties provide additional information about the state of the
            day.
            </remarks>
    </member>
    <member name="M:EO.Web.CalendarDay.#ctor(System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.CalendarDay"></see> class.
            </summary>
      <param name="date">A <see cref="T:System.DateTime"></see> object that contains the date represented by an instance of this class.</param>
      <param name="isWeekend">
        <b>true</b> means the date is either a Saturday or a Sunday; otherwise, <b>false</b>.</param>
      <param name="isToday">
        <b>true</b> means the date is the current date; otherwise, <b>false</b>.</param>
      <param name="isSelected">
        <b>true</b> means the date belongs to <see cref="P:EO.Web.Calendar.SelectedDates"></see> collection; otherwise, <b>false</b>.</param>
      <param name="isDisabled">
        <b>true</b> means the date belongs to <see cref="P:EO.Web.Calendar.DisabledDates"></see> collection; otherwise, <b>false</b>.</param>
      <param name="isOtherMonth">
        <b>true</b> means the date does not belong to currently rendering month; otherwise, <b>false</b>.</param>
      <param name="isOutOfRange">
        <b>true</b> means the date is either before <see cref="P:EO.Web.Calendar.MinValidDate"></see> or after <see cref="P:EO.Web.Calendar.MaxValidDate"></see>;otherwise, <b>false</b>.</param>
      <param name="dayNumberText">The day number for the date represented by this class.</param>
    </member>
    <member name="P:EO.Web.CalendarDay.IsDisabled">
      <summary>
            Gets a value that indicates whether the date represented by 
            an instance of this class is disabled in the <see cref="T:EO.Web.Calendar"></see> 
            control. This property is read-only.
            </summary>
      <remarks>
        <see cref="P:EO.Web.Calendar.DisabledDayStyle">
        </see> is used if this property is true.
            </remarks>
    </member>
    <member name="P:EO.Web.CalendarDay.IsOutOfRange">
      <summary>
            Get a value that indicates whether the date represented by
            an instance of this class is out of range. 
            </summary>
      <remarks>
            A date is out of
            range when it's either before <see cref="P:EO.Web.Calendar.MinValidDate"></see>
            or after <see cref="P:EO.Web.Calendar.MaxValidDate"></see>. An out of
            range date is automatically disabled, but you can use 
            <see cref="P:EO.Web.Calendar.OutOfRangeDayStyle"></see> to specify
            a different style for them.
            </remarks>
    </member>
    <member name="T:EO.Web.CalendarTitleTemplateScope">
      <summary>
            Specifies the scope of the title template for a <see cref="T:EO.Web.Calendar"></see> control.
            </summary>
    </member>
    <member name="F:EO.Web.CalendarTitleTemplateScope.Title">
      <summary>
            The title template applies to the whole title area,
            including the left arrow, right arrow and text region.
            </summary>
    </member>
    <member name="F:EO.Web.CalendarTitleTemplateScope.TextOnly">
      <summary>
            The title template applies only to the text region.
            </summary>
    </member>
    <member name="T:EO.Web.CalendarWeekNumberBase">
      <summary>
            Specifies whether the Calendar/DatePicker should display week number
            based on month or year.
            </summary>
    </member>
    <member name="F:EO.Web.CalendarWeekNumberBase.None">
      <summary>
            Do not display week number.
            </summary>
    </member>
    <member name="F:EO.Web.CalendarWeekNumberBase.Month">
      <summary>
            Display week number based on the current month.
            </summary>
    </member>
    <member name="F:EO.Web.CalendarWeekNumberBase.Year">
      <summary>
            Display week number based on the current year.
            </summary>
    </member>
    <member name="T:EO.Web.ModifierKeys">
      <summary>
            Specifies the set of modifier keys.
            </summary>
    </member>
    <member name="F:EO.Web.ModifierKeys.None">
      <summary>
            No modifiers are pressed.
            </summary>
    </member>
    <member name="F:EO.Web.ModifierKeys.Alt">
      <summary>
            The ALT key.
            </summary>
    </member>
    <member name="F:EO.Web.ModifierKeys.Shift">
      <summary>
            The SHIFT key. 
            </summary>
    </member>
    <member name="F:EO.Web.ModifierKeys.Control">
      <summary>
            The CTRL key. 
            </summary>
    </member>
    <member name="T:EO.Web.DateCollection">
      <summary>
            Maintains a collection of <see cref="T:System.DateTime"></see> objects.
            </summary>
    </member>
    <member name="M:EO.Web.DateCollection.#ctor">
      <summary>
            Creates a new instance of DateCollection.
            </summary>
    </member>
    <member name="M:EO.Web.DateCollection.Add(System.DateTime)">
      <summary>
            Adds a <see cref="T:System.DateTime"></see> object into the collection.
            </summary>
      <param name="date">The <see cref="T:System.DateTime"> object to be added.</see></param>
      <returns>The index of the newly added DateItem object.</returns>
    </member>
    <member name="M:EO.Web.DateCollection.Clear">
      <summary>
            Clears the collection.
            </summary>
    </member>
    <member name="M:EO.Web.DateCollection.Contains(System.DateTime)">
      <summary>
            Check if the collection contains the specified date.
            </summary>
      <param name="date">The specific <see cref="T:System.DateTime"></see> object that needs to be checked.</param>
      <returns>
        <b>true</b> if the collection contains the specified date, otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:EO.Web.DateCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of this collection to an <see cref="T:System.Array"></see>, starting at a particular Array index. 
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from this collection. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array"></see> at which copying begins.</param>
    </member>
    <member name="M:EO.Web.DateCollection.Remove(System.DateTime)">
      <summary>
            Removes a <see cref="T:System.DateTime"></see> object from this collection.
            </summary>
      <param name="date">The <see cref="T:System.DateTime"></see> object to be removed.</param>
    </member>
    <member name="M:EO.Web.DateCollection.SelectRange(System.DateTime,System.DateTime)">
      <summary>
            Adds a range of <see cref="T:System.DateTime"></see> objects into the collection.
            </summary>
      <param name="fromDate">The lower boundary of dates to be added.</param>
      <param name="toDate">The upper boundary of dates to be added.</param>
    </member>
    <member name="P:EO.Web.DateCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:System.DateTime"></see> object in the collection at specific index.
            </summary>
    </member>
    <member name="P:EO.Web.DateCollection.Count">
      <summary>
            Gets number of elements contained in this collection.
            </summary>
    </member>
    <member name="P:EO.Web.DateCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is readonly. 
            </summary>
    </member>
    <member name="P:EO.Web.DateCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe). 
            </summary>
    </member>
    <member name="P:EO.Web.DateCollection.System#Collections#ICollection#SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:EO.Web.DatePickerPopupTrigger">
      <summary>
            Specifies which action triggers the date picker to display the popup.
            </summary>
    </member>
    <member name="F:EO.Web.DatePickerPopupTrigger.Default">
      <summary>
            Trigger the popup when popup image is clicked, or
            when the text area is clicked while textbox is disabled.
            </summary>
    </member>
    <member name="F:EO.Web.DatePickerPopupTrigger.TextBoxFocus">
      <summary>
            Trigger the popup when the textbox receives focus.
            </summary>
    </member>
    <member name="F:EO.Web.DatePickerPopupTrigger.TextBoxClick">
      <summary>
            Trigger the popup when the textbox is clicked.
            </summary>
    </member>
    <member name="T:EO.Web.DatePicker">
      <summary>
            The control integrates a TextBox and a button to provide an easy way 
            for end user to choose date(s) from Calendar. 
            </summary>
    </member>
    <member name="M:EO.Web.DatePicker.#ctor">
      <summary>
            Creates an instance of DatePicker.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.PopupImageVisible">
      <summary>
            Specifies if the button to display the PopupCalendar is visible.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.PickerStyle">
      <summary>
            Specifies the CSS style of the TextBox which is used to display the selected dates from the PopupCalendar.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.PopupImageUrl">
      <summary>
            Specifies the URL of the image displayed on the button. 
            The button is used to trigger the PopupCalendar to display.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.PopupHoverImageUrl">
      <summary>
            Specifies the URL of the image to display when mouse is position over the button. 
            The button is used to trigger the PopupCalendar to display.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.PopupDownImageUrl">
      <summary>
            Specifies the URL of the image to display when mouse is pressed down over the button. 
            The button is used to trigger the PopupCalendar to display.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.PopupImageWidth">
      <summary>
            Specifies the width of the image to display on the button when mouse is pressed down over the button. 
            The button is used to trigger the PopupCalendar to display.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.PopupImageHeight">
      <summary>
            Specifies the height of the image to display on the button when mouse is pressed down over the button. 
            The button is used to trigger the PopupCalendar to display.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.PickerFormat">
      <summary>
            Specifies the format of the selected dates to display on the picker TextBox.
            </summary>
      <remarks>
        <p>
            See <see cref="P:EO.Web.Calendar.TitleFormat"></see> for a list of 
            supported date related specifiers. In addition to date related specifiers,
            this property also supports the following time related specifiers:
            </p>
        <list type="table">
          <listheader>
            <term>Specifier</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>h</term>
            <description>
            	Displays the hour for the specified DateTime in the range 1-12. The hour 
            	represents whole hours passed since either midnight (displayed as 12) or 
            	noon (also displayed as 12). If this format is used alone, then the same 
            	hour before or after noon is indistinguishable. If the hour is a single 
            	digit (1-9), it is displayed as a single digit. No rounding occurs when 
            	displaying the hour. For example, a DateTime of 5:43 returns 5.
            	</description>
          </item>
          <item>
            <term>hh</term>
            <description>
            	Displays the hour for the specified DateTime in the range 1-12. The hour 
            	represents whole hours passed since either midnight (displayed as 12) or 
            	noon (also displayed as 12). If this format is used alone, then the same 
            	hour before or after noon is indistinguishable. If the hour is a single 
            	digit (1-9), it is formatted with a preceding 0 (01-09).
            	</description>
          </item>
          <item>
            <term>H</term>
            <description>
            	Displays the hour for the specified DateTime in the range 0-23. The hour 
            	represents whole hours passed since midnight (displayed as 0). If the hour 
            	is a single digit (0-9), it is displayed as a single digit.
            	</description>
          </item>
          <item>
            <term>HH</term>
            <description>
            	Displays the hour for the specified DateTime in the range 0-23. The hour 
            	represents whole hours passed since midnight (displayed as 0). If the hour 
            	is a single digit (0-9), it is formatted with a preceding 0 (01-09).
            	</description>
          </item>
          <item>
            <term>m</term>
            <description>
            	Displays the minute for the specified DateTime in the range 0-59. The 
            	minute represents whole minutes passed since the last hour. If the minute 
            	is a single digit (0-9), it is displayed as a single digit.
            	</description>
          </item>
          <item>
            <term>mm</term>
            <description>
            	Displays the minute for the specified DateTime in the range 0-59. 
            	The minute represents whole minutes passed since the last hour. If 
            	the minute is a single digit (0-9), it is formatted with a preceding 
            	0 (01-09).
            	</description>
          </item>
          <item>
            <term>s</term>
            <description>
            	Displays the seconds for the specified DateTime in the range 0-59. 
            	The second represents whole seconds passed since the last minute. 
            	If the second is a single digit (0-9), it is displayed as a single 
            	digit only. 
            	</description>
          </item>
          <item>
            <term>ss</term>
            <description>
            	Displays the seconds for the specified DateTime in the range 0-59. 
            	The second represents whole seconds passed since the last minute. 
            	If the second is a single digit (0-9), it is formatted with a 
            	preceding 0 (01-09).
            	</description>
          </item>
          <item>
            <term>tt</term>
            <description>
            	Displays the A.M./P.M. designator. The A.M./P.M. designator can
            	be customized with <see cref="P:EO.Web.DatePicker.AMDesignator"></see> and
            	<see cref="P:EO.Web.DatePicker.PMDesignator"></see> property.
            	</description>
          </item>
        </list>
        <p>
            Using time related specifiers in <b>PickerFormat</b> enables users
            to enter both date and time information with the <b>DatePicker</b> 
            control.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.DatePicker.PickerHint">
      <summary>
            Specifies the string initially displays in the TextBox that receives the 
            selected date. Date format string is commonly used as PickerHint.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.DisableTextBox">
      <summary>
            Gets or sets whether the text box should be disabled.
            </summary>
      <remarks>
        <p>
            Set this property to <b>true</b> to instruct the DatePicker control
            to display a static text in place of the text box. This
            disallow the user to directly enter the date. 
            User can still click the static text or the
            image button to open the drop down calendar to pick a date.
            You can set an initial hint text via <see cref="P:EO.Web.DatePicker.PickerHint">PickerHint</see>
            property.
            </p>
        <p>
          <b>Note</b>:
            <see cref="P:EO.Web.DatePicker.PickerStyle"></see> can be used to change styles
            applied to the static text when this property is <b>true</b>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.DatePicker.AMDesignator">
      <summary>
            Gets or sets the A.M. designator.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.PMDesignator">
      <summary>
            Gets or sets the P.M. designator.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.PopupTrigger">
      <summary>
            Gets or sets which action triggers the date picker popup.
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.Width">
      <summary>
            Specifies the total width in pixel of this DatePicker. 
            </summary>
    </member>
    <member name="P:EO.Web.DatePicker.ClientSideOnFocus">
      <summary>
            Specifies the name of client side JavaScript function which is called when calendar receives focus.
            </summary>
      <remarks>
        <p>
            Extra caution should be taken when using this property
            because the focus changes not only when user change focus
            within the browser window, but also when user switches
            from/to another window.
            </p>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for details about parameters and return value of this function.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.DatePicker.ClientSideOnBlur">
      <summary>
            Specifies the name of client side JavaScript function which is called when calendar loses focus.
            </summary>
      <remarks>
        <p>
            Extra caution should be taken when using this property
            because the focus changes not only when user change focus
            within the browser window, but also when user switches
            from/to another window.
            </p>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for details about parameters and return value of this function.
            </p>
      </remarks>
    </member>
    <member name="T:EO.Web.PopupCalendar">
      <summary>
            Provides an easy way to represent time in divisions, such as weeks, months, and years. 
            PopupCalendar control represents a dynamic calendar which will be displayed by client side JavaScript.
            </summary>
    </member>
    <member name="M:EO.Web.PopupCalendar.#ctor">
      <summary>
            Creates an instance of PopupCalendar.
            </summary>
    </member>
    <member name="P:EO.Web.PopupCalendar.PopupExpandEffect">
      <summary>
            Specifies the Effect object that controls the effect to expand the calendar.
            </summary>
    </member>
    <member name="P:EO.Web.PopupCalendar.PopupCollapseEffect">
      <summary>
            Specifies the Effect object that controls the effect to collapse the calendar.
            </summary>
    </member>
    <member name="P:EO.Web.PopupCalendar.PopupExpandDirection">
      <summary>
            Specifies the direction to which the calendar displays.
            </summary>
    </member>
    <member name="P:EO.Web.PopupCalendar.PopupOffsetX">
      <summary>
            Specifies the horizontal offset of the position to display this PopupCalendar. 
            </summary>
    </member>
    <member name="P:EO.Web.PopupCalendar.PopupOffsetY">
      <summary>
            Specifies the vertical offset of the position to display this PopupCalendar. 
            </summary>
    </member>
    <member name="P:EO.Web.PopupCalendar.PopupShadowColor">
      <summary>
            Specifies the color of this calendar popup. If not set, default color(gray) is used.
            </summary>
    </member>
    <member name="P:EO.Web.PopupCalendar.PopupShadowDepth">
      <summary>
            Specifies the depth (in pixel) of the calendar popup. If not set, default value(3px) is used.
            </summary>
    </member>
    <member name="T:EO.Web.Callback">
      <summary>
            Callback control delivers capability to perform server side postback 
            through AJAX (Asynchronous JavaScript and XML) call back request 
            without reloading the whole page.
            </summary>
      <remarks>
        <p>
            The main purpose of Callback is to process request on server-side without reloading the 
            entire page. Any control that posts back to server can use Callback to handle 
            its postback request. 
            <note>By using Callback control, in callback's event handler, 
            you cannot update the web page. Use <see cref="T:EO.Web.CallbackPanel"></see> 
            if you intend to update the web page. 
            </note></p>
        <p>
            To specify a Callback to handle a control's postback request, simply 
            set the Callback's <see cref="P:EO.Web.Callback.Triggers"></see> property. 
            Triggers property maintains a collection of <see cref="T:EO.Web.CallbackTrigger"></see> controls
            and each in turn contains information of the control that could trigger 
            this callback. Information includes control's client ID and input parameter. 
            For example, if you want to specify a Callback to handle an ASP.NET button's
            click event, specify the button's client ID in CallbackTrigger's <see cref="P:EO.Web.CallbackTrigger.ControlID"></see> property, 
            then add this CallbackTrigger into Callback's <b>Triggers</b> property.
            </p>
        <p>
            Please see <see cref="T:EO.Web.CallbackTrigger"></see> for details.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.Callback.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EO.Web.Callback"></see> class.
            </summary>
    </member>
    <member name="E:EO.Web.Callback.Execute">
      <summary>
            Specifies the event handler to be called when callback occurs.
            </summary>
    </member>
    <member name="P:EO.Web.Callback.ClientSideBeforeExecute">
      <summary>
            Gets or sets the name of a client side JavaScript function which is called 
            before callback event is raised.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.callback_before_execute_handler.html">here</see> for details about this function.
            </remarks>
    </member>
    <member name="P:EO.Web.Callback.ClientSideAfterExecute">
      <summary>
            Gets or sets the name of a client side JavaScript function which
            is called after callback is completed.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.callback_after_execute_handler.html">here</see> for details about this function.
            </remarks>
    </member>
    <member name="P:EO.Web.Callback.Triggers">
      <summary>
            Specifies a list of <see cref="T:EO.Web.CallbackTrigger"></see> objects 
            which contains information of a control that could be used to trigger this callback. 
            </summary>
      <remarks>
            Callback control can have a list of triggering controls. 
            When one of the triggering controls sends postback event to server,
            this Callback will be used to handle the postback request without 
            reloading the whole page.
            </remarks>
      <seealso cref="T:EO.Web.CallbackTrigger">
      </seealso>
    </member>
    <member name="P:EO.Web.Callback.IsCallback">
      <summary>
            Gets the value indicating whether the current web request is a callback request.
            </summary>
    </member>
    <member name="P:EO.Web.Callback.IsCallbackByMe">
      <summary>
            Gets the value indicating whether the current web request 
            is a callback request caused by this Callback control.
            </summary>
    </member>
    <member name="P:EO.Web.Callback.LastTrigger">
      <summary>
            Gets a CallbackTrigger object that contains information about the trigger that triggered the current callback.
            </summary>
      <remarks>
        <p>
            The same information is also available through <see cref="T:EO.Web.CallbackEventArgs"></see>,
            however, <see cref="T:EO.Web.CallbackEventArgs"></see> object is only available in the
            Callback's Execute event handler, while this property is available as soon as the
            page is loaded.
            </p>
        <p>
            This property returns is a null reference (Nothing in Visual Basic) if the current
            request is not a callback request caused by this callback control.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Callback.ScriptModules">
      <summary>
            A list of comma separated types whose associated script modules should be rendered 
            along with the callback.
            </summary>
      <remarks>
        <p>
            This property is obsolete. It is no longer required to set this property in order to
            use EO.Web Controls inside a Callback or CallbackPanel control. To ensure script module 
            for third party controls to be correctly rendered, put an instance of that control into 
            the page and enclose it in a hidden &lt;DIV&gt; if necessary.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Callback.QueueMode">
      <summary>
            Specifies how the incoming callback requests are queued if the current request is in progress.
            </summary>
    </member>
    <member name="P:EO.Web.Callback.GroupName">
      <summary>
            Gets or sets the callback group name.
            </summary>
      <remarks>
            You can associate multiple Callback/CallbackPanel controls with each
            other as a group. All Callback/CallbackPanel will update their contents
            when any one in the group has triggered a callback.
            </remarks>
    </member>
    <member name="M:EO.Web.Callback.Redirect(System.String)">
      <summary>
            Redirects a callback client to a new URL and specifies the new URL. 
            </summary>
      <param name="url">The URL to redirect to.</param>
    </member>
    <member name="M:EO.Web.Callback.RenderScriptBlock(System.String,System.String,System.Boolean)">
      <summary>
            Render a JavaScript block to be executed on the
            client side when the Callback completes or CallbackPanel
            updates. 
            </summary>
      <param name="key">A unique identifier for the script block.</param>
      <param name="script">The script.</param>
      <param name="addScriptTags">true to enclose the script block 
            in &lt;script&gt; and &lt;/script&gt; tags; otherwise, false.</param>
    </member>
    <member name="M:EO.Web.Callback.RenderScriptBlock(System.String,System.String)">
      <summary>
            Render a JavaScript block to be executed on the
            client side when the Callback completes or CallbackPanel
            updates. 
            </summary>
      <param name="key">A unique identifier for the script block.</param>
      <param name="script">The script.</param>
      <remarks>
            This function assumes the script is already enclosed in 
            &lt;script&gt; and &lt;/script&gt; tags.
            </remarks>
    </member>
    <member name="T:EO.Web.CallbackEventArgs">
      <summary>
            Provides data for <see cref="E:EO.Web.Callback.Execute">Callback.Execute</see> event.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackEventArgs.TriggerControlID">
      <summary>
            Returns the client ID of the control that triggers this Callback.
            </summary>
      <remarks>
            This property returns <b>null</b> (Visual Basic <b>Nothing</b>) if the
            callback is triggered manually by calling <a href="JSDoc.Public.Web.Global.eo_Callback.html">eo_Callback</a>.
            </remarks>
    </member>
    <member name="P:EO.Web.CallbackEventArgs.TriggerControl">
      <summary>
            Returns the ASP.NET control object triggers this callback.
            </summary>
      <remarks>
            This property returns <b>null</b> (Visual Basic <b>Nothing</b>) if the
            callback is triggered manually by calling <a href="JSDoc.Public.Web.Global.eo_Callback.html">eo_Callback</a>.
            </remarks>
    </member>
    <member name="P:EO.Web.CallbackEventArgs.Parameter">
      <summary>
            Gets the input parameter which is specified when the callback is triggered. 
            </summary>
      <remarks>
        <p>
            If the callback was automatically triggered by one of the trigger control, this
            property contains the <see cref="P:EO.Web.CallbackTrigger.Parameter"></see> specified in the 
            trigger; If the callback was manually triggered by calling 
            <a href="JSDoc.Public.Web.Global.eo_Callback.html">eo_Callback</a>, this property contains
            the value of the <b>param</b> argument.
            </p>
        <p>
            If no parameter was specified, this property returns <see cref="F:System.String.Empty"></see>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.CallbackEventArgs.Writer">
      <summary>
            Gets the HTML writer used to write the output HTML.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackEventArgs.Data">
      <summary>
            Extra data to be transferred to the client.
            </summary>
      <remarks>
            Use this field to transfer extra data to the client. Value of this property is passed to 
            <href href="JSDoc.Public.Web.Handlers.callback_after_execute_handler.html">callback_after_execute_handler</href>
            on the client side.
            </remarks>
    </member>
    <member name="T:EO.Web.CallbackEventHandler">
      <summary>
            Represents the method that handles <see cref="E:EO.Web.Callback.Execute">Callback.Execute</see> event.
            </summary>
    </member>
    <member name="T:EO.Web.CallbackTrigger">
      <summary>
            Represents a CallbackTrigger control which contains information of the control
            that can trigger the callback.
            </summary>
      <remarks>
        <p>
            Callback or CallbackPanel control uses <see cref="P:EO.Web.Callback.Triggers"></see> property to specify a list of 
            CallbackTrigger controls each of which contains information of the control
            that can trigger the call back. 
            </p>
            Any kind of control that can send postback request
            to server can trigger the callback.
            <p>
            To specify a control's postback request to be handled by Callback or CallbackPanel, 
            create a CallbackTrigger control, set the CallbackTrigger's <see cref="P:EO.Web.CallbackTrigger.ControlID"></see>
            property to the client ID of the triggering control, and add the CallbackTrigger into
            Callback or CallbackPanel's <see cref="P:EO.Web.Callback.Triggers"></see> property.
            </p><p>
            For example, if the CallbackTrigger's <see cref="P:EO.Web.CallbackTrigger.ControlID"></see> is an ASP.NET button's client ID, 
            then the button's OnClick event
            will be raised via Callback without refreshing the whole page.
            </p></remarks>
    </member>
    <member name="M:EO.Web.CallbackTrigger.#ctor">
      <summary>
            Creates a new instance of CallbackTrigger object.
            </summary>
    </member>
    <member name="M:EO.Web.CallbackTrigger.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of CallbackTrigger object.
            </summary>
      <param name="controlId">The ID of the trigger control.</param>
      <param name="parameter">The parameter of the trigger.</param>
    </member>
    <member name="P:EO.Web.CallbackTrigger.ControlID">
      <summary>
            Gets or sets the server or client ID of the control that triggers the callback.
            </summary>
      <remarks>
            The ControlID property can be either the client ID or server ID of the control. 
            </remarks>
    </member>
    <member name="P:EO.Web.CallbackTrigger.EventTarget">
      <summary>
            Returns the real trigger control ID.
            </summary>
      <remarks>
        <p>
            When the trigger control contains child controls and the callback
            is triggered by the child control, <b>EventTarget</b>
            contains the ID of the child control, while <see cref="P:EO.Web.CallbackTrigger.ControlID"></see>
            contains the ID of the trigger control.
            </p>
        <p>
            For example, when a DataGrid is set as a trigger of a Callback and
            a LinkButton within the DataGrid triggered a callback, <see cref="P:EO.Web.CallbackTrigger.ControlID"></see>
            would return the ID of the DataGrid control, while <b>EventTarget</b>
            would return the ID of the LinkButton control.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.CallbackTrigger.Parameter">
      <summary>
            Gets or sets the parameter supplied when the callback is triggered.
            </summary>
      <remarks>
        <p>
            Specify this property to supply parameters to item's postback event. 
            </p>
        <p>
            On client side, when control's postback is triggered, this parameter 
            will be supplied in Callback's <see cref="E:EO.Web.Callback.Execute"></see>
            event handler's parameter. 
            </p>
        <p>
            On server side's Callback Execute event handler, 
            you can retrieve this parameter via e.<see cref="P:EO.Web.CallbackEventArgs.Parameter"></see>.
            </p>
      </remarks>
    </member>
    <member name="T:EO.Web.CallbackTriggerCollection">
      <summary>
            Represents a collection of CallbackTrigger objects.
            </summary>
      <seealso cref="T:EO.Web.CallbackTrigger">
      </seealso>
    </member>
    <member name="M:EO.Web.CallbackTriggerCollection.#ctor">
      <summary>
            Maintains a list of CallbackTrigger objects.
            </summary>
    </member>
    <member name="M:EO.Web.CallbackTriggerCollection.Add(EO.Web.CallbackTrigger)">
      <summary>
            Adds a new CallbackTrigger object into the collection.
            </summary>
      <param name="trigger">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EO.Web.CallbackTriggerCollection.Remove(EO.Web.CallbackTrigger)">
      <summary>
            Remove an existing CallbackTrigger from the collection.
            </summary>
      <param name="trigger">
      </param>
    </member>
    <member name="P:EO.Web.CallbackTriggerCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the CallbackTriggerCollection is synchronized (thread-safe).
            </summary>
    </member>
    <member name="P:EO.Web.CallbackTriggerCollection.Count">
      <summary>
            Gets the number of CallbackTriggers actually contained in the CallbackTriggerCollection.
            </summary>
    </member>
    <member name="M:EO.Web.CallbackTriggerCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the CallbackTriggerCollection or a portion of it to a one-dimensional array.
            </summary>
      <param name="array">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="P:EO.Web.CallbackTriggerCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the CallbackTriggerCollection.
            </summary>
    </member>
    <member name="M:EO.Web.CallbackTriggerCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the CallbackTriggerCollection.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EO.Web.CallbackTriggerCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the CallbackTriggerCollection is read-only.
            </summary>
    </member>
    <member name="M:EO.Web.CallbackTriggerCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the first occurrence of a specific object from the CallbackTriggerCollection.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:EO.Web.CallbackTriggerCollection.Insert(System.Int32,EO.Web.CallbackTrigger)">
      <summary>
            Inserts an CallbackTrigger into the CallbackTriggerCollection at the specified index.
            </summary>
      <param name="index">
      </param>
      <param name="trigger">
      </param>
    </member>
    <member name="M:EO.Web.CallbackTriggerCollection.Contains(EO.Web.CallbackTrigger)">
      <summary>
            Determines whether a CallbackTrigger object is in the CallbackTriggerCollection.
            </summary>
      <param name="trigger">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EO.Web.CallbackTriggerCollection.Clear">
      <summary>
            Removes all CallbackTriggers from the CallbackTriggerCollection.
            </summary>
    </member>
    <member name="M:EO.Web.CallbackTriggerCollection.IndexOf(EO.Web.CallbackTrigger)">
      <summary>
            Returns the zero-based index of the first occurrence of a CallbackTrigger in the CallbackTriggerCollection.
            </summary>
      <param name="trigger">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:EO.Web.CallbackTriggerCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the CallbackTriggerCollection has a fixed size.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackTriggerCollection.Item(System.Int32)">
      <summary>
            Gets the specific CallbackTrigger given the index of the trigger.
            </summary>
    </member>
    <member name="T:EO.Web.CallbackQueueMode">
      <summary>
            Specifies how the incoming callback requests are queued if the current request is in progress.
            </summary>
    </member>
    <member name="F:EO.Web.CallbackQueueMode.KeepAll">
      <summary>
            All incoming callback requests are queued and executed in a first-in-first-out manner.
            </summary>
    </member>
    <member name="F:EO.Web.CallbackQueueMode.KeepLast">
      <summary>
            When there are multiple incoming callback requests, only the last one
            is kept. Other requests before the last one are discarded.
            </summary>
    </member>
    <member name="F:EO.Web.CallbackQueueMode.DiscardAll">
      <summary>
            All incoming callback requests are discarded.
            </summary>
    </member>
    <member name="T:EO.Web.CallbackPanel">
      <summary>
            CallbackPanel control delivers capability to update any ASP.NET controls inside the CallbackPanel 
            through AJAX (Asynchronous JavaScript and XML)without refreshing the entire page.
            With CallbackPanel, complex content can be updated from server "in live" 
            and end user has a better experience.
            </summary>
      <remarks>
        <p>
            CallbackPanel is extremely useful when only part of the page 
            needs to change during a postback. Partial updates can be less disruptive to the user, 
            reduce screen flicker, and may allow you to create more interactive Web applications, 
            by performing postbacks more frequently than is possible if the entire page needs to 
            be refreshed for each postback. 
            </p>
        <p>
            When CallbackPanel control is used to refresh part of the page, simply add the controls that need
            to be updated into the CallbackPanel. Then you can update those controls in CallbackPanel's execute event handler.
            </p>
        <note>
            Use <see cref="T:EO.Web.Callback"></see> control if you do not intent to update any controls on page during partial postback.
            </note>
      </remarks>
    </member>
    <member name="E:EO.Web.CallbackPanel.Execute">
      <summary>
            Specifies the event handler to be called when callback occurs.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackPanel.ClientSideBeforeExecute">
      <summary>
            Gets or sets the name of a client side JavaScript function which is called 
            before callback event is raised.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.callback_before_execute_handler.html">here</see> for details about this function.
            </remarks>
    </member>
    <member name="P:EO.Web.CallbackPanel.ClientSideAfterExecute">
      <summary>
            Gets or sets the name of a client side JavaScript function which
            is called after callback is completed.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.callback_after_execute_handler.html">here</see> for details about this function.
            </remarks>
    </member>
    <member name="P:EO.Web.CallbackPanel.Triggers">
      <summary>
            Specifies a list of <see cref="T:EO.Web.CallbackTrigger"></see> objects 
            which contains information of a control that could be used to trigger this callback. 
            </summary>
      <remarks>
            Callback control can have a list of triggering controls. 
            When one of the triggering controls sends postback event to server,
            this Callback will be used to handle the postback request without 
            reloading the whole page.
            </remarks>
      <seealso cref="T:EO.Web.CallbackTrigger">
      </seealso>
    </member>
    <member name="P:EO.Web.CallbackPanel.IsCallback">
      <summary>
            Gets the value indicating whether the current web request is a callback request.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackPanel.IsCallbackByMe">
      <summary>
            Gets the value indicating whether the current web request 
            is a callback request caused by this Callback control.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackPanel.LastTrigger">
      <summary>
            Gets a CallbackTrigger object that contains information about the trigger that triggered the current callback.
            </summary>
      <remarks>
        <p>
            The same information is also available through <see cref="T:EO.Web.CallbackEventArgs"></see>,
            however, <see cref="T:EO.Web.CallbackEventArgs"></see> object is only available in the
            Callback's Execute event handler, while this property is available as soon as the
            page is loaded.
            </p>
        <p>
            This property returns is a null reference (Nothing in Visual Basic) if the current
            request is not a callback request caused by this callback control.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.CallbackPanel.ScriptModules">
      <summary>
            A list of comma separated types whose associated script modules should be rendered 
            along with the callback.
            </summary>
      <remarks>
        <p>
            This property is obsolete. It is no longer required to set this property in order to
            use EO.Web Controls inside a Callback or CallbackPanel control. To ensure script module 
            for third party controls to be correctly rendered, put an instance of that control into 
            the page and enclose it in a hidden &lt;DIV&gt; if necessary.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.CallbackPanel.QueueMode">
      <summary>
            Specifies how the incoming callback requests are queued if the current request is in progress.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackPanel.GroupName">
      <summary>
            Gets or sets the callback group name.
            </summary>
      <remarks>
            You can associate multiple Callback/CallbackPanel controls with each
            other as a group. All Callback/CallbackPanel will update their contents
            when any one in the group has triggered a callback.
            </remarks>
    </member>
    <member name="M:EO.Web.CallbackPanel.Redirect(System.String)">
      <summary>
            Redirects a callback client to a new URL and specifies the new URL. 
            </summary>
      <param name="url">The URL to redirect to.</param>
    </member>
    <member name="M:EO.Web.CallbackPanel.RenderScriptBlock(System.String,System.String,System.Boolean)">
      <summary>
            Render a JavaScript block to be executed on the
            client side when the Callback completes or CallbackPanel
            updates. 
            </summary>
      <param name="key">A unique identifier for the script block.</param>
      <param name="script">The script.</param>
      <param name="addScriptTags">true to enclose the script block 
            in &lt;script&gt; and &lt;/script&gt; tags; otherwise, false.</param>
    </member>
    <member name="M:EO.Web.CallbackPanel.RenderScriptBlock(System.String,System.String)">
      <summary>
            Render a JavaScript block to be executed on the
            client side when the Callback completes or CallbackPanel
            updates. 
            </summary>
      <param name="key">A unique identifier for the script block.</param>
      <param name="script">The script.</param>
      <remarks>
            This function assumes the script is already enclosed in 
            &lt;script&gt; and &lt;/script&gt; tags.
            </remarks>
    </member>
    <member name="M:EO.Web.CallbackPanel.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EO.Web.CallbackPanel"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackPanel.LoadingHTML">
      <summary>
            Gets or sets the HTML to be displayed while callback is in progress.
            </summary>
      <remarks>
            LoadingHTML specifies the content to be displayed during callback.
            To specify where to display LoadingHTML, use <see cref="P:EO.Web.CallbackPanel.LoadingPanelID"></see>
            property, which can be client ID or server ID of any control. 
            If LoadingPanelID is empty, 
            LoadingHTML will be displayed inside the CallbackPanel.		
            <seealso cref="P:EO.Web.CallbackPanel.LoadingPanelID" /></remarks>
    </member>
    <member name="P:EO.Web.CallbackPanel.AutoDisableContents">
      <summary>
            Gets or sets the boolean indicating whether or not to disable all the 
            content inside the CallbackPanel during call back.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackPanel.LoadingPanelID">
      <summary>
            Gets or sets client or server ID of a control 
            which displays this CallbackPanel's LoadingHTML as its content (innerHTML) 
            during Callback.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackPanel.UpdateMode">
      <summary>
            Gets or sets the update mode.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackPanel.ChildrenAsTriggers">
      <summary>
            Gets or sets a value that indicates whether postbacks from child controls of a CallbackPanel control update the panel's content.
            </summary>
    </member>
    <member name="P:EO.Web.CallbackPanel.Current">
      <summary>
            Gets the current CallbackPanel control.
            </summary>
      <remarks>
            Returns the CallbackPanel control that triggered the current
            request if the current request is a callback request, otherwise
            returns <b>null</b> (Visual Basic <b>Nothing</b>).
            </remarks>
    </member>
    <member name="P:EO.Web.CallbackPanel.LoadingDialogID">
      <summary>
            Gets or sets the ID of a Dialog control to be displayed during callback.
            </summary>
      <remarks>
            When specified, the dialog will be displayed while callback is in progress
            and closed when the callback is done. Since the dialog is displayed as modal,
            this property is usually used to temporarily block user input during
            callback.
            </remarks>
    </member>
    <member name="P:EO.Web.CallbackPanel.ClientSideAfterUpdate">
      <summary>
            Client side event handler to be called after the callback panel has been updated.
            </summary>
      <remarks>
            This event handler is to be distinguished from 
            <see cref="P:EO.Web.CallbackPanel.ClientSideAfterExecute"></see>. <see cref="P:EO.Web.CallbackPanel.ClientSideAfterExecute"></see>
            is called after the new output has been received, but before it is applied;
            while this event handler is called after the new output is applied.
            </remarks>
    </member>
    <member name="P:EO.Web.CallbackPanel.SafeGuardUpdate">
      <summary>
            Gets or sets a value indicating whether to safe guard
            the code block that applies the new output after a 
            callback.
            </summary>
      <remarks>
        <p>
            EO.Web CallbackPanel executes embedded JavaScript code rendered
            by user code during the callback. In case there is an error in
            the user code, CallbackPanel can either handle it and continue
            its normal flow or do nothing.
            </p>
        <p>
            By default <b>SafeGuardUpdate</b> is set to <b>true</b>, which means
            the CallbackPanel will handle the error and continue its normal
            flow. In this case the end user will get a message box displaying
            the error message if <see cref="P:EO.Web.Runtime.DebugLevel">Runtime.DebugLevel</see> is set
            to a value higher than zero. The message box will not be displayed
            if <see cref="P:EO.Web.Runtime.DebugLevel">Runtime.DebugLevel</see> is set to zero.
            </p>
        <p>
            Setting <b>SafeGuardUpdate</b> to <b>false</b> allows the debugger
            to catch the exact location of the error but risking of destroying
            the internal states of the CallbackPanel control thus making it unable
            to handle further callback request. As such this property should only be
            used as a debug tool.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.CallbackPanel.Update">
      <summary>
            Updates this <see cref="T:EO.Web.CallbackPanel"></see> control.
            </summary>
    </member>
    <member name="T:EO.Web.CallbackPanelUpdateMode">
      <summary>
            Represents the possible update modes for the contents in an <see cref="T:EO.Web.CallbackPanel"></see> control.
            </summary>
    </member>
    <member name="F:EO.Web.CallbackPanelUpdateMode.Group">
      <summary>
            The content of the <see cref="T:EO.Web.CallbackPanel"></see> is updated
            if it has the same <see cref="P:EO.Web.CallbackPanel.GroupName"></see> value as the one 
            that triggered the callback. This is the default mode.
            </summary>
    </member>
    <member name="F:EO.Web.CallbackPanelUpdateMode.Self">
      <summary>
            The content is updated only for the <see cref="T:EO.Web.CallbackPanel"></see>
            control that triggered the callback. 
            </summary>
    </member>
    <member name="F:EO.Web.CallbackPanelUpdateMode.Always">
      <summary>
            The content of the <see cref="T:EO.Web.CallbackPanel"></see> is always
            updated.
            </summary>
    </member>
    <member name="F:EO.Web.CallbackPanelUpdateMode.Conditional">
      <summary>
            The content of the <see cref="T:EO.Web.CallbackPanel"></see> is updated
            only when the control's <see cref="M:EO.Web.CallbackPanel.Update"></see> method is 
            called.
            </summary>
    </member>
    <member name="T:EO.Web.Captcha">
      <summary>
            Automatically generates an image that can be used to
            test whether the client is a human or a computer.
            </summary>
    </member>
    <member name="M:EO.Web.Captcha.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.Captcha"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.ImageBackColor">
      <summary>
            Gets or sets the background color for the CAPTCHA image.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.ImageNoiseLevel">
      <summary>
            Gets or sets the amount of background noise in the CAPTCHA image.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.ImageStyle">
      <summary>
            Gets or sets the style properties for the CAPTCHA image.
            </summary>
      <remarks>
            This property can be used to customize the border or position
            of the CAPTCHA image.
            </remarks>
    </member>
    <member name="P:EO.Web.Captcha.ImageWidth">
      <summary>
            Gets or sets the CAPTCHA image width.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.ImageHeight">
      <summary>
            Gets or sets the CAPTCHA image height.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.ImageAlternativeText">
      <summary>
            Gets or sets the CAPTCHA image alternative text.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.ImageStorage">
      <summary>
            Gets or sets where image should be stored.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.ImageLifeSpan">
      <summary>
            Gets or sets the image life span in seconds.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.Text">
      <summary>
            Gets the current CAPTCHA text.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.TextFontFamily">
      <summary>
            Gets or sets the font name used to generate text in the CAPTCHA image.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.TextNoiseLevel">
      <summary>
            Gets or sets the warp level of the text in the image.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.TextColor">
      <summary>
            Gets or sets color of the text in the CAPTCHA image.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.TextCharSet">
      <summary>
            Gets or sets the character set of the text in the CAPTCHA image.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.TextLength">
      <summary>
            Gets or sets the text length.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.LineNoiseLevel">
      <summary>
            Gets or sets the complexity level of the lines in the image.
            </summary>
      <remarks>
            Gets or sets the complexity level of the lines in the image.
            </remarks>
    </member>
    <member name="P:EO.Web.Captcha.LineColor">
      <summary>
            Gets or sets color of the lines in the CAPTCHA image.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.RefreshLinkStyle">
      <summary>
            Gets or sets the style properties for the refresh link button.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.RefreshLinkHtml">
      <summary>
            Gets or sets the HTML for the refresh link button.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.AudioLinkStyle">
      <summary>
            Gets or sets the style properties for the audio link button.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.AudioLinkHtml">
      <summary>
            Gets or sets the HTML for the audio link button.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.TextBoxStyle">
      <summary>
            Gets or sets the style properties for the textbox.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.PromptStyle">
      <summary>
            Gets or sets the style properties for the prompt text.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.PromptHtml">
      <summary>
            Gets or sets the prompt text.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.ErrorMessage">
      <summary>
            Gets or sets the error message to be displayed when user input is invalid.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.ErrorMessageStyle">
      <summary>
            Gets or sets the style properties for the error message.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.ValidationGroup">
      <summary>
            Gets or sets the group of controls for which this control causes validation when it posts back to the server.
            </summary>
    </member>
    <member name="P:EO.Web.Captcha.IsValid">
      <summary>
            Gets or sets whether user input is valid.
            </summary>
    </member>
    <member name="M:EO.Web.Captcha.Validate">
      <summary>
            Performs validation on the associated input control and updates the IsValid property.
            </summary>
    </member>
    <member name="M:EO.Web.Captcha.Reset">
      <summary>
            Force the Captcha control to generate a new image.
            </summary>
    </member>
    <member name="T:EO.Web.CaptchaNoiseLevel">
      <summary>
            Specifies the CAPTCHA noise level.
            </summary>
    </member>
    <member name="F:EO.Web.CaptchaNoiseLevel.None">
      <summary>
            No noise.
            </summary>
    </member>
    <member name="F:EO.Web.CaptchaNoiseLevel.Low">
      <summary>
            Low level of noise.
            </summary>
    </member>
    <member name="F:EO.Web.CaptchaNoiseLevel.Medium">
      <summary>
            Medium level of noise.
            </summary>
    </member>
    <member name="F:EO.Web.CaptchaNoiseLevel.High">
      <summary>
            High level of noise.
            </summary>
    </member>
    <member name="T:EO.Web.CaptchaCharSet">
      <summary>
            Specifies the character set used to generate the text in the CAPTCHA image.
            </summary>
    </member>
    <member name="F:EO.Web.CaptchaCharSet.NumbersOnly">
      <summary>
            Uses number only.
            </summary>
    </member>
    <member name="F:EO.Web.CaptchaCharSet.LettersOnly">
      <summary>
            Uses letters only.
            </summary>
    </member>
    <member name="F:EO.Web.CaptchaCharSet.NumbersAndLetters">
      <summary>
            Uses both numbers and letters.
            </summary>
    </member>
    <member name="T:EO.Web.CaptchaImageStorage">
      <summary>
            Specifies where the image is stored.
            </summary>
    </member>
    <member name="F:EO.Web.CaptchaImageStorage.Session">
      <summary>
            Stores in the session.
            </summary>
    </member>
    <member name="F:EO.Web.CaptchaImageStorage.Cache">
      <summary>
            Stores in the cache.
            </summary>
    </member>
    <member name="T:EO.Web.ClientTemplate">
      <summary>
            Represents a client side template.
            </summary>
      <remarks>
        <p>
            Client template defines a HTML snippet that contains zero or 
            more "format items". Controls that support client template automatically
            evaluate these items on the client side when necessary. For
            example, 
            The following code defines the <see cref="P:EO.Web.Calendar.FooterTemplate"></see> 
            property of a <see cref="T:EO.Web.Calendar"></see> control. It uses
            a built in variable <b>today</b> and also specifies its displaying format 
            as MM/dd/yyyy. It also uses a built in image 00040106.
            <code lang="HTML">
            &lt;FooterTemplate&gt;
            &lt;div style="FONT-WEIGHT: bold; FONT-SIZE: 11px; FONT-FAMILY: Tahoma""&gt;
            		&lt;img src="{img:00040106}"&gt; Today: {var:today:MM/dd/yyyy}
            &lt;/div&gt;
            &lt;/FooterTemplate&gt;
            </code></p>
        <p>
            Each format item is of the form "{type:name[:format]}", where:
            <list type="table"><listheader><term>type</term><description>description</description></listheader><item><term>img</term><description>
            	To insert a built-in image. The "name" parameter
            	should be the ID of the built-in image.
            	</description></item><item><term>var</term><description><p>
            	To insert a "variable". The "name" parameter should
            	be the ID of the variable, the "format" parameter 
            	specifies a format string that will be used to format
            	the variable.
            	</p><p>
            	The variable can be a built-in variable supported by the
            	control itself, or a custom variable. A custom variable
            	is evaluated by calling <see cref="P:EO.Web.WebControl.ClientSideOnEvalVar"></see>
            	client side event handler.
            	</p></description></item></list><p>
            The following section lists all supported built-in variables:
            </p><b>EO.Web.WebControl</b><list type="table"><listheader><term>Variable</term><description>Remark</description></listheader><item><term>"this"</term><description>The client side object that represents this
            		control. For example, "{var:this}.setSelectedDate()". 
            		</description></item><item><term>"clientId"</term><description>The client ID of the object. 
            		</description></item></list><b>EO.Web.Calendar</b> inherits all variables that <b>EO.Web.WebControl</b>
            supports and also supports the following variables:
            <list type="table"><listheader><term>Variable</term><description>Remark</description></listheader><item><term>"today"</term><description>Today's date.</description></item><item><term>"selected_date"</term><description>The current selected date.</description></item><item><term>"visible_date"</term><description>The first day of the first visible month.</description></item></list><b>EO.Web.Grid</b> inherits all variables that <b>EO.Web.WebControl</b>
            supports and also supports the following variables:
            </p>
        <list type="table">
          <listheader>
            <term>Variable</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>"total_pages"</term>
            <description>Total number of pages.</description>
          </item>
          <item>
            <term>"current_page"</term>
            <description>The current page index. Note the first page index
            		is 1. This is different from client side 
            		<a href="JSDoc.Public.Web.Grid.getCurrentPage.html">getCurrentPage</a>
            		function, which returns 0 based index.</description>
          </item>
          <item>
            <term>"record_count"</term>
            <description>The total record count.</description>
          </item>
        </list>
        <p>
          <b>EO.Web.ImageZoom</b> inherits all variables that <b>EO.Web.WebControl</b>
            supports and also supports the following variables:
            </p>
        <list type="table">
          <listheader>
            <term>Variable</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>"big_image"</term>
            <description>The big image (zoomed out image) specified by <see cref="P:EO.Web.ImageZoom.BigImageUrl"></see>.</description>
          </item>
          <item>
            <term>"description"</term>
            <description>A description specified by <see cref="P:EO.Web.ImageZoom.Description"></see> property.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:EO.Web.DefaultClientTemplateAttribute">
      <summary>
            Specifies the default value for a <see cref="T:EO.Web.ClientTemplate"></see> property.
            </summary>
    </member>
    <member name="M:EO.Web.DefaultClientTemplateAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.DefaultClientTemplateAttribute"></see> class.
            </summary>
      <param name="template">The template string.</param>
    </member>
    <member name="P:EO.Web.DefaultClientTemplateAttribute.Value">
      <summary>
            Gets the template string.
            </summary>
    </member>
    <member name="T:EO.Web.ColorPicker">
      <summary>
            EO.Web ColorPicker offers an Adobe Photoshop style popup color picker for ASP.NET.
            </summary>
    </member>
    <member name="M:EO.Web.ColorPicker.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.ColorPicker"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupExpandEffect">
      <summary>
            Specifies the Effect object that controls the effect to expand the color picker popup.
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupCollapseEffect">
      <summary>
            Specifies the Effect object that controls the effect to collapse the color picker popup.
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupExpandDirection">
      <summary>
            Specifies the direction to which the color picker popup displays.
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupOffsetX">
      <summary>
            Specifies the horizontal offset of the position to display the color picker popup. 
            </summary>
      <remarks>
            By default, the popup is automatically aligned to the picker button. Use
            this property along with <see cref="P:EO.Web.ColorPicker.PopupOffsetY"></see> to offset the
            popup horizontally or/and vertically. 
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupOffsetY">
      <summary>
            Specifies the vertical offset of the position to display this color picker popup. 
            </summary>
      <remarks>
            By default, the popup is automatically aligned to the picker button. Use
            this property along with <see cref="P:EO.Web.ColorPicker.PopupOffsetX"></see> to offset the
            popup horizontally or/and vertically. 
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupShadowColor">
      <summary>
            Specifies the popup shadow color.
            </summary>
      <remarks>
            No shadow is displayed if this property not set.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupShadowDepth">
      <summary>
            Specifies the popup shadow depth in pixel. 
            </summary>
      <remarks>
            No shadow is displayed if this property not set.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupImageUrl">
      <summary>
            Specifies the URL of the image displayed for the picker button. 
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupHoverImageUrl">
      <summary>
            Specifies the URL of the image to be displayed when mouse is position over the picker button.
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupDownImageUrl">
      <summary>
            Specifies the URL of the image to be displayed when mouse is pressed down over the picker button. 
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.ColorFieldMarkerImageUrl">
      <summary>
            Gets or sets the URL of the image used to indicate the current selected color on the color field.
            </summary>
      <remarks>
            EO.Web color displays a "color field". A marker is placed on the color field
            to identify the current color. Use can also drag this marker across the color
            field to choose a new color. The default marker is a small circle. Use this
            property to specify a custom marker.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.SpectrumSliderArrowImageUrl">
      <summary>
            Gets or sets the URL of the image used to indicate the current position on the color slider.
            </summary>
      <remarks>
            EO.Web ColorPicker displays a color slider for choosing the 
            base color (hue). An indicator image is used to indicate the
            current position on the slider. Use this property to customize
            the indicator image.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.Value">
      <summary>
            Gets or sets the current color of the color picker.
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupLayoutTemplate">
      <summary>
            Gets or sets the template that is used to define the color 
            picker popup layout.
            </summary>
      <remarks>
        <p>
            Use this property to customize the color picker's popup window.
            </p>
        <p>
            The LayoutTemplate can contain any valid HTML or ASP.NET server 
            control as well controls with pre-defined IDs. At runtime, the 
            color picker recongizes these pre-defined IDs and associates specific
            functionalities to the control. For example, a <see cref="T:System.Web.UI.WebControls.Button"></see> 
            control with ID "OKButton" will be automatically associated with the
            functionality of closing the popup window and accepting the current
            value.
            </p>
            The following table lists all supported IDs:
            <list type="table"><listheader><term>ID</term><description>Remark</description></listheader><item><term>ColorField</term><description>
            		Represents the color field. Must be of 
            		<see cref="T:System.Web.UI.WebControls.PlaceHolder"></see> type.
            		</description></item><item><term>SpectrumSlider</term><description>
            		Represents the spectrum slider. Must be of 
            		<see cref="T:System.Web.UI.WebControls.PlaceHolder"></see> type.
            		</description></item><item><term>OriginalColor</term><description><p>
            		Represents the <i>original color block</i>. Must be of 
            		<see cref="T:System.Web.UI.WebControls.PlaceHolder"></see> type. The original
            		color block is a rectangle area where the color
            		picker displays the original color prior to any
            		changes made by the user. It is usually placed
            		close to the <i>adjusted color block</i>, which
            		displays the current selected color.
            		</p><p>
            		Note: The element that encloses this control, 
            		not this control itself will be used for the
            		original color block. As such it is necessary
            		to set fixed size on the enclosed element to
            		define the size of the original color block.
            		For example:
            		</p><code lang="HTML">
            		&lt;div style="height:30px;width:30px;"&gt;
            		    &lt;asp:PlaceHolder runat="server" ID="OriginalColor" /&gt;
            		&lt;/div&gt;
            		</code></description></item><item><term>AdjustedColor</term><description><p>
            		Represents the <i>adjusted color block</i>. Must be of 
            		<see cref="T:System.Web.UI.WebControls.PlaceHolder"></see> type. The adjusted
            		color block is a rectangle area where the color
            		picker displays the current selected color.
            		It is usually placed
            		close to the <i>original color block</i>, which
            		displays the color prior to any user changes.
            		</p><p>
            		Note: The element that encloses this control, 
            		not this control itself will be used for the
            		adjusted color block. As such it is necessary
            		to set fixed size on the enclosed element to
            		define the size of the original color block.
            		For example:
            		</p><code lang="HTML">
            		&lt;div style="height:30px;width:30px;"&gt;
            		    &lt;asp:PlaceHolder runat="server" ID="AdjustedColor" /&gt;
            		&lt;/div&gt;
            		</code></description></item><item><term>HueTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can enter hue value (0 - 360) in this text box.
            		</description></item><item><term>SatTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can enter saturation value (0 - 100) in this text box.
            		</description></item><item><term>BrtTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can enter brightness value (0 - 100) in this text box.
            		</description></item><item><term>RTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can enter red component value (0 - 255) in this text box.
            		</description></item><item><term>GTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can enter green component value (0 - 255) in this text box.
            		</description></item><item><term>BTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can enter blue component value (0 - 255) in this text box.
            		</description></item><item><term>CTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can enter cyan component value (0 - 100) in this text box.
            		</description></item><item><term>MTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can enter magenta component value (0 - 100) in this text box.
            		</description></item><item><term>YTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can enter yellow component value (0 - 100) in this text box.
            		</description></item><item><term>KTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can enter black component value (0 - 100) in this text box.
            		</description></item><item><term>WebColorTextBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> control. User
            		can directly enter a color in hexadecimal values. For
            		example, #ff0000 for red.
            		</description></item><item><term>WebSafeCheckBox</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.CheckBox"></see> control. User
            		can use this checkbox to enable/disable web-safe color
            		mode. When in web-safe color mode, the color picker
            		only returns colors that are web-safe.
            		</description></item><item><term>ColorNameLabel</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.Label"></see> control. This label
            		is used to display the currently selected color's name
            		in English.
            		</description></item><item><term>InvertButton</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.Button"></see>, 
            		<see cref="T:System.Web.UI.WebControls.LinkButton"></see> or <see cref="T:System.Web.UI.WebControls.ImageButton"></see>
            		control. User can click this button to covert the current
            		selected color to the inverted color.
            		</description></item><item><term>DesaturateButton</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.Button"></see>, 
            		<see cref="T:System.Web.UI.WebControls.LinkButton"></see> or <see cref="T:System.Web.UI.WebControls.ImageButton"></see>
            		control. User can click this button to desaturate the current
            		selected color. <i>Desaturate</i> set the saturation to 0.
            		</description></item><item><term>OKButton</term><description>
            		Must be a <see cref="T:System.Web.UI.WebControls.Button"></see>, 
            		<see cref="T:System.Web.UI.WebControls.LinkButton"></see> or <see cref="T:System.Web.UI.WebControls.ImageButton"></see>
            		control. User can use this button to close the color picker
            		popup.
            		</description></item></list></remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.TitleText">
      <summary>
            Gets or sets the text for the popup title.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.CLabelText">
      <summary>
            Gets or sets the text for the cyan text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.MLabelText">
      <summary>
            Gets or sets the text for the magenta text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.YLabelText">
      <summary>
            Gets or sets the text for the yellow text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.KLabelText">
      <summary>
            Gets or sets the text for the black text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.HueLabelText">
      <summary>
            Gets or sets the text for the hue text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.SatLabelText">
      <summary>
            Gets or sets the text for the saturation text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.BrtLabelText">
      <summary>
            Gets or sets the text for the brightness text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.RLabelText">
      <summary>
            Gets or sets the text for the red component text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.GLabelText">
      <summary>
            Gets or sets the text for the green component text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.BLabelText">
      <summary>
            Gets or sets the text for the blue component text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.WebColorLabelText">
      <summary>
            Gets or sets the text for the web color text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.WebSafeLabelText">
      <summary>
            Gets or sets the text for the red component text box label.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.OKButtonText">
      <summary>
            Gets or sets the text for the OK button.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.TextBoxStyle">
      <summary>
            Gets or sets the style used by textboxes in the color picker popup. 
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.PopupStyle">
      <summary>
            Gets or sets the style applied to the popup window. 
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.ButtonStyle">
      <summary>
            Gets or sets the styles applied to all buttons in the popup window.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.ColorModel">
      <summary>
            Gets or sets the default color model.
            </summary>
      <remarks>
            This property is ignored when custom layout template is used.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.AutoPostBack">
      <summary>
            Gets or sets a boolean indicating whether the color picker automatically posts back
            when user selects a color. 
            </summary>
      <remarks>
            By default, this property is set to <b>false</b> and the color picker does not 
            automatically post back to server. You can set it to <b>true</b> to instruct 
            the color picker to automatically post back to the server when user select a color.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.WebColorOnly">
      <summary>
            Gets or sets a boolean indicating whether the color picker should 
            only accept web safe colors.
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.TargetControl">
      <summary>
            Gets or sets the ID of the target control of this color picker.
            The target control must be either a <see cref="T:System.Web.UI.WebControls.Label"></see>,
            a <see cref="T:System.Web.UI.WebControls.TextBox"></see> or a <see cref="T:System.Web.UI.WebControls.Panel"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.UpdateTargetText">
      <summary>
            Gets or sets a value indicating whether the color picker automatically
            updates the target control's text when user selects a color.
            </summary>
      <remarks>
            When <see cref="P:EO.Web.ColorPicker.TargetControl"></see> is a <see cref="T:System.Web.UI.WebControls.TextBox"></see>
            control, its <see cref="P:System.Web.UI.WebControls.TextBox.Text"></see> is always updated regardless
            the value of this property.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.UpdateTargetColor">
      <summary>
            Gets or sets a value indicating whether the color picker automatically
            updates the target control's background color when user selects a color.
            </summary>
    </member>
    <member name="P:EO.Web.ColorPicker.ClientSideOnChange">
      <summary>
            Gets or sets the name of the client side JavaScript function to 
            be called when user selects a color.
            </summary>
      <remarks>
            This function is not to be confused with
            <see cref="P:EO.Web.ColorPicker.ClientSideOnAdjust"></see>. Please see the remark
            section for that function for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.ColorPicker.ClientSideOnAdjust">
      <summary>
            Gets or sets the name of the client side JavaScript function to
            be called when the current color changes.
            </summary>
      <remarks>
        <p>
            This function is called when user changes the current color but 
            has not yet clicked the "Accept" button to accept the change yet.
            On the other hand, <see cref="P:EO.Web.ColorPicker.ClientSideOnChange"></see> is called
            after user has clicked the "Accept" button and closed the color
            picker.
            </p>
      </remarks>
    </member>
    <member name="E:EO.Web.ColorPicker.Change">
      <summary>
            Occurs when the color picker's <see cref="P:EO.Web.ColorPicker.Value"></see> property changes between posts to the server.
            </summary>
    </member>
    <member name="T:EO.Web.ColorModel">
      <summary>
            Represents a color model.
            </summary>
    </member>
    <member name="F:EO.Web.ColorModel.RGB">
      <summary>
            Red, Green and Blue.
            </summary>
    </member>
    <member name="F:EO.Web.ColorModel.HSB">
      <summary>
            Hue, Saturation and Brightness.
            </summary>
    </member>
    <member name="F:EO.Web.ColorModel.CMYK">
      <summary>
            Cyan, Magenta, Yellow and Black.
            </summary>
    </member>
    <member name="T:EO.Web.ComboBox">
      <summary>
            A ComboBox displays a text box edit field combined with a ListBox, enabling the user to select items from the list or to enter new text.
            </summary>
    </member>
    <member name="M:EO.Web.ComboBox.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.ComboBox"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.Text">
      <summary>
            Gets or sets the text for the ComboBox.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.DropDownTemplate">
      <summary>
            Gets or sets the drop down template.
            </summary>
      <remarks>
        <para>
            You must set this template property to specify the contents
            of the drop down. Usually you can use a <see cref="T:EO.Web.ListBox"></see>
            control in the template. For example:
            </para>
        <code lang="HTML" title="ASPX">
            &lt;eo:ComboBox .....&gt;
                ....
                &lt;DropDownTemplate&gt;
                    &lt;eo:List runat="server" id="List1"&gt;
                        ....
                        &lt;Items&gt;
                            &lt;eo:ListItem Text="Item 1" /&gt;
                            &lt;eo:ListItem Text="Item 2" /&gt;
                            &lt;eo:ListItem Text="Item 3" /&gt;
                        &lt;/Items&gt;
                        ....
                    &lt;/eo:List&gt;
                &lt;/DropDownTemplate&gt;
                ....
            &lt;/eo:ComboBox&gt;
            </code>
        <para>
            You can put any valid ASP.NET server control in the template.
            See <a href="Web/ComboBox/dropdown.html">configuring drop down template</a>
            for more details.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.HintText">
      <summary>
            Gets or sets the text to be displayed when the textbox is empty.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.IconAreaStyle">
      <summary>
            Gets or sets the style properties for the icon area.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.IconAreaHoverStyle">
      <summary>
            Gets or sets the style properties for the icon area when mouse is over the control.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.DefaultIcon">
      <summary>
            Gets or sets the default icon when the textbox is empty.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.HintTextStyle">
      <summary>
            Gets or sets the style properties for the hint text.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.AllowCustomText">
      <summary>
            Gets or sets a value indicating whether to allow custom text input.
            </summary>
      <remarks>
            When this property is <b>false</b>, user can only select
            a value from the drop down.
            </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.AutoPostBack">
      <summary>
            Gets or sets a value indicating whether to automatically post 
            back the page when the textbox loses focus after text changed.
            </summary>
      <remarks>
            When this property is set to <b>true</b>, selecting an item
            from the listbox also posts back the page.
            </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.ExpandDirection">
      <summary>
            Gets or sets the list box expand direction.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.ExpandEffect">
      <summary>
            Gets or sets the effect to be played when the drop down expands.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.CollapseEffect">
      <summary>
            Gets or sets the effect to be played when the drop down collapses.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.LabelHtml">
      <summary>
            Gets or sets the label html.
            </summary>
      <remarks>
            Use this property to optionally displays a label for the
            <see cref="T:EO.Web.ComboBox"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.LabelStyle">
      <summary>
            Gets or sets the style properties for the text label.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.TextAreaStyle">
      <summary>
            Gets or sets the style properties for the textbox area.
            </summary>
      <remarks>
            The textbox area is the area that contains the textbox.
            </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.TextAreaHoverStyle">
      <summary>
            Gets or sets the style properties for the textbox area when mouse is over the control.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.TextStyle">
      <summary>
            Gets or sets the style properties for the text box.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.IconStyle">
      <summary>
            Gets or sets the style properties for the item icon.
            </summary>
      <remarks>
        <para>
            You may provide an icon for each list item. The icon is
            displayed to the left side of the text in the <see cref="T:EO.Web.ComboBox"></see>'s
            text area.
            </para>
        <para>
            If the <see cref="P:EO.Web.ComboBox.DropDownTemplate"></see> contains a
            <see cref="T:EO.Web.ListBox"></see> control, then each <see cref="T:System.Web.UI.WebControls.ListItem"></see>'s
            <see cref="P:EO.Web.ListBoxItem.Icon"></see> property is used to
            supply the item icon value. If you use any other custom
            DropDownTemplate, then you must call
            <a href="JSDoc.Public.Web.Global.eo_SetComboBoxValue.html">eo_SelectListItem</a>
            and supply the icon value explicitly in order to display an icon.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.ButtonAreaStyle">
      <summary>
            Gets or sets the style properties for the drop down button area.
            </summary>
      <remarks>
            Drop down button area is the area that contains the drop down button.
            </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.ButtonAreaHoverStyle">
      <summary>
            Gets or sets the style properties for the drop down button area when mouse is over the control.
            </summary>
      <remarks>
            Drop down button area is the area that contains the drop down button.
            </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.ButtonStyle">
      <summary>
            Gets or sets the style properties for the drop down button.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.ButtonHoverStyle">
      <summary>
            Gets or sets the style properties for the drop down button when mouse is over the control.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.MaxLength">
      <summary>
            Gets or sets the maximum number of characters allowed in the text box.
            </summary>
    </member>
    <member name="P:EO.Web.ComboBox.DropDownContainer">
      <summary>
            Returns the container control for the drop down.
            </summary>
      <remarks>
            The returned control can be used to find child controls
            in the drop down.
            </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.ClientSideOnFocus">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called when the ComboBox receives focus.
            </summary>
      <remarks>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for prototype information about this event handler. The client side
            <a href="JSDoc.Public.Web.ComboBox.html">ComboBox</a> object is passed as the
            first parameter when calling this handler. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.ClientSideOnBlur">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called when the ComboBox loses focus.
            </summary>
      <remarks>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for prototype information about this event handler. The client side
            <a href="JSDoc.Public.Web.ComboBox.html">ComboBox</a> object is passed as the
            first parameter when calling this handler. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.ComboBox.ClientSideGetIcon">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called to retrieve item icon.
            </summary>
      <remarks>
        <para>
            By default, the <see cref="T:EO.Web.ComboBox"></see> tries to locate all
            <see cref="T:EO.Web.ListBox"></see> controls inside its <see cref="P:EO.Web.ComboBox.DropDownTemplate"></see>,
            then search for a matching <see cref="T:EO.Web.ListBoxItem"></see> from these
            <b>ListBox</b> controls. If a matching item is found, the item's
            <see cref="P:EO.Web.ListBoxItem.Icon">Icon</see> is used. Use this event to 
            override this logic.
            </para>
        <p>
            Set this property to the name of your JavaScript function that handles
            the event. The handler should take the following form:
            </p>
        <code lang="JavaScript">
            function your_event_handler(comboBox, item, e)
            {
               ....
            }
            </code>
        <p>
            These arguments are passed to your handler:
            </p>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>comboBox</term>
            <description>The <a href="JSDoc.Public.Web.ComboBox.html">ComboBox</a> that fires the event</description>
          </item>
          <item>
            <term>item</term>
            <description>The match <a href="JSDoc.Public.Web.ListBoxItem.html">ListBoxItem</a> object.
                    This argument is null if the <b>ComboBox</b> can not found a matching list item.
                    </description>
          </item>
        </list>
        <para>
            Your handler must return the new icon Url. To clear the icon,
            return <b>null</b>, in which case <see cref="P:EO.Web.ComboBox.DefaultIcon"></see>
            will be used.
            </para>
      </remarks>
    </member>
    <member name="E:EO.Web.ComboBox.TextChanged">
      <summary>
            Occurs when the content of the text box changes between posts to the server.
            </summary>
    </member>
    <member name="T:EO.Web.Control">
      <summary>
            Serves as base class that defines the methods, properties and events common to all 
            EO.Web controls that do not have user interface specific features. 
            </summary>
    </member>
    <member name="P:EO.Web.Control.ClientSideOnLoad">
      <summary>
            Gets or sets the name of the JavaScript function that is called when the control is loaded on the client side.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for the prototype of this event handler.
            </remarks>
    </member>
    <member name="P:EO.Web.Control.ClientSideOnUnload">
      <summary>
            Gets or sets the name of the JavaScript function that is called when the control is unloaded on the client side.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for the prototype of this event handler.
            </remarks>
    </member>
    <member name="P:EO.Web.Control.ClientSideOnError">
      <summary>
            Gets or sets the name of the JavaScript function that is called when an error 
            occurs on client side.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.clientside_error_handler.html">clientside_error_handler</see>
            for details about this event.
            </remarks>
    </member>
    <member name="P:EO.Web.Control.ClientSideOnMessage">
      <summary>
            Gets or sets the name of the JavaScript function that is called when the
            control displays a message.
            </summary>
      <remarks>
            This property is often used for localization purpose.
            See <see href="JSDoc.Public.Web.Handlers.clientside_message_handler.html">clientside_message_handler</see>
            for details about this event.
            </remarks>
    </member>
    <member name="T:EO.Web.CustomItem">
      <summary>
            Represents a CustomItem - a container control used to 
            host ASP.NET controls and displays them in a navigation item.
            </summary>
      <remarks>
        <p>
            A <b>CustomItem</b> is used to display a group of ASP.NET controls 
            (including EO.Web controls) in a navigation item. 	
            </p>
        <p>
            In Visual Studio.Net, you can drag a CustomItem from toolbox to a Web Form and 
            set a navigation item's <see cref="P:EO.Web.NavigationItem.CustomItemID"></see> property to the ID
            of this CustomItem control. The content of the CustomItem will be displayed as the 
            content of the navigation item.
            </p>
        <p>
            See <see href="Web/MenuCommon/ItemsAndGroups/custom_item.html">using custom item</see> for details.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.CustomItem.#ctor">
      <summary>
            Creates a CustomItem instance.
            </summary>
    </member>
    <member name="P:EO.Web.CustomItem.CancelBubble">
      <summary>
            Gets or sets a value indicating whether keyboard and mouse
            events should be bubbled up to the containing item.
            </summary>
      <value>
        <p>
          <see cref="T:System.Boolean">System.Boolean</see>
        </p>
        <p>
          <b>True</b> if keyboard and mouse events should not be bubbled up to the containing item,
            otherwise <b>false</b>.  Default value is <b>true</b>.
            </p>
      </value>
      <remarks>
        <p>
            The default value is <b>true</b> - means keyboard and mouse events
            are not bubbled up to the containing item. 
            </p>
        <p>
            Bubbling up event should be avoided in most cases 
            to prevent mouse or keyboard events from being handled twice 
            by both target control and its containing item 
            and cause unwanted behavior. 
            </p>
            For example,
            a menu has a <b>CustomItem</b> which contains a TextBox,  
            clicking on the TextBox should not cause the menu to handle mouse event, 
            which might cause submenu to collapse, page to postback or other menu-related behavior. 
            </remarks>
    </member>
    <member name="P:EO.Web.CustomItem.ID">
      <summary>
            Gets or sets the programmatic identifier assigned to the server control. 
            </summary>
    </member>
    <member name="T:EO.Web.Dialog">
      <summary>
            Provides an easy way to create, display and operate a dialog box.
            </summary>
      <remarks>
        <p>
            EO.Web provides a Dialog class that allows developers to 
            easily create, display and customize a dialog box on web page. 
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.Dialog.#ctor">
      <summary>
            Initializes a new instance of Dialog class.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.BackShadeColor">
      <summary>
            Specifies the shade of color for the background when a modal dialog is active.
            </summary>
      <remarks>
        <p>
            Specifies the shade of color for the background when a modal dialog is active.
            The "back shade" places a half-transparent shade on top of the background. 
            The shade visually indicates the existence of a modal dialog. 
            </p>
        <p>
            This property does not apply if the dialog is displayed as a modeless dialog.		
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Dialog.BackShadeOpacity">
      <summary>
            Gets or sets the opacity level for the BackShade color. 
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.ShadowColor">
      <summary>
            Gets or sets the color of the shadow of a Dialog.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.ShadowDepth">
      <summary>
            Gets or sets the depth (in pixel) of the shadow of a Dialog.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.AllowMove">
      <summary>
            Gets or sets a boolean indicating if a Dialog can be moved. Default is true.
            </summary>
      <remarks>
        <p>
            By default, user can move the dialog around by draging the dialog header.
            </p>
        <p>
            Optionally, you can use an HTML element to define a boundary within which the dialog
            can be moved. See <see cref="P:EO.Web.Dialog.ConfineElementID"></see> property for details. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Dialog.AllowResize">
      <summary>
            Gets or sets a boolean indicating if a Dialog can be resized. Default is false.
            </summary>
      <remarks>
        <p>
            By default, user cannot resize the dialog. If this property is set to true, 
            user can resize the dialog by dragging the bottom right corner of the dialog frame. 
            </p>
        <p>
            Optionally, you can use other properties to restraint the resizing behavior. 
            See <see cref="P:EO.Web.Dialog.ConfineElementID"></see>, <see cref="P:EO.Web.Dialog.MinHeight"></see>,
            <see cref="P:EO.Web.Dialog.MinWidth"></see>, <see cref="P:EO.Web.Dialog.MaxHeight"></see>, <see cref="P:EO.Web.Dialog.MaxWidth"></see> 
            for details. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ShowEffect">
      <summary>
            Gets the <see cref="T:EO.Web.Effect"></see> object that controls the effect to show a dialog.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.CloseEffect">
      <summary>
            Gets or sets the <see cref="T:EO.Web.Effect"></see> object that controls the effect when closing a dialog.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.HeaderStyleActive">
      <summary>
            Gets or sets the style of the header area of a Dialog when it is active.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.HeaderStyleInactive">
      <summary>
            Gets or sets the style of the header area of a Dialog when it is inactive.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.ContentStyleActive">
      <summary>
            Gets or sets the style for the content area of a Dialog when it is active.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.ContentStyleInactive">
      <summary>
            Gets or sets the style for the content area of a Dialog when it is inactive.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.IconUrl">
      <summary>
            Gets or sets the Dialog icon's URL.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.ContentFrameStyle">
      <summary>
            Gets or sets the style of the frame that hosts <see cref="P:EO.Web.Dialog.ContentUrl"></see>.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.Dialog.ContentUrl"></see> is set.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.CloseButtonUrl">
      <summary>
            Gets or sets the URL of the dialog's close button.
            </summary>
      <remarks>
            A dialog's close button is located at the top right corner of the header area.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.MinimizeButtonUrl">
      <summary>
            Gets or sets the URL of the dialog's minimize button.
            </summary>
      <remarks>
            Minimize button is located at a dialog's header area's top right corner. 
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.RestoreButtonUrl">
      <summary>
            Gets or sets the URL of the dialog's restore button.
            </summary>
      <remarks>
            Restore button is located at a dialog's header area's top right corner. 
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ResizeImageUrl">
      <summary>
            Gets or sets the URL of the image that is used to indicate the dialog is resizable.
            </summary>
      <remarks>
            This propertly only applies if <see cref="P:EO.Web.Dialog.AllowResize"></see> is true.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.HeaderHtml">
      <summary>
            Gets or sets the HTML of a dialog's title which is displayed at the dialog's header area.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.ConfineElementID">
      <summary>
            Gets or sets the ID of the confining element which defines
            the boundary the dialog can be displayed. Once set, the dialog
            cannot be moved or resized outside of the boundary of the confining element.
            </summary>
      <remarks>
            Use this property to define the boundary of the dialog within which can be moved
            or resized. 
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.HeaderImageUrl">
      <summary>
            Gets or sets the Dialog's header image URL.
            </summary>
      <remarks>
            Use this property to set the dialog header background image.
            <see cref="P:EO.Web.Dialog.HeaderImageHeight"></see> must be properly
            set when using this property.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.HeaderImageHeight">
      <summary>
            Gets or sets the header image height.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.HeaderHtmlFormat">
      <summary>
            String used to format <see cref="P:EO.Web.Dialog.HeaderHtml"></see> before it is used.
            </summary>
      <remarks>
            This property can be used to specify additional style information for
            <see cref="P:EO.Web.Dialog.HeaderHtml"></see>. For example, setting this property to
            <i>&lt;div style="padding-top:5px"&gt;{0}&lt;/div&gt;</i> reserves
            additional padding space on top of the dialog header text.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.MinWidth">
      <summary>
            Gets or sets the minimum width of the dialog.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.MaxWidth">
      <summary>
            Gets or sets the maximum width of the dialog.
            </summary>
      <remarks>
            Set this property to 0 to automatically adjust maximum width
            to the browser window width.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.MinHeight">
      <summary>
            Gets or sets the minimum height of the dialog.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.MaxHeight">
      <summary>
            Gets or sets the maximum height of the dialog.
            </summary>
      <remarks>
            Set this property to 0 to automatically adjust maximum height
            to the browser window height.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.Height">
      <summary>
            Gets or sets the height of the dialog.
            </summary>
      <remarks>
            This property does not work when <see cref="P:EO.Web.Dialog.ContentUrl"></see>
            is set. In that case please set height CSS attribute in 
            <see cref="P:EO.Web.Dialog.ContentStyleActive"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ContentTemplate">
      <summary>
            Gets or sets the template for the content area.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.ContentContainer">
      <summary>
            Returns the container control for the content template.
            </summary>
      <remarks>
        <p>
            Controls defined by <see cref="P:EO.Web.Dialog.ContentTemplate"></see> are created
            as child control of this control. So you can use this control to gain
            access to those controls. 
            </p>
        <p>
            This property returns <b>null</b> if <see cref="P:EO.Web.Dialog.ContentTemplate"></see> is not set.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Dialog.FooterTemplate">
      <summary>
            Gets or sets the template for the footer area.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.FooterContainer">
      <summary>
            Returns the container control for the footer template.
            </summary>
      <remarks>
        <p>
            Controls defined by <see cref="P:EO.Web.Dialog.FooterTemplate"></see> are created
            as child control of this control. So you can use this control to gain
            access to those controls. 
            </p>
        <p>
            This property returns <b>null</b> if <see cref="P:EO.Web.Dialog.FooterTemplate"></see> is not set.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Dialog.FooterStyleActive">
      <summary>
            Gets or sets the style of the footer area when the dialog is active.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.FooterStyleInactive">
      <summary>
            Gets or sets the style of the footer area when the dialog is inactive.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.ContentUrl">
      <summary>
            Gets or sets the URL to be displayed in content area.
            </summary>
      <remarks>
        <see cref="P:EO.Web.Dialog.Height">
        </see> property does not work this property
            is set. To change dialog height when <see cref="P:EO.Web.Dialog.ContentUrl"></see>
            is set, set the height CSS attribute in <see cref="P:EO.Web.Dialog.ContentStyleActive"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.HorizontalAlign">
      <summary>
            Specifies how UI elements specified in <see cref="P:EO.Web.Dialog.ContentTemplate"></see>
            or <see cref="P:EO.Web.Dialog.ContentHtml"></see> are aligned horizontally.
            </summary>
      <remarks>
            This property only applies when <see cref="P:EO.Web.Dialog.ContentTemplate"></see>
            or <see cref="P:EO.Web.Dialog.ContentHtml"></see> is specified. If using <see cref="P:EO.Web.Dialog.ContentUrl"></see>
            to specify the UI of the content area, this property is ignored.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.VerticalAlign">
      <summary>
            Specifies how UI elements specified in <see cref="P:EO.Web.Dialog.ContentTemplate"></see>
            or <see cref="P:EO.Web.Dialog.ContentHtml"></see> are aligned vertically.
            </summary>
      <remarks>
            This property only applies when <see cref="P:EO.Web.Dialog.ContentTemplate"></see>
            or <see cref="P:EO.Web.Dialog.ContentHtml"></see> is specified. If using <see cref="P:EO.Web.Dialog.ContentUrl"></see>
            to specify the UI of the content area, this property is ignored.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.AnchorElementID">
      <summary>
            Specifies the anchor element's ID at which the dialog displays. 
            </summary>
      <remarks>
        <p>
            If this property is not specified, the dialog will be displayed 
            at the center of the web page.
            </p>
        <p>
            If this property is specified, EO.Web Dialog will use 
            the position of the element and <see cref="P:EO.Web.Dialog.ShowDirection"></see> 
            property to determine where to display.
            </p>
        <para>
            Note: This property should be set to the ID of a DHTML element, not
            the ID of a server control. The ID fo the the DHTML element for a
            server control is usually the same as the control's <see cref="P:System.Web.UI.Control.ClientID"></see>
            property.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ShowDirection">
      <summary>
            Specifies the direction when showing the dialog. 
            Only applies when <see cref="P:EO.Web.Dialog.AnchorElementID"></see> is specified. 		
            </summary>
      <remarks>
        <p>
            This property only applies if <see cref="P:EO.Web.Dialog.AnchorElementID"></see> is specified.
            </p>
            When both <see cref="P:EO.Web.Dialog.AnchorElementID"></see> and this property are specified, 
            the dialog will display at the anchor element's position and expand 
            at the direction specified by this property to fully show its content.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.OffsetX">
      <summary>
            Gets or sets the horizontal offset (in pixel) between 
            the position of the page element specified at <see cref="P:EO.Web.Dialog.AnchorElementID"></see> property,
            and the position the dialog will display.
            </summary>
      <remarks>
            This property only applies if <see cref="P:EO.Web.Dialog.AnchorElementID"></see> is specified.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.OffsetY">
      <summary>
            Gets or sets the vertical offset (in pixel) between 
            the position of the page element specified at <see cref="P:EO.Web.Dialog.AnchorElementID"></see> property,
            and the position the dialog will display.
            </summary>
      <remarks>
            This property only applies if <see cref="P:EO.Web.Dialog.AnchorElementID"></see> is specified.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.AcceptButton">
      <summary>
            Gets or sets the ID of a button on the content or footer area of a dialog 
            that can be used to close the dialog and set the return result of the dialog. 
            </summary>
      <remarks>
        <p>
            When user clicks the accept button, 
            the dialog will be closed and the button's <see cref="P:System.Web.UI.WebControls.Button.CommandName"></see> property
            will be set as the return result of the dialog, which can be retrieved by using 
            the dialog's client API. 
            </p>
        <p>
            Client script can use this return result to know how
            the user closes the dialog.
            </p>
        <p>
            The ID assigned to this property must be either a <see cref="T:System.Web.UI.WebControls.LinkButton"></see>,
            <see cref="T:System.Web.UI.WebControls.ImageButton"></see> or <see cref="T:System.Web.UI.WebControls.Button"></see>
            that is on content or footer area of the current dialog. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Dialog.AcceptButtonPostBack">
      <summary>
            Gets or set a value indicating whether clicking <see cref="P:EO.Web.Dialog.AcceptButton"></see>
            causes the page to post back.
            </summary>
      <remarks>
            By default clicking <see cref="P:EO.Web.Dialog.AcceptButton"></see> only closes the dialog.
            Set this property to <b>true</b> to cause the page to be posted back immediately
            after the dialog closes.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ShowButton">
      <summary>
            Gets or sets the ID of a button that would display the dialog when clicked.
            </summary>
      <remarks>
        <p>
            Use this property to specify the ID of the button that would display the
            dialog when clicked. When using this property, whether the dialog is
            displayed as modal or modeless is determined by the dialog's 
            <see cref="P:EO.Web.Dialog.IsModal"></see> property.
            </p>
        <p>
            Alternatively, you can also use Javascript to display the dialog
            by calling the dialog's 
            <see href="JSDoc.Public.Web.Dialog.show.html">show</see> method.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Dialog.IsModal">
      <summary>
            Gets or sets a value indicating whether the default displaying mode
            for the dialog is modal.
            </summary>
      <remarks>
            This property only provides the default value. The value can be overriden
            by the first parameter of the dialog's
            <see href="JSDoc.Public.Web.Dialog.show.html">show</see> method on the 
            client side.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.TopMost">
      <summary>
            Gets or sets a value indicating whether the dialog should be top most.
            </summary>
    </member>
    <member name="P:EO.Web.Dialog.SaveLocation">
      <summary>
            Gets or sets a value indicating whether the dialog should save
            its location after the dialog is closed.
            </summary>
      <remarks>
            The default is <b>false</b>. When this property is false, the
            dialog is re-positioned every time based on these properties:
            <see cref="P:EO.Web.Dialog.AnchorElementID"></see>,
            <see cref="P:EO.Web.Dialog.ShowDirection"></see>,
            <see cref="P:EO.Web.Dialog.OffsetX"></see> and <see cref="P:EO.Web.Dialog.OffsetY"></see>.
            If this property is <b>true</b>, the dialog uses its last
            visible position when it is displayed again.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.CancelButtonPostBack">
      <summary>
            Gets or set a value indicating whether clicking <see cref="P:EO.Web.Dialog.CancelButton"></see>
            causes the page to post back.
            </summary>
      <remarks>
            By default clicking <see cref="P:EO.Web.Dialog.CancelButton"></see> only closes the dialog.
            Set this property to <b>true</b> to cause the page to be posted back immediately
            after the dialog closes.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.CancelButton">
      <summary>
            Gets or sets the ID of a button on the content or footer area of a dialog 
            that can be used to close the dialog and set the return result of the dialog. 
            </summary>
      <remarks>
        <p>
            When user clicks the cancel button, 
            the dialog will be closed and the button's <see cref="P:System.Web.UI.WebControls.Button.CommandName"></see> property
            will be set as the return result of the dialog, which can be retrieved by using 
            the dialog's client API. 
            </p>
        <p>
            The ID assigned to this property must be either a <see cref="T:System.Web.UI.WebControls.LinkButton"></see>,
            <see cref="T:System.Web.UI.WebControls.ImageButton"></see> or <see cref="T:System.Web.UI.WebControls.Button"></see>
            that is on content or footer area of the current dialog. 
            </p>
        <p>
            If user clicks the close button located on a dialog's header area's top right corner, the dialog
            will be closed and this CancelButton's <see cref="P:System.Web.UI.WebControls.Button.CommandName"></see> property will be 
            set as the dialog's return result.
            </p>
        <p>
            Client script can use this return result to know how
            the user closes the dialog.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ClientSideOnMinimize">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            when the minimize button located at dialog's header area is clicked.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.dialog_event_handler.html">
            dialog client side event handler 
            </see> for details about prototype of the handler.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ClientSideOnRestore">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            when the restore button located at dialog's header area is clicked.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.dialog_event_handler.html">
            dialog client side event handler 
            </see> for details about prototype of the handler.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ClientSideOnAccept">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            when the button that is specified by <see cref="P:EO.Web.Dialog.AcceptButton"></see> property
            is clicked.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.dialog_event_handler.html">
            dialog client side event handler 
            </see> for details about prototype of the handler.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ClientSideOnEnd">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            when the dialog closes.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.dialog_event_handler.html">
            dialog client side event handler 
            </see> for details about prototype of the handler.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ClientSideOnCancel">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            when the button that is specified by <see cref="P:EO.Web.Dialog.CancelButton"></see> property
            or the close button located at dialog's header area is clicked.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.dialog_event_handler.html">
            dialog client side event handler 
            </see> for details about prototype of the handler.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ClientSideOnInitDialog">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            right before a dialog is displayed.
            </summary>
      <remarks>
            A dialog is initialized before it is displayed. The JavaScript function specified 
            by this property is called right before it is displayed. 
            </remarks>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.dialog_event_handler.html">
            dialog client side event handler 
            </see> for details about prototype of the handler.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ActivateOnClick">
      <summary>		
            Gets or sets a boolean indicating if a modeless dialog should be activated when user clicks on it.
            This property does not apply to modal dialogs. 
            </summary>
      <remarks>
            This property only applies to modeless dialogs and does not apply to modal dialogs. 
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.InitialState">
      <summary>
            Specified the state of a dialog when the page contains the dialog is just loaded.
            </summary>
      <remarks>
            Specified the state of a dialog when the page contains the dialog is just loaded.
            By default, the dialog is hidden when the page is loaded. You can use a client side API
            to display the dialog. 
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.ContentHtml">
      <summary>
            Specifies the HTML to be displayed in a dialog's content area.
            </summary>
      <remarks>
            When this property is specified, 
            <see cref="P:EO.Web.Dialog.ContentUrl"></see> and <see cref="P:EO.Web.Dialog.ContentTemplate"></see>
            will be ignored.
            </remarks>
    </member>
    <member name="P:EO.Web.Dialog.FooterHtml">
      <summary>
            Specifies the HTML to be displayed in a dialog's footer area.
            </summary>
      <remarks>
            When this property is specified, 
            <see cref="P:EO.Web.Dialog.FooterTemplate"></see>
            will be ignored.
            </remarks>
    </member>
    <member name="M:EO.Web.Dialog.Show">
      <summary>
            Displays the dialog.
            </summary>
      <remarks>
            This method sets <see cref="P:EO.Web.Dialog.InitialState"></see> to <see cref="F:EO.Web.DialogState.Visible"></see>.
            </remarks>
    </member>
    <member name="T:EO.Web.DialogState">
      <summary>
            Defines the initial state of a Dialog when the webpage that contains it is loaded.
            </summary>
    </member>
    <member name="F:EO.Web.DialogState.Hidden">
      <summary>
            The dialog is hidden when the page is loaded.
            </summary>
    </member>
    <member name="F:EO.Web.DialogState.Visible">
      <summary>
            The dialog is visible when the page is loaded.
            </summary>
    </member>
    <member name="F:EO.Web.DialogState.Minimized">
      <summary>
            The dialog is minimized when the page is loaded.
            </summary>
    </member>
    <member name="T:EO.Web.MsgBox">
      <summary>
            Displays a modal message box.
            </summary>
    </member>
    <member name="P:EO.Web.MsgBox.MsgBoxButtonType">
      <summary>
            Gets or sets the type of buttons this message box displays.
            </summary>
    </member>
    <member name="P:EO.Web.MsgBox.MsgBoxIconStyle">
      <summary>
            Gets or sets the style of the message box icon.
            </summary>
    </member>
    <member name="P:EO.Web.MsgBox.MsgBoxTextStyle">
      <summary>
            Gets or sets the style of the message box text.
            </summary>
    </member>
    <member name="P:EO.Web.MsgBox.MsgBoxButtonStyle">
      <summary>
            Gets or sets the style of the message box buttons.
            </summary>
    </member>
    <member name="P:EO.Web.MsgBox.MsgBoxButtonHoverStyle">
      <summary>
            Gets or sets the style of the message box buttons when mouse hovers over the button.
            </summary>
    </member>
    <member name="P:EO.Web.MsgBox.MsgBoxButtonSpacing">
      <summary>
            Gets or sets the spacing in pixel between message box buttons.
            </summary>
    </member>
    <member name="M:EO.Web.MsgBox.Show(System.String,System.String,System.String,EO.Web.MsgBoxButton[])">
      <summary>
            Displays the message box.
            </summary>
      <param name="title">The message box title.</param>
      <param name="message">The message box text.</param>
      <param name="icon">The message box icon.</param>
      <param name="buttons">One or more message box buttons.</param>
    </member>
    <member name="E:EO.Web.MsgBox.ButtonClick">
      <summary>
            Triggered when a button is initialized with
            a <see cref="P:EO.Web.MsgBoxButton.CommandName"></see>
            value.
            </summary>
    </member>
    <member name="T:EO.Web.MsgBoxButtonType">
      <summary>
            Specifies the type of message box button.
            </summary>
    </member>
    <member name="F:EO.Web.MsgBoxButtonType.PushButton">
      <summary>
            Push button. <see cref="P:EO.Web.MsgBoxButton.Text">MsgBoxButton.Text</see>
            contains the button text.
            </summary>
    </member>
    <member name="F:EO.Web.MsgBoxButtonType.LinkButton">
      <summary>
            Link button. <see cref="P:EO.Web.MsgBoxButton.Text">MsgBoxButton.Text</see>
            contains the button text.
            </summary>
    </member>
    <member name="F:EO.Web.MsgBoxButtonType.ImageButton">
      <summary>
            Image button. <see cref="P:EO.Web.MsgBoxButton.Text">MsgBoxButton.Text</see>
            contains the image URL.
            </summary>
    </member>
    <member name="F:EO.Web.MsgBoxButtonType.Custom">
      <summary>
        <see cref="P:EO.Web.MsgBoxButton.Text">MsgBoxButton.Text</see>
            contains the raw HTML used for this button.
            </summary>
    </member>
    <member name="T:EO.Web.MsgBoxButton">
      <summary>
            Represents a message box button.
            </summary>
    </member>
    <member name="M:EO.Web.MsgBoxButton.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the MsgBoxButton class.
            </summary>
      <param name="text">The button text.</param>
      <param name="clientSideHandler">The name of a client side JavaScript function
            to be called when the button is clicked.</param>
      <param name="commandName">A command name associated to this button.
            The button does not trigger server side <see cref="E:EO.Web.MsgBox.ButtonClick"></see>
            event unless this parameter has a value that is not null
            (Visual Basic Nothing).
            </param>
    </member>
    <member name="M:EO.Web.MsgBoxButton.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the MsgBoxButton class.
            </summary>
      <param name="text">The button text.</param>
      <param name="clientSideHandler">The name of a client side JavaScript function
            to be called when the button is clicked.</param>
      <remarks>
            This constructor creates a button
            that does not trigger server side <see cref="E:EO.Web.MsgBox.ButtonClick"></see> event.
            </remarks>
    </member>
    <member name="M:EO.Web.MsgBoxButton.#ctor(System.String)">
      <summary>
            Initializes a new instance of the MsgBoxButton class.
            </summary>
      <param name="text">The button text.</param>
      <remarks>
            This constructor creates a button
            that closes the dialog when clicked.
            </remarks>
    </member>
    <member name="P:EO.Web.MsgBoxButton.Text">
      <summary>
            The button text.
            </summary>
      <remarks>
            This exact meaning of this property varies based on
            the button type. See <see cref="T:EO.Web.MsgBoxButtonType"></see>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.MsgBoxButton.ClientSideHandler">
      <summary>
            The name of a client side JavaScript function to be called
            when the button is clicked.
            </summary>
    </member>
    <member name="P:EO.Web.MsgBoxButton.CommandName">
      <summary>
            A command name associated to this button. When a command name
            is associated to a button, click the button
            triggers server side <see cref="E:EO.Web.MsgBox.ButtonClick"></see>
            event.
            </summary>
    </member>
    <member name="T:EO.Web.Downloader">
      <summary>
            EO.Web Downloader offers a fast and convenient way to
            add download functionalities.
            </summary>
    </member>
    <member name="M:EO.Web.Downloader.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.Downloader"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.Downloader.DynamicContent">
      <summary>
            Gets or sets whether the contents to be downloaded is generated dynamically.
            </summary>
    </member>
    <member name="P:EO.Web.Downloader.DownloadButtonID">
      <summary>
            Gets or sets the ID of the button control that triggers the download.
            </summary>
      <remarks>
            The button used to trigger a download must be a <see cref="T:System.Web.UI.WebControls.Button"></see>, 
            a <see cref="T:System.Web.UI.WebControls.LinkButton"></see> or an <see cref="T:System.Web.UI.WebControls.ImageButton"></see> control.
            </remarks>
    </member>
    <member name="P:EO.Web.Downloader.AutoHideDownloadButton">
      <summary>
            Gets or sets a value indicating whether the Downloader automatically hides the download button after user has clicked it.
            </summary>
    </member>
    <member name="P:EO.Web.Downloader.Url">
      <summary>
            Gets or sets the URL of the file to be downloaded.
            </summary>
      <remarks>
            Set this property to download a file from another server.
            </remarks>
    </member>
    <member name="P:EO.Web.Downloader.FilePath">
      <summary>
            Gets or sets the full path of the file to be downloaded.
            </summary>
    </member>
    <member name="P:EO.Web.Downloader.SaveAsFileName">
      <summary>
            Gets or sets the default file name for the download.
            </summary>
      <remarks>
        <p>
            This property is used with <see cref="P:EO.Web.Downloader.FilePath"></see> or
            <a href="Web/Downloader/dynamic.html">dynamic download content</a>. 
            </p>
        <p>
            By default when <see cref="P:EO.Web.Downloader.FilePath"></see> is set, your user
            will see the file name derived from <see cref="P:EO.Web.Downloader.FilePath"></see>.
            You can override this file name by setting 
            <see cref="P:EO.Web.Downloader.SaveAsFileName"></see> property.
            </p>
        <p>
            When using dynamic downloading, you must either set
            this property or call <see cref="M:EO.Web.DynamicDownloadContent.SetFileName(System.String,System.Int32)"></see>
            to specify the download file name.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Downloader.DirectLinkLabelID">
      <summary>
            Gets or sets the ID of the Label control used to display a direct download link.
            </summary>
    </member>
    <member name="P:EO.Web.Downloader.DirectLinkLabelFormat">
      <summary>
            Gets or sets the format string used to format the Label control
            specified by <see cref="P:EO.Web.Downloader.DirectLinkLabelID"></see>.
            </summary>
      <remarks>
            The Downloader calls string.Format using value of this
            property as the format string and the actual download Url
            as the format argument. For example, setting this property
            to <i>Click &lt; href="{0}"a&gt;here&lt;/a&gt; to download</i>
            renders text "Click here to download" with a direct download
            link.
            </remarks>
    </member>
    <member name="P:EO.Web.Downloader.CausesValidation">
      <summary>
            Gets or sets a value indicating whether validation is performed when
            a dynamic download is triggered.
            </summary>
    </member>
    <member name="P:EO.Web.Downloader.ClientSideOnDownload">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called when user starts a download.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for prototype information about this event handler. The client side
            <a href="JSDoc.Public.Web.Downloader.html">Downloader</a> object is passed as the
            first parameter when calling this handler.
            </remarks>
    </member>
    <member name="E:EO.Web.Downloader.Download">
      <summary>
            Triggered when user clicks the download button.
            </summary>
      <remarks>
            You can use this event to record the download activities. If
            <see cref="P:EO.Web.Downloader.DynamicContent"></see> is set to true, you can also
            call <see cref="M:EO.Web.DownloadEventArgs.DynamicDownload(System.Type,System.Collections.Specialized.NameValueCollection)"></see>
            to start a dynamic download inside this event handler.
            </remarks>
    </member>
    <member name="T:EO.Web.DownloadEventArgs">
      <summary>
            Provides data for the <see cref="E:EO.Web.Downloader.Download"></see> event.
            </summary>
    </member>
    <member name="M:EO.Web.DownloadEventArgs.DynamicDownload(System.Type,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Starts a dynamic download.
            </summary>
      <param name="dynamicContentClass">The class that is responsible
             for generating the download content. It must derive from 
            <see cref="T:EO.Web.DynamicDownloadContent"></see>.</param>
      <param name="args">
            Additional arguments to be passed to download content generating
            routine that will be accessible through 
            <see cref="P:EO.Web.DynamicDownloadContent.Arguments"></see> property.
            </param>
      <remarks>
            See <a href="Web/Downloader/dynamic.html">generating dynamic download content</a>
            for more detail.
            </remarks>
    </member>
    <member name="T:EO.Web.DownloadEventHandler">
      <summary>
            Represents the method that handles the <see cref="E:EO.Web.Downloader.Download"></see> event.
            </summary>
    </member>
    <member name="T:EO.Web.DynamicDownloadContent">
      <summary>
            Responsible for generating dynamic download contents.
            </summary>
      <remarks>
            You must derive from this class to implement your own dynamic contents
            generating logic. See <a href="Web/Downloader/dynamic.html">generating dynamic download contents</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.DynamicDownloadContent.SourceUrl">
      <summary>
            Gets the Url of the page that initiated this dynamic download.
            </summary>
    </member>
    <member name="M:EO.Web.DynamicDownloadContent.GenerateContent">
      <summary>
            Generates download contents.
            </summary>
      <remarks>
            You must override this function to generate download contents.
            See <a href="Web/Downloader/dynamic.html">generating dynamic download contents</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.DynamicDownloadContent.Arguments">
      <summary>
            Gets the arguments passed through by <see cref="M:EO.Web.DownloadEventArgs.DynamicDownload(System.Type,System.Collections.Specialized.NameValueCollection)"></see>.
            </summary>
    </member>
    <member name="M:EO.Web.DynamicDownloadContent.SetFileName(System.String,System.Int32)">
      <summary>
            Initializes the default file name and content length.
            </summary>
      <param name="saveAsFileName">Specifies the default file name used when user saves the download.</param>
      <param name="contentLength">Specifies the content length. If you do not know the content length,
            pass -1 to this argument. Note without specifying a content length, browsers will not be able to
            display progress information for the download.</param>
      <remarks>
            This function should be called before calling
            <see cref="M:EO.Web.DynamicDownloadContent.Write(System.Byte[],System.Int32,System.Int32)"></see>.
            </remarks>
    </member>
    <member name="M:EO.Web.DynamicDownloadContent.WriteFile(System.String,System.String)">
      <summary>
            Transfer a physical file directly to the client side.
            </summary>
      <param name="filePath">Full physical file path.</param>
      <param name="saveAsFileName">Specifies the default file name used when user saves the download.</param>
    </member>
    <member name="M:EO.Web.DynamicDownloadContent.WriteFile(System.String)">
      <summary>
            Transfer a physical file directly to the client side.
            </summary>
      <param name="filePath">Full physical file path.</param>
      <remarks>
            This function use the file name derived from <i>filePath</i>
            as <i>saveAsFileName</i>.
            </remarks>
    </member>
    <member name="M:EO.Web.DynamicDownloadContent.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Output dynamic download contents.
            </summary>
      <param name="buffer">An array of bytes. This method copies count bytes from buffer to the output stream.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the output stream.</param>
      <param name="count">The number of bytes to be written to the output stream.</param>
    </member>
    <member name="M:EO.Web.DynamicDownloadContent.InitOutputStream">
      <summary>
            Initializes the output stream.
            </summary>
      <returns>A Stream object used to write binary output directly.</returns>
    </member>
    <member name="M:EO.Web.DynamicDownloadContent.Flush">
      <summary>
            Sends all currently buffered output to the client.
            </summary>
    </member>
    <member name="T:EO.Web.EditableLabel">
      <summary>
            Represents a static text that can be editted by clicking it.
            </summary>
    </member>
    <member name="M:EO.Web.EditableLabel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.EditableLabel"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.EditableLabel.NormalStyle">
      <summary>
            Gets or sets the style properties when the label is not in edit mode.
            </summary>
    </member>
    <member name="P:EO.Web.EditableLabel.ActiveStyle">
      <summary>
            Gets or sets the style properties when the label is in edit mode.
            </summary>
    </member>
    <member name="P:EO.Web.EditableLabel.Hint">
      <summary>
            Gets or sets the hint text when <see cref="P:EO.Web.EditableLabel.Value"></see> is empty.
            </summary>
    </member>
    <member name="P:EO.Web.EditableLabel.Value">
      <summary>
            Gets or sets the text value.
            </summary>
    </member>
    <member name="P:EO.Web.EditableLabel.Format">
      <summary>
            Gets or sets the text format.
            </summary>
      <remarks>
            When this property is set, the control use this property to
            format <see cref="P:EO.Web.EditableLabel.Value"></see> and then displays the result
            text.
            </remarks>
    </member>
    <member name="P:EO.Web.EditableLabel.MaxLength">
      <summary>
            Gets or set the maximium number of characters allowed.
            </summary>
    </member>
    <member name="P:EO.Web.EditableLabel.ClientSideOnChange">
      <summary>
            Specifies the name of client side JavaScript function after use edited the text.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.editablelabel_change_handler.html">editablelabel_change_handler</a>
            for prototype information about this handler.
            </remarks>
    </member>
    <member name="P:EO.Web.EditableLabel.AutoSelect">
      <summary>
            Gets or sets a value indicating whether all the text
            should be automatically selected when entering edit mode.
            </summary>
    </member>
    <member name="P:EO.Web.EditableLabel.AllowEdit">
      <summary>
            Gets or sets a value indicating whether editing should be allowed.
            </summary>
    </member>
    <member name="E:EO.Web.EditableLabel.Changed">
      <summary>
            Occurs when the control's value has changed after post back.
            </summary>
    </member>
    <member name="T:EO.Web.Editor">
      <summary>
            Represents an WYSIWYG HTML editor.
            </summary>
    </member>
    <member name="M:EO.Web.Editor.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.Editor"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.Styles">
      <summary>
            Get a collection of <see cref="T:EO.Web.EditorStyle"></see> objects that
            are used to fill the style drop down on the tool bar.
            See <a href="Web/Editor/customize_toolbar.html#toolbar_dropdown">customizing toolbars</a> 
            for more details.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.HeaderStyle">
      <summary>
            Gets or sets the style applied to the header area.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.EditAreaStyle">
      <summary>
            Gets or sets the style applied to the edit area.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.TextAreaCssFile">
      <summary>
            Specifies the path of an external CSS file that provides CSS styles 
            for text in the editing area. 
            </summary>
      <remarks>
            The path must be a path relative to the application root, that is,
            starting with "~/". For example, "~/styles/editor.css".
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.HtmlBodyCssClass">
      <summary>
            Gets or sets the style applied to the body element of the text area.
            </summary>
      <remarks>
            This property can be used to set the default font for the editor
            contents. The same CSS class usually should also be used while displaying
            the contents without using the editor in order to maintain consistent 
            look and feel for the contents. 
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.FooterStyle">
      <summary>
            Gets or sets the style applied to the footer area.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.FooterVisible">
      <summary>
            Gets or sets a value indicating whether footer is visible.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.TabButtonStyles">
      <summary>
            Gets or sets the style to be applied to the Design/HTML/Preview tab button.
            </summary>
      <remarks>
        <p>
            The editor can switch between three views: Design, HTML and Preview.
            By default, three tab buttons are displayed in the footer area for
            switching views. This property specifies the default styles for these
            tab buttons.
            </p>
        <p>
            Styles set by this property can be overriden by 
            <see cref="P:EO.Web.Editor.DesignTabButtonStyles"></see>,
            <see cref="P:EO.Web.Editor.HtmlTabButtonStyles"></see> and
            <see cref="P:EO.Web.Editor.PreviewTabButtonStyles"></see>, each for Design, HTML
            and Preview tab button respectively.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Editor.DesignTabButtonStyles">
      <summary>
            Gets or sets the styles for the design tab button.  
            </summary>
      <remarks>
            Use this property to override default value set by
            <see cref="P:EO.Web.Editor.TabButtonStyles"></see> property.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.HtmlTabButtonStyles">
      <summary>
            Gets or sets the styles for the HTML tab button.
            </summary>
      <remarks>
            Use this property to override default value set by
            <see cref="P:EO.Web.Editor.TabButtonStyles"></see> property.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.PreviewTabButtonStyles">
      <summary>
            Gets or sets the styles for the preview tab button.
            </summary>
      <remarks>
            Use this property to override default value set by
            <see cref="P:EO.Web.Editor.TabButtonStyles"></see> property.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.BreadcrumbLabelStyle">
      <summary>
            Gets or sets the style applied to the bread crumb label.
            </summary>
      <remarks>
        <p>
            A text label is displayed in front of the bread crumb button list.
            Use this property and <see cref="P:EO.Web.Editor.BreadcrumbLabelText"></see> to
            customize the text and style of the label.
            </p>
        <p>
            See <a href="Web/Editor/customize_footer.html">customizing footer</a> for details about
            bread crumb buttons.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Editor.BreadcrumbItemStyle">
      <summary>
            Gets or sets the style applied to bread crumb buttons.
            </summary>
      <remarks>
            See <a href="Web/Editor/customize_footer.html">customizing footer</a> for details about
            bread crumb buttons.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.BreadcrumbItemHoverStyle">
      <summary>
            Gets or sets the style applied to a bread crumb button when 
            mouse hovers over the button.
            </summary>
      <remarks>
            See <a href="Web/Editor/customize_footer.html">customizing footer</a> for details about
            bread crumb buttons.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.BreadcrumbItemSeparatorStyle">
      <summary>
            Gets or sets the style applied to bread crumb button separators.
            </summary>
      <remarks>
            Separators are placed between bread crumb buttons.
            See <a href="Web/Editor/customize_footer.html">customizing footer</a> for details about
            bread crumb buttons.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.EmoticonDropDownStyle">
      <summary>
            Gets or sets the style applied to the emoticon drop down.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.BreadcrumbDropDownStyle">
      <summary>
            Gets or sets the style applied to the breadcrumb drop down.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.EmoticonStyle">
      <summary>
            Gets or sets the style applied to each emoticon in the emoticon drop down.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.EmoticonSet">
      <summary>
            Gets or sets name of the custom emoticon set to be used.
            </summary>
      <remarks>
            Custom emoticon sets are registered with <see cref="M:EO.Web.Editor.RegisterEmoticonSet(System.String,EO.Web.Emoticon[])"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.EmoticonSpacing">
      <summary>
            Gets or sets the spacing between emoticons in pixel.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.HighlightColor">
      <summary>
            Gets or sets the bread crumb highlight color.
            </summary>
      <remarks>
        <p>
            When user hovers over a bread crumb button, the corresponding
            element is highlighted. This property gets or sets the color
            used for highlighting.
            </p>
        <p>
            This property is not to be confused with selection highlighting
            color, which is not customizable.
            </p>
        <p>
            See <a href="Web/Editor/customize_footer.html">customizing footer</a> for details about
            bread crumb buttons.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Editor.FontUnit">
      <summary>
            Gets or sets the unit type used by the font drop down box.
            </summary>
      <remarks>
            Only <see cref="F:System.Web.UI.WebControls.UnitType.Pixel"></see> and <see cref="F:System.Web.UI.WebControls.UnitType.Point"></see> are
            currently supported.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.ToolBarSet">
      <summary>
            Gets or sets the tool bar set to be used.
            </summary>
      <remarks>
            See <see href="Web/Editor/customize_toolbar.html">customizing toolbar</see>
            for more details about how to customize toolbars.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.ToolBarSkin">
      <summary>
            Gets or sets the ID of the skin to be used by toolbars.
            </summary>
      <remarks>
        <p>
            This property is used on <see cref="T:EO.Web.ToolBar"></see> controls that
            are automatically created by the editor. It has no effect on
            <see cref="T:EO.Web.ToolBar"></see> controls defined in
            <see cref="P:EO.Web.Editor.CustomHeaderTemplate"></see>.
            </p>
        <p>
            See <see href="Web/Editor/customize_toolbar.html">customizing toolbar</see>
            for more details about how to customize toolbars.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Editor.ToolBarItems">
      <summary>
            Gets or sets the list of tool bar items. 
            </summary>
      <remarks>
        <p>
            The editor supports a set of <a href="Web/Editor/commands.html">pre-defined commands</a>.
            A toolbar button can be created for most of these commands.
            Use this property to customize the buttons to be displayed  
            by specify a list of command names. 
            </p>
        <p>
            The following special characters are used to separate the command
            names:
            </p>
        <list type="table">
          <listheader>
            <term>Character</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>;</term>
            <description>
            		Separating toolbars. For example:
            		<code>
            		New,Copy,Cut,Paste;Bold,Underline,Italic
            		</code>
            		Creates two toolbars, the first toolbar includes
            		four toolbar buttons: <i>New</i>, <i>Copy</i>, 
            		<i>Cut</i> and <i>Paste</i>. The second toolbar
            		includes three toolbar buttons: <i>Bold</i>,
            		<i>Underline</i> and <i>Italic</i>.
            		</description>
          </item>
          <item>
            <term>,</term>
            <description>
            		Separating toolbar buttons. For example:
            		<code>
            		New,Copy,Cut,Paste
            		</code>
            		Creates a toolbar with four toolbar buttons: 
            		<i>New</i>, <i>Copy</i>, <i>Cut</i> and <i>Paste</i>.
            		</description>
          </item>
          <item>
            <term>:</term>
            <description>
              <p>
            		Separating the command name and the tooltip text
            		for the same toolbar item. For example:
            		<code>
            		New:New Document,Copy:Copy to Clipboard,Cut:Cut to Clipboard,Paste:Insert from Clipboard
            		</code>
            		Creates a toolbar with four toolbar buttons: 
            		<i>New</i>, <i>Copy</i>, <i>Cut</i> and <i>Paste</i>,
            		with their tooltip text set to <i>New Document</i>,
            		<i>Copy to Clipboard</i>, <i>Cut to Clipboard</i>
            		and <i>Paste from Clipboard</i> respectively.
            		</p>
              <p>
            		Since the editor supplies default tooltip text in
            		English, this feature is often used to replace the
            		default tooltip text, mostly for localize purpose.
            		</p>
            </description>
          </item>
          <item>
            <term>,,</term>
            <description>
            		Two consecutive "," creates a separator item. For example:
            		<code>
            		New,,Copy,Cut,Paste
            		</code>
            		Creates a toolbar with four toolbar buttons: 
            		<i>New</i>, <i>Copy</i>, <i>Cut</i> and <i>Paste</i>,
            		with a separator between <i>New</i> and <i>Copy</i>.
            		</description>
          </item>
        </list>
        <p>
            See <see href="Web/Editor/customize_toolbar.html">customizing toolbar</see>
            for more details about how to customize toolbars.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Editor.Html">
      <summary>
            Gets or sets the editor contents.
            </summary>
      <a>
            See <a href="Editor/contents.html">accessing editor contents</a> for more details.
            </a>
    </member>
    <member name="P:EO.Web.Editor.DesignTabButtonText">
      <summary>
            Gets or sets the text for the design tab button.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.PreviewTabButtonText">
      <summary>
            Gets or sets the text for the preview tab button.
            </summary>
      <remarks>
            Set this property to an empty string to hide the preview tab.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.HtmlTabButtonText">
      <summary>
            Gets or sets the text for the HTML tab button.
            </summary>
      <remarks>
            Set this property to an empty string to hide the HTML tab.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.BreadcrumbLabelText">
      <summary>
            Gets or sets the text for the bread crumb label.
            </summary>
      <remarks>
        <p>
            A text label is displayed in front of the bread crumb button list.
            Use this property and <see cref="P:EO.Web.Editor.BreadcrumbLabelStyle"></see> to
            customize the text and style of the label.
            </p>
        <p>
            See <see cref="P:EO.Web.Editor.BreadcrumbLabelStyle"></see> for details about
            bread crumb buttons.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Editor.FontNames">
      <summary>
            Gets or sets the list of font names displayed in the font drop down.
            </summary>
      <remarks>
            Use "|" to separate font names. For example, "Arial|Courier New"
            fills the font drop down with two items: "Arial" and "Courier New". 
            The editor uses a list that includes all available fonts when this
            property is not set.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.FontSizes">
      <summary>
            Gets or sets the font sizes to be displayed in the font size drop down. 
            </summary>
      <remarks>
            Use "|" to separate font sizes. For example, "12pt|16pt" represents two
            size items "12pt" and "16pt".
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.ActiveMode">
      <summary>
            Gets or sets the current mode for the Editor control.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.LineBreakMode">
      <summary>
            Gets or sets the type of element to be inserted when user presses enter key.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.CustomHeaderTemplate">
      <summary>
            Gets or sets the custom header template.
            </summary>
      <remarks>
            Use this property to customize the header area of the editor.
            See <see href="Web/Editor/customize_toolbar.html">customizing toolbar</see>
            for more details about how to customize toolbars.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.HeaderContainer">
      <summary>
            Returns the container control for the header section.
            </summary>
      <remarks>
            You can call <see cref="M:System.Web.UI.Control.FindControl(System.String)"></see> on the returned control
            to locate child control inside <see cref="P:EO.Web.Editor.CustomHeaderTemplate"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.CustomFooterTemplate">
      <summary>
            Gets or sets the custom footer template.
            </summary>
      <remarks>
            Use this property to customize the footer area of the editor.
            See <a href="Web/Editor/customize_footer.html">customizing footer area</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.FooterContainer">
      <summary>
            Returns the container control for the footer section.
            </summary>
      <remarks>
            You can call <see cref="M:System.Web.UI.Control.FindControl(System.String)"></see> on the returned control
            to locate child control inside <see cref="P:EO.Web.Editor.CustomFooterTemplate"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.DialogTemplates">
      <summary>
            Gets a collection of <see cref="T:EO.Web.EditorDialogTemplate"></see>
            objects used by the editor.
            </summary>
      <remarks>
            All dialogs used by the editor (Find and Replace, Insert Link, etc)
            can be customized, either purely for visual appearance reason or
            for localization purpose. See 
            <a href="Web/Editor/customize_dialog.html">customizing dialogs</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.DialogContents">
      <summary>
            Gets a collection of <see cref="T:EO.Web.EditorDialogContent"></see>
            objects used by the editor.
            </summary>
      <remarks>
            All dialogs used by the editor (Find and Replace, Insert Link, etc)
            can be customized, either purely for visual appearance reason or
            for localization purpose. See 
            <a href="Web/Editor/customize_dialog.html">customizing dialogs</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.ColorPickerID">
      <summary>
            Gets or sets the ID of the <see cref="T:EO.Web.ColorPicker"></see> control
            used by the editor.
            </summary>
      <remarks>
            The editor uses an external <see cref="T:EO.Web.ColorPicker"></see> control 
            for user to select foreground and background color. This property
            specifies the ID of the <see cref="T:EO.Web.ColorPicker"></see> control.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.SpellCheckerID">
      <summary>
            Gets or sets the ID of the <see cref="T:EO.Web.SpellChecker"></see> control
            used by the editor.
            </summary>
      <remarks>
            The editor relies on an external <see cref="T:EO.Web.SpellChecker"></see>
            control to spell check the contents. Use this property to specify
            the ID of the external spell checker control. 
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.ContextMenuID">
      <summary>
            Gets or sets the ID of the <see cref="T:EO.Web.ContextMenu"></see> control used
            by the editor.
            </summary>
      <remarks>
            The editor can display context sensitive menu when user right click
            in the edit region. See <a href="Web/Editor/customize_menu.html">customizing context menu</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.IndentWidth">
      <summary>
            Gets or sets the indent width in pixel.
            </summary>
      <remarks>
            This property specifies the amount of indent in pixel when user uses 
            the <i>Indent</i> command to indent a block in edit (Design) mode.
            It is not to be confused with <see cref="P:EO.Web.Editor.HtmlIndentWidth"></see>,
            which specifies the amount of indent between an inner element and
            its parent element when formatting the editor contents into HTML.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.HtmlIndentWidth">
      <summary>
            Gets or sets the indent amount in character for inner HTML elements while formatting editor contents into HTML.
            </summary>
      <remarks>
        <p>
            This property set the amount of indent between an inner HTML element 
            and its parent element when formatting the editor contents into HTML. 
            For example, the indent between the first and second <i>div</i> elements
            for the following HTML:
            </p>
        <code lang="HTML">
            &lt;div&gt;
                &lt;div&gt;some text&lt;/div&gt;
            &lt;/div&gt;
            </code>
        <p>
            The property is not to be confused with <see cref="P:EO.Web.Editor.IndentWidth"></see>,
            which specifies the amount of indent in pixel when user uses the <i>Indent</i> 
            command to indent a block in edit (Design) mode.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Editor.ClientSideOnContextMenu">
      <summary>
            Gets or sets the name of the client side JavaScript 
            function to be called when the editor is about to display
            a context menu.
            </summary>
      <remarks>
        <p>
            This event can be used to modify or cancel the context menu. 
            See <a href="JSDoc.Public.Web.Handlers.editor_contextmenu.html">editor_oncontextmenu</a>
            for more details.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Editor.ClientSideOnContextChanged">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called 
            when the current element has changed.
            </summary>
      <remarks>
        <p>
            This event is raised when the current element has changed, for example,
            when user moves the caret from one paragrah to another paragrah.
            You can call <a href="JSDoc.Public.Web.Editor.getCurrentElement.html">getCurrentElement</a>
            to return the current element on the client side.
            </p>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for prototype information about this handler.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Editor.ClientSideOnChange">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called when the editor contents changes.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for prototype information about this handler.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.PreserveRelativePaths">
      <summary>
            Gets or sets a value indicating whether relative paths are preserved.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.PasteFilter">
      <summary>
            Gets or sets a value indicating how pasted text is processed.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.ClientSideOnPaste">
      <summary>
            Gets or sets the name of the client side JavaScript function to be 
            called to process pasted text.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.editor_paste_handler.html">editor_paste_handler</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.FileExplorerDialogID">
      <summary>
            Gets or sets the ID of the file browsing dialog.
            </summary>
      <remarks>
            The dialog must contain a <see cref="T:EO.Web.FileExplorerHolder"></see> control,
            which is used to interact with the <see cref="T:EO.Web.FileExplorer"></see> control
            hosted by a separate page specified by <see cref="P:EO.Web.Editor.FileExplorerUrl"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.Editor.FileExplorerUrl">
      <summary>
            Gets or sets the URL of the page that contains the FileExplorer control used to browse file.
            </summary>
    </member>
    <member name="P:EO.Web.Editor.BaseUrl">
      <summary>
            Gets or sets the base URL for the editor content.
            </summary>
    </member>
    <member name="E:EO.Web.Editor.Save">
      <summary>
            Occurs when user clicks the save button on the toolbar.
            </summary>
      <remarks>
            Depending on the tool bar configuration, the <i>save</i> button 
            may not appear on the tool bar. 
            See <a href="Web/Editor/customize_toolbar.html">customizing toolbar</a>
            for more details.
            </remarks>
    </member>
    <member name="M:EO.Web.Editor.RegisterEmoticonSet(System.String,EO.Web.Emoticon[])">
      <summary>
            Registers a custom emoticon set.
            </summary>
      <param name="name">Name of the set. Set it to <b>null</b>
            (Visual Basic <b>Nothing</b>) to replace the default emoticon set.</param>
      <param name="icons">A list of <see cref="T:EO.Web.Emoticon"></see> objects.</param>
      <remarks>
            This function registers a new emoticon set within the current
            application. Once an emoticon set is register, set the editor's
            <see cref="P:EO.Web.Editor.EmoticonSet"></see> property to the name of the
            set to use the set.
            </remarks>
    </member>
    <member name="M:EO.Web.Editor.RegisterEmoticonSet(System.String,System.String,System.String[])">
      <summary>
            Registers a custom emoticon set.
            </summary>
      <param name="name">Name of the set. Set it to <b>null</b>
            (Visual Basic <b>Nothing</b>) to replace the default emoticon set.</param>
      <param name="folder">
            The directory name where all emoticons are located. 
            Use "~" to represent the application root. For example,
            "~\emoticons\".
            </param>
      <param name="icons">
            A list of icon file names without directory name. For example,
            "Smile.gif". 
            </param>
      <remarks>
        <p>
            This function registers a new emoticon set within the current
            application. Once an emoticon set is registered, set the editor's
            <see cref="P:EO.Web.Editor.EmoticonSet"></see> property to the name of the
            set to use the set.
            </p>
        <p>
            This function uses the file name without extension as the icon's
            tooltip text. For example, uses "Smile" for "Smile.gif".
            </p>
      </remarks>
    </member>
    <member name="T:EO.Web.EditorToolBarSet">
      <summary>
            Specifies the toolbar set used by the editor.
            </summary>
    </member>
    <member name="F:EO.Web.EditorToolBarSet.Basic">
      <summary>
            Only includes basic tool bar items.
            </summary>
    </member>
    <member name="F:EO.Web.EditorToolBarSet.Standard">
      <summary>
            Includes standard tool bar items.
            </summary>
    </member>
    <member name="F:EO.Web.EditorToolBarSet.Full">
      <summary>
            Includes all tool bar items.
            </summary>
    </member>
    <member name="F:EO.Web.EditorToolBarSet.Custom">
      <summary>
            Use custom tool bars specified either by
            <see cref="P:EO.Web.Editor.CustomHeaderTemplate"></see> or
            <see cref="P:EO.Web.Editor.ToolBarItems"></see>.
            </summary>
    </member>
    <member name="T:EO.Web.EditorTabButtonStyles">
      <summary>
            Specifies styles for the Design/HTML/Preview tab buttons for an editor.
            </summary>
    </member>
    <member name="P:EO.Web.EditorTabButtonStyles.NormalStyle">
      <summary>
            Gets or sets the style to be applied to the Design/HTML/Preview tab button 
            when a tab is unselected.
            </summary>
    </member>
    <member name="P:EO.Web.EditorTabButtonStyles.HoverStyle">
      <summary>
            Gets or sets the style to be applied to the Design/HTML/Preview tab button 
            when mouse hovers over the tab.
            </summary>
    </member>
    <member name="P:EO.Web.EditorTabButtonStyles.SelectedStyle">
      <summary>
            Gets or sets the style to be applied to the Design/HTML/Preview tab button 
            when a tab is selected.
            </summary>
    </member>
    <member name="T:EO.Web.EditorPasteFilter">
      <summary>
            Specifies the type of the filter to be applied when user
            pastes text into the editor.
            </summary>
      <remarks>
        <p>
            The filter modifies the text before it is being pasted. For
            example, <see cref="F:EO.Web.EditorPasteFilter.TextOnly"></see> filter
            strips all HTML formatting, thus transforms a HTML segment 
            into its plain text equivalent.
            </p>
        <p>
            Custom filtering can be implemented by handling 
            <see cref="P:EO.Web.Editor.ClientSideOnPaste"></see> client side event.
            </p>
      </remarks>
    </member>
    <member name="F:EO.Web.EditorPasteFilter.None">
      <summary>
            The text is pasted as is.
            </summary>
    </member>
    <member name="F:EO.Web.EditorPasteFilter.MsWordAuto">
      <summary>
            The editor automatically checks whether the content
            is from Word, and if so, automatically cleans up
            unnecessary Word formatting code. 
            </summary>
    </member>
    <member name="F:EO.Web.EditorPasteFilter.MsWordWithConfirm">
      <summary>
            The editor automatically checks whether the content
            is from Word, and if so, asks user to confirm whether
            to cleans up unnecessary Word formatting code. 
            </summary>
    </member>
    <member name="F:EO.Web.EditorPasteFilter.TextOnly">
      <summary>
            The editor automatically removes all HTML formatting.
            </summary>
    </member>
    <member name="F:EO.Web.EditorPasteFilter.TextWithLineBreak">
      <summary>
            The editor automatically removes all HTML formatting,
            but keeps the line breaks.
            </summary>
    </member>
    <member name="T:EO.Web.LineBreakMode">
      <summary>
            Specifies line break mode for the <see cref="T:EO.Web.Editor"></see> control.
            </summary>
    </member>
    <member name="F:EO.Web.LineBreakMode.P">
      <summary>
            Insert a new paragraph when enter key is pressed.
            </summary>
    </member>
    <member name="F:EO.Web.LineBreakMode.Br">
      <summary>
            Insert a new BR element when enter key is pressed.
            </summary>
    </member>
    <member name="F:EO.Web.LineBreakMode.Div">
      <summary>
            Insert a new DIV element when enter key is pressed.
            </summary>
    </member>
    <member name="T:EO.Web.EditorMode">
      <summary>
            Specifies the HTML Editor mode.
            </summary>
    </member>
    <member name="F:EO.Web.EditorMode.Design">
      <summary>
            Design mode.
            </summary>
    </member>
    <member name="F:EO.Web.EditorMode.Html">
      <summary>
            HTML mode.
            </summary>
    </member>
    <member name="F:EO.Web.EditorMode.Preview">
      <summary>
            Preview mode.
            </summary>
    </member>
    <member name="T:EO.Web.EditorDialogContentCollection">
      <summary>
            EditorDialogContentCollection is a collection of <see cref="T:EO.Web.EditorDialogContent"></see> objects.
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogContentCollection.Item(System.Int32)">
      <summary>
            Gets or sets an EditorDialogContent object in the collection at specific index. 
            </summary>
      <remarks>
            Index is the zero-based index of the EditorDialogContent to get. 
            In C#, this property is the indexer of <see cref="T:EO.Web.EditorDialogContentCollection"></see> class. 
            </remarks>
    </member>
    <member name="M:EO.Web.EditorDialogContentCollection.Find(System.String)">
      <summary>
            Find the <see cref="T:EO.Web.EditorDialogContent"></see> object with a matching
            <see cref="P:EO.Web.EditorDialogContent.CommandName"></see>.
            </summary>
      <param name="commandName">The command name associated to the dialog.</param>
      <returns>
            Returns the matching <see cref="T:EO.Web.EditorDialogContent"></see> if one is
            found, otherwise <b>null</b> (Visual Basic <b>Nothing</b>).
            </returns>
    </member>
    <member name="P:EO.Web.EditorDialogContentCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:EO.Web.EditorDialogContent"></see> object with a matching
            <see cref="P:EO.Web.EditorDialogContent.CommandName"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogContentCollection.Editor">
      <summary>
            Gets the Editor control this collection belongs to.
            </summary>
    </member>
    <member name="M:EO.Web.EditorDialogContentCollection.GetEnumerator">
      <summary>
            This class implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="P:EO.Web.EditorDialogContentCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read only. Always return <b>false</b>.		
            </summary>
    </member>
    <member name="M:EO.Web.EditorDialogContentCollection.Add(EO.Web.EditorDialogContent)">
      <summary>
            Adds an EditorDialogContent object to the end of the collection.
            </summary>
      <param name="content">The EditorDialogContent object to be added to the end of the collection.</param>
      <returns>The index at which the new an EditorDialogContent object was added.</returns>.
        </member>
    <member name="M:EO.Web.EditorDialogContentCollection.IndexOf(EO.Web.EditorDialogContent)">
      <summary>
            Determines the index of a specific EditorDialogContent object in the collection.
            </summary>
      <param name="content">The EditorDialogContent object to locate in the collection.</param>
      <returns>The index of value if found in the colllection; otherwise, -1.</returns>
    </member>
    <member name="M:EO.Web.EditorDialogContentCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the EditorDialogContent object at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the EditorDialogContent object to be removed. 
            </param>
    </member>
    <member name="M:EO.Web.EditorDialogContentCollection.Insert(System.Int32,EO.Web.EditorDialogContent)">
      <summary>
            Inserts an EditorDialogContent object into the collection at the specified position.
            </summary>
      <param name="index">The zero-based index at which the EditorDialogContent object should be inserted.</param>
      <param name="content">The EditorDialogContent object to be inserted into the collection.</param>
    </member>
    <member name="M:EO.Web.EditorDialogContentCollection.Remove(EO.Web.EditorDialogContent)">
      <summary>
            Removes the first occurrence of the EditorDialogContent object.
            </summary>
      <param name="content">The EditorDialogContent object to be removed from the collection.</param>
    </member>
    <member name="M:EO.Web.EditorDialogContentCollection.Contains(EO.Web.EditorDialogContent)">
      <summary>
            Determines whether the collection contains the specified EditorDialogContent object.
            </summary>
      <param name="content">The EditorDialogContent object to locate in the collection.</param>
      <returns>
        <b>true</b> if the EditorDialogContent object is found in the collection; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:EO.Web.EditorDialogContentCollection.Clear">
      <summary>
            Removes all items from the collection. 
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogContentCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            Always return <b>false</b>.
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogContentCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            Always returns <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.EditorDialogContentCollection.Count">
      <summary>
            Gets the number of EditorDialogContent objects contained in the collection.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of EditorDialogContent objects in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of EditorDialogContent objects contained in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.EditorDialogContentCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the EditorDialogContent objects of the collection to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the collection. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.EditorDialogContentCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:EO.Web.EditorDialogContentCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the collection.
            </summary>
      <param name="c">The collection to be added. </param>
    </member>
    <member name="T:EO.Web.EditorDialogContent">
      <summary>
            Represents the contents of a dialog used by the <see cref="T:EO.Web.Editor"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogContent.TemplateID">
      <summary>
            Gets or sets the ID of the template to be used by this dialog.
            </summary>
      <remarks>
            See <a href="Web/Editor/customize_dialog.html">customizing dialogs</a> for details.
            </remarks>
    </member>
    <member name="P:EO.Web.EditorDialogContent.Title">
      <summary>
            Gets or sets the title of the dialog.
            </summary>
      <remarks>
            This property specifies the title when the dialog is not in
            edit mode. See <see cref="P:EO.Web.EditorDialogContent.EditTitle"></see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.EditorDialogContent.EditTitle">
      <summary>
            Gets or sets the title of the dialog when the dialog is in edit mode.
            </summary>
      <remarks>
        <p>
            Most DHTML element related dialogs support insert mode and edit mode.
            If the current context element matches the dialog, the dialog enters 
            edit mode to edit the selected element instead of insert mode to 
            insert a new element. 
            </p>
        <p>
            For example, if user invokes <i>InsertOrEditTable</i> dialog when the
            cursor is inside an HTML table element, the dialog automatically
            enters edit mode to edit the table element. Dialogs may behave differently
            in different modes. For example, <b>Rows</b> and <b>Columns</b> field
            for the <i>InsertOrEditTable</i> dialog are disabled in edit mode.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.EditorDialogContent.CommandName">
      <summary>
            Gets or sets the command name that this dialog is associated to.
            </summary>
      <remarks>
        <p>
            When a tool bar item is clicked, the editor searches for a
            dialog whose <see cref="P:EO.Web.EditorDialogContent.CommandName"></see> value matches
            the tool bar item's <see cref="P:EO.Web.ToolBarItem.CommandName"></see>. If one
            is found, the dialog is displayed.
            </p>
        <p>
            See <a href="Web/Editor/customize_dialog.html">customizing dialogs</a>
            for more details.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.EditorDialogContent.ContentTemplate">
      <summary>
            The dialog content.
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogContent.FooterTemplate">
      <summary>
            The dialog footer.
            </summary>
    </member>
    <member name="T:EO.Web.EditorDialogTemplateCollection">
      <summary>
            EditorDialogTemplateCollection is a collection of <see cref="T:EO.Web.EditorDialogTemplate"></see> objects.
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogTemplateCollection.Item(System.Int32)">
      <summary>
            Gets or sets an EditorDialogTemplate object in the collection at specific index. 
            </summary>
      <remarks>
            Index is the zero-based index of the EditorDialogTemplate object to get. 
            In C#, this property is the indexer of <see cref="T:EO.Web.EditorDialogTemplateCollection"></see> class. 
            </remarks>
    </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.Find(System.String)">
      <summary>
            Find the <see cref="T:EO.Web.EditorDialogTemplate"></see> object with a matching
            <see cref="P:EO.Web.EditorDialogTemplate.Name"></see>.
            </summary>
      <param name="name">The name of the template.</param>
      <returns>
            Returns the matching <see cref="T:EO.Web.EditorDialogTemplate"></see> if one is
            found, otherwise <b>null</b> (Visual Basic <b>Nothing</b>).
            </returns>
    </member>
    <member name="P:EO.Web.EditorDialogTemplateCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:EO.Web.EditorDialogTemplate"></see> object with a matching
            <see cref="P:EO.Web.EditorDialogTemplate.Name"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogTemplateCollection.Editor">
      <summary>
            Gets the Editor control this collection belongs to.
            </summary>
    </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.GetEnumerator">
      <summary>
            This class implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="P:EO.Web.EditorDialogTemplateCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read only. Always return <b>false</b>.		
            </summary>
    </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.Add(EO.Web.EditorDialogTemplate)">
      <summary>
            Adds an EditorDialogTemplate object to the end of the collection.
            </summary>
      <param name="template">The EditorDialogTemplate object to be added to the end of the collection.</param>
      <returns>The index at which the new EditorDialogTemplate object was added.</returns>.
        </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.IndexOf(EO.Web.EditorDialogTemplate)">
      <summary>
            Determines the index of a specific EditorDialogTemplate object in the collection.
            </summary>
      <param name="template">The EditorDialogTemplate object to locate in the collection.</param>
      <returns>The index of value if found in the colllection; otherwise, -1.</returns>
    </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the EditorDialogTemplate object at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the EditorDialogTemplate object to be removed. 
            </param>
    </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.Insert(System.Int32,EO.Web.EditorDialogTemplate)">
      <summary>
            Inserts an EditorDialogTemplate object into the collection at the specified position.
            </summary>
      <param name="index">The zero-based index at which the EditorDialogTemplate object should be inserted.</param>
      <param name="template">The EditorDialogTemplate object to be inserted into the collection.</param>
    </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.Remove(EO.Web.EditorDialogTemplate)">
      <summary>
            Removes the first occurrence of the EditorDialogTemplate object.
            </summary>
      <param name="template">The EditorDialogTemplate object to be removed from the collection.</param>
    </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.Contains(EO.Web.EditorDialogTemplate)">
      <summary>
            Determines whether the collection contains the specified EditorDialogTemplate object.
            </summary>
      <param name="template">The EditorDialogTemplate object to locate in the collection.</param>
      <returns>
        <b>true</b> if the EditorDialogTemplate object is found in the collection; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.Clear">
      <summary>
            Removes all items from the collection. 
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogTemplateCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            Always return <b>false</b>.
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogTemplateCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            Always returns <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.EditorDialogTemplateCollection.Count">
      <summary>
            Gets the number of EditorDialogTemplate objects contained in the collection.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of EditorDialogTemplate objects in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of EditorDialogTemplate objects contained in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the EditorDialogTemplate objects of the collection to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the collection. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.EditorDialogTemplateCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:EO.Web.EditorDialogTemplateCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the collection.
            </summary>
      <param name="c">The collection to be added. </param>
    </member>
    <member name="T:EO.Web.EditorDialogTemplate">
      <summary>
            Represents an editor dialog template. 
            </summary>
    </member>
    <member name="M:EO.Web.EditorDialogTemplate.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.EditorDialogTemplate"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogTemplate.Name">
      <summary>
            Gets or sets the name of the template.
            </summary>
    </member>
    <member name="P:EO.Web.EditorDialogTemplate.DialogTemplate">
      <summary>
            Gets or sets the dialog template.
            </summary>
      <remarks>
            The first <see cref="T:EO.Web.Dialog"></see> control declared within
            this property will be used as the template dialog for all
            <see cref="T:EO.Web.EditorDialogContent"></see> objects whose 
            <see cref="P:EO.Web.EditorDialogContent.TemplateID"></see> match
            this <see cref="T:EO.Web.EditorDialogTemplate"></see>'s <see cref="P:EO.Web.EditorDialogTemplate.Name"></see>
            property.
            </remarks>
    </member>
    <member name="T:EO.Web.EditorStyle">
      <summary>
            Represents a text style that can be applied to editor contents.
            </summary>
    </member>
    <member name="M:EO.Web.EditorStyle.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.EditorStyle"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.EditorStyle.Name">
      <summary>
            Gets or sets the name of the style.
            </summary>
    </member>
    <member name="P:EO.Web.EditorStyle.TagName">
      <summary>
            Gets or sets the tag name of the style.
            </summary>
      <remarks>
            When this property is specified, the current selection is enclosed
            within the specified tag name when this style is applied. For example,
            one can set this property to <b>H1</b> to convert the selection into
            an <b>H1</b> element when applied.
            </remarks>
    </member>
    <member name="P:EO.Web.EditorStyle.CssClass">
      <summary>
            Gets or sets the CSS class of the style.
            </summary>
      <remarks>
        <p>
            When this property is specified, the current selection is first 
            enclosed within an element, then <see cref="P:EO.Web.EditorStyle.CssClass"></see> is applied to that
            element.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.EditorStyle.FullParagrah">
      <summary>
            Specifies whether the selection should be expanded to include
            the whole paragraph before applying the style. 
            </summary>
      <remarks>
            Certain styles, for example, a style with <see cref="P:EO.Web.EditorStyle.TagName"></see>
            set to <b>H1</b> should always be applied on the paragraph level. 
            Set this property to <b>True</b> for such styles.
            </remarks>
    </member>
    <member name="T:EO.Web.EditorStyleCollection">
      <summary>
            EditorStyleCollection is a collection of <see cref="T:EO.Web.EditorStyle"></see> object.
            </summary>
    </member>
    <member name="P:EO.Web.EditorStyleCollection.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:EO.Web.EditorStyle"></see> object in the collection at specific index. 
            </summary>
      <remarks>
            Index is the zero-based index of the EditorStyle object to get. 
            In C#, this property is the indexer of <see cref="T:EO.Web.EditorStyleCollection"></see> class. 
            </remarks>
    </member>
    <member name="P:EO.Web.EditorStyleCollection.Editor">
      <summary>
            Gets the Editor control this collection belongs to.
            </summary>
    </member>
    <member name="M:EO.Web.EditorStyleCollection.GetEnumerator">
      <summary>
            This class implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="P:EO.Web.EditorStyleCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read only. Always return <b>false</b>.		
            </summary>
    </member>
    <member name="M:EO.Web.EditorStyleCollection.Add(EO.Web.EditorStyle)">
      <summary>
            Adds an EditorStyle object to the end of the collection.
            </summary>
      <param name="style">The EditorStyle object to be added to the end of the collection.</param>
      <returns>The index at which the new EditorStyle object was added.</returns>.
        </member>
    <member name="M:EO.Web.EditorStyleCollection.IndexOf(EO.Web.EditorStyle)">
      <summary>
            Determines the index of a specific EditorStyle object in the collection.
            </summary>
      <param name="style">The EditorStyle object to locate in the collection.</param>
      <returns>The index of value if found in the colllection; otherwise, -1.</returns>
    </member>
    <member name="M:EO.Web.EditorStyleCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the EditorStyle object at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the EditorStyle object to be removed. 
            </param>
    </member>
    <member name="M:EO.Web.EditorStyleCollection.Insert(System.Int32,EO.Web.EditorStyle)">
      <summary>
            Inserts an EditorStyle object into the collection at the specified position.
            </summary>
      <param name="index">The zero-based index at which the EditorStyle object should be inserted.</param>
      <param name="style">The EditorStyle object to be inserted into the collection.</param>
    </member>
    <member name="M:EO.Web.EditorStyleCollection.Remove(EO.Web.EditorStyle)">
      <summary>
            Removes the first occurrence of the EditorStyle object.
            </summary>
      <param name="style">The EditorStyle object to be removed from the collection.</param>
    </member>
    <member name="M:EO.Web.EditorStyleCollection.Contains(EO.Web.EditorStyle)">
      <summary>
            Determines whether the collection contains the specified EditorStyle object.
            </summary>
      <param name="style">The EditorStyle object to locate in the collection.</param>
      <returns>
        <b>true</b> if the EditorStyle object is found in the collection; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:EO.Web.EditorStyleCollection.Clear">
      <summary>
            Removes all items from the collection. 
            </summary>
    </member>
    <member name="P:EO.Web.EditorStyleCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            Always return <b>false</b>.
            </summary>
    </member>
    <member name="P:EO.Web.EditorStyleCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            Always returns <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.EditorStyleCollection.Count">
      <summary>
            Gets the number of EditorStyle objects contained in the collection.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of EditorStyle objects in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of EditorStyle objects contained in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.EditorStyleCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the EditorStyle objects of the collection to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the collection. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.EditorStyleCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:EO.Web.EditorStyleCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the collection.
            </summary>
      <param name="c">The collection to be added. </param>
    </member>
    <member name="T:EO.Web.Emoticon">
      <summary>
            Represents an emoticon.
            </summary>
    </member>
    <member name="M:EO.Web.Emoticon.#ctor(System.String,System.String,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.Emoticon"></see> class.
            </summary>
      <param name="path">
            The full path of the icon. Use "~" to represent application
            root. For example, "~/emoticon/Smile.gif".
            </param>
      <param name="id">
            The ID of the icon. Each icon must have an unique ID.
            </param>
      <param name="toolTip">
            The tooltip text of the icon.
            </param>
    </member>
    <member name="M:EO.Web.Emoticon.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.Emoticon"></see> class.
            </summary>
      <param name="path">
            The full path of the icon. Use "~" to represent application
            root. For example, "~/emoticon/Smile.gif".
            </param>
      <param name="toolTip">
            The tooltip text of the icon.
            </param>
      <remarks>
            This function uses the file name without extension as the ID.
            For example, "Smile" for "Smile.gif".
            </remarks>
    </member>
    <member name="M:EO.Web.Emoticon.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.Emoticon"></see> class.
            </summary>
      <param name="path">
            The full path of the icon. Use "~" to represent application
            root. For example, "~/emoticon/Smile.gif".
            </param>
      <remarks>
            This function uses the file name without extension as the ID
            and the tooltip text. For example, "Smile" for "Smile.gif".
            </remarks>
    </member>
    <member name="P:EO.Web.Emoticon.Path">
      <summary>
            Gets or sets the full path of the icon. 
            </summary>
      <remarks>
            Use "~" to represent application
            root. For example, "~/emoticon/Smile.gif".
            </remarks>
    </member>
    <member name="P:EO.Web.Emoticon.ID">
      <summary>
            Gets or sets the ID of the icon.
            </summary>
      <remarks>
            Each emoticon must have an unique ID.
            </remarks>
    </member>
    <member name="P:EO.Web.Emoticon.ToolTip">
      <summary>
            Gets or sets the tooltip text for the icon.
            </summary>
    </member>
    <member name="T:EO.Web.Flyout">
      <summary>
            Creates a fly-out popup.
            </summary>
    </member>
    <member name="M:EO.Web.Flyout.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.Flyout"></see> class.
            </summary>
    </member>
    <member name="T:EO.Web.ListBox">
      <summary>
            Represents a list of items.
            </summary>
    </member>
    <member name="M:EO.Web.ListBox.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.ListBox"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.BackColor">
      <summary>
            Gets or sets the background color.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.BorderColor">
      <summary>
            Gets or sets the border color.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.BorderStyle">
      <summary>
            Gets or sets the borders style.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.BorderWidth">
      <summary>
            Gets or sets the border width.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.ForeColor">
      <summary>
            Gets or sets the foreground color.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.CssClass">
      <summary>
            Gets or sets the CSS class name of the control.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.AllowMultiSelect">
      <summary>
            Gets or sets a boolean value indicating whether more than one item can be selected.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.MultiSelectModifier">
      <summary>
            Gets or sets the modifier key for selecting multiple items.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.ListBoxStyle">
      <summary>
            Gets or sets the style properties applied to the <see cref="T:EO.Web.ListBox"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.HeaderStyle">
      <summary>
            Gets or sets the style properties for the header section.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.ItemListStyle">
      <summary>
            Gets or sets the style properties for the item list.
            </summary>
      <remarks>
            This style applies to the DHTML element that holds all items.
            It is the scrolling region inside the body section of the <see cref="T:EO.Web.ListBox"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.ListBox.BodyStyle">
      <summary>
            Gets or sets the style properties for the body section.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.FooterStyle">
      <summary>
            Gets or sets the style properties for the footer section.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.HeaderTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Web.UI.ITemplate"></see> that defines how 
            the header section of the <see cref="T:EO.Web.ListBox"></see> control is 
            displayed.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.HeaderContainer">
      <summary>
            Gets the container control for the header.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.FooterContainer">
      <summary>
            Gets the container control for the footer.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.ItemTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Web.UI.ITemplate"></see> that defines 
            how items in the <see cref="T:EO.Web.ListBox"></see> control are
            displayed.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.FooterTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Web.UI.ITemplate"></see> that defines how 
            the footer section of the <see cref="T:EO.Web.ListBox"></see> control is 
            displayed.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.ItemStyle">
      <summary>
            Gets or sets the style properties for list box items.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.DisabledItemStyle">
      <summary>
            Gets or sets the style properties for disabled list box items.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.SelectedItemStyle">
      <summary>
            Gets or sets the style properties for selected list box items.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.AlternateItemStyle">
      <summary>
            Gets or sets the style properties for alternating list box items.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.ItemHoverStyle">
      <summary>
            Gets or sets the style properties for a list box item when mouse is over the item.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.AutoPostBack">
      <summary>
            Gets or sets a value indicating whether an automatic postback to the server occurs when an item is selected.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.ClientSideOnItemSelected">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called when an item is selected.
            </summary>
      <remarks>
        <p>
            Set this property to the name of your JavaScript function that handles
            the event. The handler should take the following form:
            </p>
        <code lang="JavaScript">
            function your_event_handler(listBox, item, e)
            {
               ....
            }
            </code>
        <p>
            These arguments are passed to your handler:
            </p>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>listBox</term>
            <description>The <a href="JSDoc.Public.Web.ListBox.html">listBox</a> that fires the event</description>
          </item>
          <item>
            <term>item</term>
            <description>The <a href="JSDoc.Public.Web.ListBoxItem.html">item</a> that receives the mouse over event</description>
          </item>
          <item>
            <term>e</term>
            <description>The DOM event object</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:EO.Web.ListBox.ClientSideOnItemOver">
      <summary>
            Gets or sets the name of the client side function to be called when mouse is over a list box item.
            </summary>
      <remarks>
        <p>
            Set this property to the name of your JavaScript function that handles
            the event. The handler should take the following form:
            </p>
        <code lang="JavaScript">
            function your_event_handler(listBox, item, e)
            {
               ....
            }
            </code>
        <p>
            These arguments are passed to your handler:
            </p>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>listBox</term>
            <description>The <a href="JSDoc.Public.Web.ListBox.html">listBox</a> that fires the event</description>
          </item>
          <item>
            <term>item</term>
            <description>The <a href="JSDoc.Public.Web.ListBoxItem.html">item</a> that receives the mouse over event</description>
          </item>
          <item>
            <term>e</term>
            <description>The DOM event object</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:EO.Web.ListBox.MoreItemsMessageStyle">
      <summary>
            Gets or sets the style properties used by the message that indicates more items are available.
            </summary>
      <remarks>
            EO.Web <see cref="T:EO.Web.ListBox"></see> can load more items on
            demand as user scrolls down. When this feature is enabled,
            the <see cref="T:EO.Web.ListBox"></see> displays a message at the
            bottom of the list box indicating more items are available.
            Use this property to set the CSS class of this message.
            </remarks>
    </member>
    <member name="P:EO.Web.ListBox.MoreItemsMessageFormat">
      <summary>
            Gets or sets the text used to format the message that indicates more items are available.
            </summary>
      <remarks>
        <para>
            EO.Web <see cref="T:EO.Web.ListBox"></see> can load more items on
            demand as user scrolls down. When this feature is enabled,
            the <see cref="T:EO.Web.ListBox"></see> displays a message at the
            bottom of the list box indicating more items are available.
            Use this property to set the "template" of this text.
            </para>
        <para>
            The default value is <code>{remaining} item(s) available</code>
            At runtime, <code>{remaining}</code> will be replaced with
            the number of items not loaded yet. The following "variables"
            are supported:
            </para>
        <list type="table">
          <listheader>
            <term>Variable</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>{total}</term>
            <description>The total number of items as specified by <see cref="P:EO.Web.ListBox.TotalItemCount"></see>.</description>
          </item>
          <item>
            <term>{loaded}</term>
            <description>The total number of loaded items.</description>
          </item>
          <item>
            <term>{remaining}</term>
            <description>The total number of items yet to be loaded.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:EO.Web.ListBox.NoMoreItemsMessageFormat">
      <summary>
            Gets or sets the text used to format the message that indicates no more items are available.
            </summary>
      <remarks>
            This is the message displayed in place of <see cref="P:EO.Web.ListBox.MoreItemsMessageFormat"></see>
            once all items are loaded.
            </remarks>
    </member>
    <member name="P:EO.Web.ListBox.LoadingItemsHtml">
      <summary>
            Gets or sets the text displayed when the list box is loading additional items.
            </summary>
      <remarks>
            When load on demand is enabled, the <see cref="T:EO.Web.ListBox"></see>
            displays this message while loading additional items.
            </remarks>
    </member>
    <member name="P:EO.Web.ListBox.Items">
      <summary>
            Gets the items collection.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.TotalItemCount">
      <summary>
            Gets or sets the total item count.
            </summary>
      <remarks>
        <para>
            Set this property to enable load on demand. For example,
            if this property is set to 100 but <see cref="P:EO.Web.ListBox.Items"></see>
            only contain 50 items, then the <see cref="T:EO.Web.ListBox"></see>
            will fire <see cref="E:EO.Web.ListBox.MoreItemsNeeded"></see> event when 
            user scrolls to the bottom of the list box. You can then handle
            the event to add more items into the ListBox's 
            <see cref="P:EO.Web.ListBox.Items"></see>
            collection.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Web.ListBox.DataTextField">
      <summary>
            Gets or sets the field of the data source that provides the list box item text.
            </summary>
      <remarks>
            This property is used to populate <see cref="P:EO.Web.ListBoxItem.Text">ListBoxItem.Text</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.ListBox.DataValueField">
      <summary>
            Gets or sets the field of the data source that provides list box item value.
            </summary>
      <remarks>
            This property is used to populate <see cref="P:EO.Web.ListBoxItem.Value">ListBoxItem.Value</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.ListBox.DataIconField">
      <summary>
            Gets or sets the field of the data source that provides list box item icon.
            </summary>
      <remarks>
            This property is used to populate <see cref="P:EO.Web.ListBoxItem.Icon">ListBoxItem.Icon</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.ListBox.SelectedIndex">
      <summary>
            Gets or sets the index specifying the currently selected item.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.SelectedItem">
      <summary>
            Gets the first selected item.
            </summary>
    </member>
    <member name="P:EO.Web.ListBox.SelectedItems">
      <summary>
            Gets a collection containing all the selected items in the list box.
            </summary>
    </member>
    <member name="E:EO.Web.ListBox.SelectedIndexChanged">
      <summary>
            Occurs when the <see cref="P:EO.Web.ListBox.SelectedIndex"></see> property has changed.
            </summary>
    </member>
    <member name="E:EO.Web.ListBox.SelectionChanged">
      <summary>
            Occurs when the <see cref="P:EO.Web.ListBox.SelectedItems"></see> collection has changed.
            </summary>
    </member>
    <member name="E:EO.Web.ListBox.Update">
      <summary>
            Occurs when the <see cref="T:EO.Web.ListBox"></see> requests an update.
            </summary>
      <remarks>
        <see cref="E:EO.Web.ListBox.Update">
        </see> event is triggered when client side
            <a href="JSDoc.Public.Web.ListBox.update.html">update</a> method 
            is called. Inside the <see cref="E:EO.Web.ListBox.Update"></see> event handler,
            you can clear, add or remove list box items.
            </remarks>
    </member>
    <member name="E:EO.Web.ListBox.MoreItemsNeeded">
      <summary>
            Occurs when the <see cref="T:EO.Web.ListBox"></see> needs more items.
            </summary>
      <remarks>
        <see cref="E:EO.Web.ListBox.MoreItemsNeeded">
        </see> event is triggered when 
            <a href="Web/ListBox/load_on_demand.html">load on demand</a> is
            enabled and the client side needs to display more items.
            Inside this event handler you can only add items.
            </remarks>
    </member>
    <member name="E:EO.Web.ListBox.ItemCreated">
      <summary>
            Occurs when an item is created in a <see cref="T:EO.Web.ListBox"></see> control.
            </summary>
    </member>
    <member name="E:EO.Web.ListBox.ItemDataBound">
      <summary>
            Occurs after an item in the <see cref="T:EO.Web.ListBox"></see> control is data-bound but before it is rendered on the page.
            </summary>
    </member>
    <member name="T:EO.Web.ListItemEventArgs">
      <summary>
            Provides data for events related to <see cref="T:EO.Web.ListBoxItem"></see> object.
            </summary>
    </member>
    <member name="M:EO.Web.ListItemEventArgs.#ctor(EO.Web.ListBoxItem)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.ListItemEventArgs"></see> class.
            </summary>
      <param name="item">The <see cref="T:EO.Web.ListBoxItem"></see> object.</param>
    </member>
    <member name="P:EO.Web.ListItemEventArgs.Item">
      <summary>
            Gets the <see cref="T:EO.Web.ListBoxItem"></see> object associated to this event.
            </summary>
    </member>
    <member name="T:EO.Web.ListItemEventHandler">
      <summary>
            Represents the method that handles event that references to a <see cref="T:EO.Web.ListBoxItem"></see>.
            </summary>
    </member>
    <member name="T:EO.Web.ListBoxItem">
      <summary>
            Represents an item in the <see cref="T:EO.Web.ListBox"></see> control.
            </summary>
    </member>
    <member name="M:EO.Web.ListBoxItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.ListBoxItem"></see> class.
            </summary>
    </member>
    <member name="M:EO.Web.ListBoxItem.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.ListBoxItem"></see> class.
            </summary>
      <param name="text">List item text.</param>
    </member>
    <member name="P:EO.Web.ListBoxItem.Container">
      <summary>
            Gets the list item container control.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItem.ItemType">
      <summary>
            Gets the item type.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItem.ItemIndex">
      <summary>
            Gets the item index.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItem.Selected">
      <summary>
            Gets or sets a value indicating whether the item is selected.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItem.Enabled">
      <summary>
            Gets or sets a value indicating whether the item is enabled.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItem.Visible">
      <summary>
            Gets or sets a value indicating whether the item is visible.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItem.Text">
      <summary>
            Gets or sets the item text.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItem.Value">
      <summary>
            Gets or sets the item value.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItem.Icon">
      <summary>
            Gets or sets the item icon.
            </summary>
    </member>
    <member name="T:EO.Web.ListBoxItemContainer">
      <summary>
            The container control for each <see cref="T:EO.Web.ListBoxItem"></see> object.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItemContainer.Item">
      <summary>
            Gets the <see cref="T:EO.Web.ListBoxItem"></see> object.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItemContainer.ItemIndex">
      <summary>
            Gets the item index.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItemContainer.DataItem">
      <summary>
            Gets the data item associated to this item.
            </summary>
    </member>
    <member name="T:EO.Web.ListBoxItemCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Web.ListBoxItem"></see> objects.
            </summary>
    </member>
    <member name="M:EO.Web.ListBoxItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies all the items to the specified one-dimensional array.
            </summary>
      <param name="array">The destionation array.</param>
      <param name="index">The index in array at which copying begins.</param>
    </member>
    <member name="P:EO.Web.ListBoxItemCollection.Count">
      <summary>
            Gets the total count of items.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItemCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItemCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:EO.Web.ListBoxItemCollection.GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"></see> for the collection.
            </summary>
    </member>
    <member name="P:EO.Web.ListBoxItemCollection.Item(System.Int32)">
      <summary>
            Gets an item at the specific index.
            </summary>
      <param name="index">The item index.</param>
    </member>
    <member name="M:EO.Web.ListBoxItemCollection.Add(EO.Web.ListBoxItem)">
      <summary>
            Adds a new item into the list.
            </summary>
      <param name="item">The new items to be added into the list.</param>
    </member>
    <member name="M:EO.Web.ListBoxItemCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an item at the specific index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:EO.Web.ListBoxItemCollection.Clear">
      <summary>
            Clears the collection.
            </summary>
    </member>
    <member name="T:EO.Web.RangeSlider">
      <summary>
            Represents a control that lets the user select a value range from a range of values 
            by moving two thumbs along a track.
            </summary>
    </member>
    <member name="M:EO.Web.RangeSlider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.RangeSlider"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.RangeSlider.LowValue">
      <summary>
            Gets or sets the low end of the range.
            </summary>
    </member>
    <member name="P:EO.Web.RangeSlider.HighValue">
      <summary>
            Gets or sets the high end of the range.
            </summary>
    </member>
    <member name="P:EO.Web.RangeSlider.EnableRangeDrag">
      <summary>
            Gets or sets a value indicating whether to allow the selected range 
            section to be dragged.
            </summary>
      <remarks>
            By default, when user clicks on the selected range section of the 
            <see cref="T:EO.Web.RangeSlider"></see>, both the <see cref="P:EO.Web.RangeSlider.LowValue"></see> thumb
            and <see cref="P:EO.Web.RangeSlider.HighValue"></see> thumb move towards the middle. Setting
            <see cref="P:EO.Web.RangeSlider.EnableRangeDrag"></see> to true disables this behavior
            and allow the whole segment to be dragged.
            </remarks>
    </member>
    <member name="T:EO.Web.Rating">
      <summary>
            Creates a rating control.
            </summary>
    </member>
    <member name="M:EO.Web.Rating.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.Rating"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.Rating.MaxStarCount">
      <summary>
            Gets or sets the maximum number of stars.
            </summary>
      <remarks>
            The default value is 5.
            </remarks>
    </member>
    <member name="P:EO.Web.Rating.FullStarImageUrl">
      <summary>
            Gets the Url of the image that is used to represent a full star.
            </summary>
    </member>
    <member name="P:EO.Web.Rating.FullStarHoverImageUrl">
      <summary>
            Gets the Url of the image that is used to represent a full star when mouse
            is over the star.
            </summary>
    </member>
    <member name="P:EO.Web.Rating.EmptyStarImageUrl">
      <summary>
            Gets the Url of the image that is used to represent an empty star.
            </summary>
    </member>
    <member name="P:EO.Web.Rating.EmptyStarHoverImageUrl">
      <summary>
            Gets the Url of the image that is used to represent an empty star when mouse is over the star.
            </summary>
    </member>
    <member name="P:EO.Web.Rating.StarWidth">
      <summary>
            Gets or sets the width of a star in pixel.
            </summary>
      <remarks>
            The default value is 18.
            </remarks>
    </member>
    <member name="P:EO.Web.Rating.StarHeight">
      <summary>
            Gets or sets the height of a star in pixel.
            </summary>
      <remarks>
            The default value is 18.
            </remarks>
    </member>
    <member name="P:EO.Web.Rating.StarSpacing">
      <summary>
            Gets or sets the spacing between stars in pixel.
            </summary>
      <remarks>
            The default value is 3.
            </remarks>
    </member>
    <member name="P:EO.Web.Rating.Precision">
      <summary>
            Gets or sets the precision of the rating control.
            </summary>
    </member>
    <member name="P:EO.Web.Rating.Orientation">
      <summary>
            Gets or sets the orientation of the rating control.
            </summary>
    </member>
    <member name="P:EO.Web.Rating.Value">
      <summary>
            Gets or sets the value of the rating control.
            </summary>
    </member>
    <member name="P:EO.Web.Rating.Reverse">
      <summary>
            Gets or sets a value indicating whether the rating should be in reverse mode.
            </summary>
      <remarks>
            By default, the rating stars are from left to right when <see cref="P:EO.Web.Rating.Orientation"></see>
            is <see cref="F:EO.Web.Orientation.Horizontal"></see> and top to bottom when <see cref="P:EO.Web.Rating.Orientation"></see>
            is <see cref="F:EO.Web.Orientation.Vertical"></see>. When this property is true, 
            the rating stars are from right to left when <see cref="P:EO.Web.Rating.Orientation"></see>
            is <see cref="F:EO.Web.Orientation.Horizontal"></see> and bottom to top when <see cref="P:EO.Web.Rating.Orientation"></see>
            is <see cref="F:EO.Web.Orientation.Vertical"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.Rating.AutoPostBack">
      <summary>
            Gets or sets a value indicating whether the page should automatically post back when user changes the rating.
            </summary>
    </member>
    <member name="P:EO.Web.Rating.ClientSideOnValueChange">
      <summary>
            Gets or sets the name of the JavaScript function to be called when
            the <see cref="T:EO.Web.Rating"></see>'s value changes on the client side.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for details about parameters and return value of this function.
            </remarks>
    </member>
    <member name="P:EO.Web.Rating.ClientSideOnHoverValueChange">
      <summary>
            Gets or sets the name of the JavaScript function to be called when
            the <see cref="T:EO.Web.Rating"></see>'s hover value changes on the client side.
            </summary>
      <remarks>
        <para>
            The "hover value" is the value corresponding to the current mouse position.
            Once user clicks the mouse, the "hover value" is accepted as the new value.
            </para>
        <para>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for details about parameters and return value of this function.
            </para>
      </remarks>
    </member>
    <member name="E:EO.Web.Rating.Changed">
      <summary>
            Occurs when <see cref="P:EO.Web.Rating.Value"></see> property changed.
            </summary>
    </member>
    <member name="T:EO.Web.RatingPrecision">
      <summary>
            Specifies rating precisions.
            </summary>
    </member>
    <member name="F:EO.Web.RatingPrecision.Whole">
      <summary>
            Rating must be whole stars. For example, with the maximum number of stars of 5,
            rating value must be 0, 1, 2, 3, 4 or 5.
            </summary>
    </member>
    <member name="F:EO.Web.RatingPrecision.Half">
      <summary>
            Rating must be whole or half stars. For example, with maximum number of stars of 5,
            not only value 0, 1, 2, 3, 4 and 5 are allowed, value such as 2.5 and 3.5 are also
            allowed.
            </summary>
    </member>
    <member name="F:EO.Web.RatingPrecision.Exact">
      <summary>
            Any values within the range are allowed. The <see cref="T:EO.Web.Rating"></see>
            control keeps one decimal digits. For example, 1.1, 3.2, etc.
            </summary>
    </member>
    <member name="T:EO.Web.ScriptEvent">
      <summary>
            Provides a conveinent way to trigger server side event from JavaScript.
            </summary>
      <remarks>
        <p>
            This control provides a conveinent to trigger server side event
            from JavaScript. To use the control, simply place a 
            <see cref="T:EO.Web.ScriptEvent"></see> in the form and then call client
            side JavaScript function <a href="JSDoc.Public.Web.Global.eo_TriggerServerEvent.html">eo_TriggerServerEvent</a> to trigger the
            <see cref="T:EO.Web.ScriptEvent"></see>'s <see cref="E:EO.Web.ScriptEvent.Command"></see> event:
            </p>
        <code lang="JavaScript">
            eo_TriggerServerEvent(
                "ScriptEvent1",     //ClientID of the ScriptEvent control
                "Anything",         //Command name
                "Whatever"          //Command argument
                );
            </code>
        <p>
            The above code triggers server side <see cref="E:EO.Web.ScriptEvent.Command"></see>
            event with the argument suplied. You can then handle the event
            accordingly.
            </p>
        <p>
          <b>ScriptEvent</b> control can also be used to transfer additional
            data from client side to the server side. In order to use this
            feature, call
            <a href="JSDoc.Public.Web.ScriptEvent.addData.html">addData</a>
            or 
            <a href="JSDoc.Public.Web.ScriptEvent.clearData.html">clearData</a>
            on the client side. All data will be transferred to the server
            side through the <b>ScriptEvent</b> control's
            <see cref="P:EO.Web.ScriptEvent.ClientData"></see> property.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.ScriptEvent.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.ScriptEvent"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.ScriptEvent.ClientData">
      <summary>
            Gets the additional data passed to the server from the client side.
            </summary>
      <remarks>
        <p>
            You can call
            <a href="JSDoc.Public.Web.ScriptEvent.addData.html">addData</a> on the client
            to add a data item. The following code adds two data items:
            </p>
        <code lang="JavaScript">
            var scriptEvent = eo_GetObject("ScriptEvent1");
            
            //Add a number "2"
            scriptEvent.addData(2);
            
            //Add a string "some text"
            scriptEvent.AddData("some text");
            </code>
        <p>
            When the page is posted back, <see cref="P:EO.Web.ScriptEvent.ClientData"></see> will
            contain two items, number "2" and string "some text".
            </p>
      </remarks>
    </member>
    <member name="E:EO.Web.ScriptEvent.Command">
      <summary>
            Occurs when the event is being triggered by client side JavaScript.
            </summary>
    </member>
    <member name="T:EO.Web.FileExplorer">
      <summary>
            Renders UI that is similar to Windows File Explorer for
            user to browse or upload a file on the server. 
            </summary>
    </member>
    <member name="M:EO.Web.FileExplorer.#ctor">
      <summary>
            Initialize a new instance of the <see cref="T:EO.Web.FileExplorer"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorer.LayoutTemplate">
      <summary>
            Gets or sets the template that is used to define the FileExplorer layout.
            </summary>
      <remarks>
            This property defines the UI of the <see cref="T:EO.Web.FileExplorer"></see>
            control. See <a href="Web/FileExplorer/ui.html">configuring FileExplorer UI</a> for
            more details.
            </remarks>
    </member>
    <member name="P:EO.Web.FileExplorer.PathMappings">
      <summary>
            Gets a collection of <see cref="T:EO.Web.PathMapping"></see> object that contains
            mapping of external paths to URLs.
            </summary>
      <remarks>
            Set this property if you wish to use FileExplorer to access files outside
            of your web application root. See 
            <a href="Web/FileExplorer/external_files.html">accessing external files with FileExplorer</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.FileExplorer.ClientSideOnFileSelected">
      <summary>
            Gets or sets the name of the client side JavaScript 
            function to be called when a file is selected.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for prototype information about this event handler. The client side
            <a href="JSDoc.Public.Web.FileExplorer.html">FileExplorer</a> object is 
            passed as the first parameter when calling this handler. Inside the 
            handler you can call <a href="JSDoc.Public.Web.FileExplorer.getSelectedFile.html">getValue</a>
            to get the path of the current selected item.
            </remarks>
    </member>
    <member name="P:EO.Web.FileExplorer.AllowCreateFolder">
      <summary>
            Whether user is allowed to create folder.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorer.AllowRenameFolder">
      <summary>
            Whether user is allowed to rename folder.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorer.AllowDeleteFolder">
      <summary>
            Whether user is allowed to delete folder.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorer.AllowUpload">
      <summary>
            Whether user is allowed to upload files to the server.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorer.AllowRenameFile">
      <summary>
            Whether user is allowed to rename file.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorer.AllowDeleteFile">
      <summary>
            Whether user is allowed to delete file.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorer.TargetControl">
      <summary>
            Gets or sets the ID of the control to accept the selected path.
            </summary>
      <remarks>
            This control must be a <see cref="T:System.Web.UI.WebControls.TextBox"></see> or a <see cref="T:System.Web.UI.WebControls.Label"></see> control.
            </remarks>
    </member>
    <member name="P:EO.Web.FileExplorer.RootFolder">
      <summary>
            Gets or sets the root folder of the FileExplorer control.
            </summary>
      <remarks>
        <p>
            This property can be a root relative path (for example, ~/images) 
            or an absolute file path (for example, c:\images). A root relative
            path should be used when the FileExplorer control is used to browse 
            files within the application root. 
            </p>
        <p>
            An absolute file path can be used if you wish to use the FileExplorer
            control to browse files that are outside of the application root. 
            See <a href="Web/FileExplorer/external_files.html">accessing external files with FileExplorer</a>
            for more details.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.FileExplorer.BrowseOnlyRootFolders">
      <summary>
            Gets or sets a list of browse-only root folders separated by '|'.
            </summary>
      <remarks>
            Use this property to specify a list of browse-only root folder,
            for example, "~/images|~/videos". Each folder must be a
            root-relative path starting with '~'.
            </remarks>
    </member>
    <member name="P:EO.Web.FileExplorer.AllowedExtension">
      <summary>
            Gets or sets a list of extensions that the <see cref="T:EO.Web.FileExplorer"></see>
            control displays/accepts.
            </summary>
      <remarks>
            FileExplorer can be limited to display or accept only certain
            files. For example, If you use FileExplorer to browse image
            files, you may not wish it to display or accept any other type
            of files. Use this property to specify a list of extensions
            separated by "|", for example, ".gif|.jpg".
            </remarks>
    </member>
    <member name="P:EO.Web.FileExplorer.FileNameFilter">
      <summary>
            Gets or sets a regular expression to filter file names.
            </summary>
      <remarks>
        <p>
            FileExplorer control can be restricted to only display
            files that matches the given regular expression. Note
            knowledge of regular expression is required to use this
            property.
            </p>
        <p>
            Unlike <see cref="P:EO.Web.FileExplorer.AllowedExtension"></see> property that is applied
            to both displaying and uploading files, this property only
            applies to displaying files.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.FileExplorer.FolderNameFilter">
      <summary>
            Gets or sets a regular expression to filter folder names.
            </summary>
      <p>
            FileExplorer control can be restricted to only display
            folders that matches the given regular expression. Note
            knowledge of regular expression is required to use this
            property.
            </p>
    </member>
    <member name="P:EO.Web.FileExplorer.MaxUploadFileSize">
      <summary>
            Specifies the limit for the size of uploaded file, in kilobytes. 
            This limit can be used to prevent denial of service attacks that 
            are caused, for example, by users uploading large files to the server. 
            </summary>
      <remarks>
            The default value is 0, which means no limit is set. However,
            It is recommend to set this value to prevent denial of service attaches
            caused by user uploading large files.
            </remarks>
    </member>
    <member name="P:EO.Web.FileExplorer.SelectedFolder">
      <summary>
            Gets the path of the selected folder.
            </summary>
      <remarks>
            This property can only be used when a folder tree is present.
            When folder tree is not present, the FileExplorer can not
            change current directory and the current directory is always
            the same as <see cref="P:EO.Web.FileExplorer.RootFolder"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.FileExplorer.SelectedFile">
      <summary>
            Gets the path of the selected file.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorer.NoPreviewHtml">
      <summary>
            Gets or sets the HTML text to be displayed when no preview is available.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorer.DemoMode">
      <summary>
            Whether the control is in demo mode.
            </summary>
      <remarks>
        <p>
            Set <see cref="P:EO.Web.FileExplorer.DemoMode"></see> to true to disable the
            following features: Create Folder, Rename Folder, Delete Folder
            Rename File and Delete File. These features are still
            accessible, but upon submit, a prompt message is displayed
            to inform the user that the action can not be proceed.
            </p>
        <p>
            Use <see cref="P:EO.Web.Control.ClientSideOnMessage"></see> to customize
            the prompt message.
            </p>
      </remarks>
    </member>
    <member name="E:EO.Web.FileExplorer.FileUploaded">
      <summary>
            Occurs when user has uploaded a new file to the server.
            </summary>
      <remarks>
            It is often desired to rename user uploaded files following
            a specific pattern. For example, some design requires a date
            string to be prefixed to the file name, other requires the
            currently logged-in user name as part of the file name. Use
            this event to implement such naming schemes by renaming each
            files immediately after they are uploaded.
            </remarks>
    </member>
    <member name="E:EO.Web.FileExplorer.FileRenamed">
      <summary>
            Occurs when user has renamed a file.
            </summary>
    </member>
    <member name="E:EO.Web.FileExplorer.FileDeleted">
      <summary>
            Occurs when user has deleted a file.
            </summary>
    </member>
    <member name="E:EO.Web.FileExplorer.FolderRenamed">
      <summary>
            Occurs when user has renamed a folder.
            </summary>
    </member>
    <member name="E:EO.Web.FileExplorer.FolderCreated">
      <summary>
            Occurs when user has created a folder.
            </summary>
    </member>
    <member name="E:EO.Web.FileExplorer.FolderDeleted">
      <summary>
            Occurs when user has deleted a folder.
            </summary>
    </member>
    <member name="M:EO.Web.FileExplorer.CreateUniqueFileName(System.String)">
      <summary>
            Create a file name that is not the same as any
            existing file in the same directory.
            </summary>
      <param name="fileName">
            The full file name. Note this parameter should includes
            the full file path, for example, "c:\inetpub\www\app1\page1.aspx".
            </param>
      <remarks>
            This function checks whether a file with the same name
            already exists in the directory. If one does, it tries
            to append a number to the file name, for example,
            "New File 2" for "New File", until one that does
            not exist is found.
            </remarks>
    </member>
    <member name="M:EO.Web.FileExplorer.DeleteUploadedFilesForDemoMode(System.Web.HttpApplication)">
      <summary>
            Delete all files uploaded in demo mode.
            </summary>
      <param name="app">The current HttpApplication object.</param>
      <remarks>
            This method should only be called in Session_End event handler.
            </remarks>
    </member>
    <member name="M:EO.Web.FileExplorer.MapPath(System.String)">
      <summary>
            Returns the physical path for the specified virtual path.
            </summary>
      <param name="url">The virtual path.</param>
      <returns>The physical path.</returns>
    </member>
    <member name="T:EO.Web.PathMapping">
      <summary>
            Provide information to map an external path to a URL.
            </summary>
      <remarks>
            See <a href="Web/FileExplorer/external_files.html">accessing external files with FileExplorer</a>
            for more details.
            </remarks>
    </member>
    <member name="M:EO.Web.PathMapping.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.PathMapping"></see> object.
            </summary>
    </member>
    <member name="P:EO.Web.PathMapping.DisplayName">
      <summary>
            The display name for this path.
            </summary>
    </member>
    <member name="P:EO.Web.PathMapping.Path">
      <summary>
            The physical path for this mapping.
            </summary>
    </member>
    <member name="P:EO.Web.PathMapping.Url">
      <summary>
            The URL for this mapping.
            </summary>
    </member>
    <member name="T:EO.Web.PathMappingCollection">
      <summary>
            A collection of <see cref="T:EO.Web.PathMapping"></see> object.
            </summary>
      <remarks>
            See <a href="Web/FileExplorer/external_files.html">accessing external files with FileExplorer</a>
            for more details.
            </remarks>
    </member>
    <member name="M:EO.Web.PathMappingCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.PathMappingCollection"></see> class.
            </summary>
    </member>
    <member name="M:EO.Web.PathMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copy elements to another array.
            </summary>
      <param name="array">The destionation array.</param>
      <param name="index">Index in <i>array</i> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.PathMappingCollection.Count">
      <summary>
            Gets the number of elements in the collection.
            </summary>
    </member>
    <member name="M:EO.Web.PathMappingCollection.Add(EO.Web.PathMapping)">
      <summary>
            Adds a new <see cref="T:EO.Web.PathMapping"></see> object into the collection.
            </summary>
      <param name="item">The new item to add.</param>
      <returns>The index at which the item has been added.</returns>
    </member>
    <member name="M:EO.Web.PathMappingCollection.Clear">
      <summary>
            Clears all items in the collection.
            </summary>
    </member>
    <member name="M:EO.Web.PathMappingCollection.Contains(EO.Web.PathMapping)">
      <summary>
            Determines whether an element is in the collection.
            </summary>
      <param name="item">The <see cref="T:EO.Web.PathMapping"></see> object to locate.</param>
      <returns>
        <b>true</b> if the item is found, otherwise <b>false</b>.</returns>
    </member>
    <member name="M:EO.Web.PathMappingCollection.Insert(System.Int32,EO.Web.PathMapping)">
      <summary>
            Inserts an element into the collection.
            </summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="item">The <see cref="T:EO.Web.PathMapping"></see> to be inserted.</param>
    </member>
    <member name="M:EO.Web.PathMappingCollection.Remove(EO.Web.PathMapping)">
      <summary>
            Removes a specific item from the collection.
            </summary>
      <param name="item">The item to be removed.</param>
    </member>
    <member name="M:EO.Web.PathMappingCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specific index.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="P:EO.Web.PathMappingCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:EO.Web.PathMapping"></see> object at the specified index.
            </summary>
      <param name="index">The zero based index of the element to get.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:EO.Web.FileExplorerHolder">
      <summary>
            Interacts with a <see cref="T:EO.Web.FileExplorer"></see> control
            in a separate web page to support delay loading of a
            <see cref="T:EO.Web.FileExplorer"></see> control.
            </summary>
    </member>
    <member name="M:EO.Web.FileExplorerHolder.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.FileExplorerHolder"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorerHolder.Url">
      <summary>
            Gets or sets the URL that contains <see cref="T:EO.Web.FileExplorer"></see> control.
            </summary>
      <remarks>
            This URL must be an application-root relative path starting with "~". For
            example, "~/Explorer.aspx".
            </remarks>
    </member>
    <member name="T:EO.Web.FileExplorerEventHandler">
      <summary>
            Represents the method that handles events raised by the <see cref="T:EO.Web.FileExplorer"></see> control.
            </summary>
    </member>
    <member name="T:EO.Web.FileExplorerEventArgs">
      <summary>
            Provides data for events raised by the <see cref="T:EO.Web.FileExplorer"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorerEventArgs.FileName">
      <summary>
            Gets the full file name.
            </summary>
    </member>
    <member name="P:EO.Web.FileExplorerEventArgs.NewFileName">
      <summary>
            Gets the new file name for <see cref="E:EO.Web.FileExplorer.FileRenamed"></see>
            or <see cref="E:EO.Web.FileExplorer.FolderRenamed"></see> event.
            </summary>
    </member>
    <member name="T:EO.Web.Floater">
      <summary>
            Floater floats its content out of its ordinary page 
            layout and anchor them to an anchor element.
            </summary>
    </member>
    <member name="M:EO.Web.Floater.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.Floater"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.Floater.LeftAnchorID">
      <summary>
            Gets or sets the ID of the left anchor element.
            </summary>
    </member>
    <member name="P:EO.Web.Floater.TopAnchorID">
      <summary>
            Gets or sets the ID of the top anchor element.
            </summary>
    </member>
    <member name="P:EO.Web.Floater.RightAnchorID">
      <summary>
            Gets or sets the ID of the right anchor element.
            </summary>
    </member>
    <member name="P:EO.Web.Floater.BottomAnchorID">
      <summary>
            Gets or sets the ID of the bottom anchor element.
            </summary>
    </member>
    <member name="P:EO.Web.Floater.LeftAnchorOffset">
      <summary>
            Gets or sets the offset in pixel to the left anchor.
            </summary>
    </member>
    <member name="P:EO.Web.Floater.TopAnchorOffset">
      <summary>
            Gets or sets the offset in pixel to the top anchor.
            </summary>
    </member>
    <member name="P:EO.Web.Floater.RightAnchorOffset">
      <summary>
            Gets or sets the offset in pixel to the right anchor.
            </summary>
    </member>
    <member name="P:EO.Web.Floater.BottomAnchorOffset">
      <summary>
            Gets or sets the offset in pixel to the bottom anchor.
            </summary>
    </member>
    <member name="P:EO.Web.Floater.ScrollMode">
      <summary>
            Gets or sets the floater scroll mode.
            </summary>
      <remarks>
            The <see cref="T:EO.Web.Floater"></see> control can be fixed both horizontally
            and vertically, or only fixed on one dimension. Setting this property
            to a value rather than <see cref="F:EO.Web.FloaterScrollMode.None"></see> allows
            the Floater to scroll along with the page either vertically or horizontally.
            </remarks>
    </member>
    <member name="P:EO.Web.Floater.GlideMode">
      <summary>
            Gets or sets whether the floater should play glide effect when it moves.
            </summary>
    </member>
    <member name="T:EO.Web.FloaterScrollMode">
      <summary>
            Specifies whether a <see cref="T:EO.Web.Floater"></see> control scrolls
            along with the page.
            </summary>
    </member>
    <member name="F:EO.Web.FloaterScrollMode.None">
      <summary>
            The floater's position is fixed according to anchor settings.
            </summary>
    </member>
    <member name="F:EO.Web.FloaterScrollMode.X">
      <summary>
            The floater's position is fixed vertically, but scrolls along
            with the page horizontally. The floater always tries to stay
            within the visible area.
            </summary>
    </member>
    <member name="F:EO.Web.FloaterScrollMode.Y">
      <summary>
            The floater's position is fixed horizontally, but scrolls along
            with the page vertically. The floater always tries to stay within
            the visible area.
            </summary>
    </member>
    <member name="T:EO.Web.FloaterGlideMode">
      <summary>
            Specifies whether a <see cref="T:EO.Web.Floater"></see> should play
            glide effect when it moves.
            </summary>
    </member>
    <member name="F:EO.Web.FloaterGlideMode.Auto">
      <summary>
            Automatically determines which option is better.
            </summary>
    </member>
    <member name="F:EO.Web.FloaterGlideMode.AlwaysOff">
      <summary>
            Does not play glide effect.
            </summary>
    </member>
    <member name="F:EO.Web.FloaterGlideMode.AlwaysOn">
      <summary>
            Always plays glide effect.
            </summary>
    </member>
    <member name="T:EO.Web.Grid">
      <summary>
            Represents a Grid control that allows you to select, sort, reorder and edit items.
            </summary>
    </member>
    <member name="M:EO.Web.Grid.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.Grid"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.RunningMode">
      <summary>
            Gets or sets the 
            <a href="Web/grid/mode.html">running mode</a> 
            of the grid.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.LoadingHTML">
      <summary>
            Gets or sets the HTML to be displayed while the Grid
            load/reload data in Callback mode.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ClientSideOnItemCommand">
      <summary>
            Gets or sets the name of the client side JavaScript 
            function to be called when any button in a 
            <see cref="T:EO.Web.ButtonColumn"></see> is clicked.
            </summary>
      <remarks>
        <p>
            Inside this event handler you can call client side function
            <a href="JSDoc.Public.Web.Grid.raiseItemCommandEvent.html">raiseItemCommandEvent</a>
            to pass the event to the server side and triger server side
            <see cref="E:EO.Web.Grid.ItemCommand"></see> event.
            </p>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.grid_itemcommand_handler.html">grid_itemcommand_handler</a>
            for prototype information about this handler.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ClientSideOnItemSelected">
      <summary>
            Gets or sets the name of the client side JavaScript 
            function to be called when an item is selected.
            </summary>
      <remarks>
        <p>
            An item can be selected when <see cref="P:EO.Web.Grid.FullRowMode"></see> is
            set to <b>true</b>. When <b>FullRowMode</b> is set to <b>false</b>,
            use <see cref="P:EO.Web.Grid.ClientSideOnCellSelected"></see>.
            </p>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for prototype information about this event handler. The client side
            <a href="JSDoc.Public.Web.Grid.html">Grid</a> object is passed as the
            first parameter when calling this handler. Inside the handler you
            can call <a href="JSDoc.Public.Web.Grid.getSelectedItem.html">getSelectedItem</a> to get
            the current selected item.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ClientSideOnCellSelected">
      <summary>
            Gets or sets the name of the client side JavaScript 
            function to be called when a cell is selected.
            </summary>
      <remarks>
        <p>
            An cell can be selected when <see cref="P:EO.Web.Grid.FullRowMode"></see> is
            set to <b>false</b>. When <b>FullRowMode</b> is set to <b>true</b>,
            use <see cref="P:EO.Web.Grid.ClientSideOnItemSelected"></see>.
            </p>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for prototype information about this event handler. The client side
            <a href="JSDoc.Public.Web.Grid.html">Grid</a> object is passed as the
            first parameter when calling this handler. Inside the handler you
            can call <a href="JSDoc.Public.Web.Grid.getSelectedCell.html">getSelectedCell</a> to get
            the current selected cell.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ClientSideBeforeEditItem">
      <summary>
            Gets or sets the name of the client side JavaScript 
            function to be called when an item is about to enter edit mode.
            </summary>
      <remarks>
        <p>
            This event is only raised when <see cref="P:EO.Web.Grid.FullRowMode"></see>
            is set to true.
            </p>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.grid_itemevent_handler.html">grid_itemevent_handler</a>
            for prototype information about this handler.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ClientSideAfterEditItem">
      <summary>
            Gets or sets the name of the client side JavaScript 
            function to be called when an item exits edit mode.
            </summary>
      <remarks>
        <p>
            This event is only raised when <see cref="P:EO.Web.Grid.FullRowMode"></see>
            is set to true.
            </p>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.grid_itemevent_handler.html">grid_itemevent_handler</a>
            for prototype information about this handler.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ContextItem">
      <summary>
            Returns a <see cref="T:EO.Web.GridItem"></see> object that has
            displayed a context menu and subsequently the context menu
            triggered a server event.
            </summary>
      <remarks>
        <p>
            When you use <see cref="P:EO.Web.Grid.ClientSideOnContextMenu"></see> to
            display a context menu for a grid item and the context menu's
            <see cref="P:EO.Web.BaseNavigator.RaisesServerEvent"></see> is set to
            <b>true</b>, it is often desired to know which item was
            the node that the context menu acted upon when you handle
            the context menu's <see cref="E:EO.Web.BaseNavigator.ItemClick"></see> 
            event on the server side. Use this property to get that
            item.
            </p>
        <p>
            This property is cleared when the Grid is repopulated. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ContextCell">
      <summary>
            Returns a <see cref="T:EO.Web.GridCell"></see> object that has
            displayed a context menu and subsequently the context menu
            triggered a server event.
            </summary>
      <remarks>
            See <see cref="P:EO.Web.Grid.ContextItem"></see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.ClientSideOnContextMenu">
      <summary>
            Gets or sets the name of the client side function to be called to display a context menu when an item is right-clicked.
            </summary>
      <remarks>
            Use this client side event handler to display a context menu when user right click on an item.
            See <a href="JSDoc.Public.Web.Handlers.contextmenu_handler.html">grid_contextmenu_handler</a>
            for more information.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.ClientSideOnSort">
      <summary>
            Gets or sets the name of the client side function to be called when a column is sorted in client running mode.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for details about parameters and return value of this function.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.ClientSideOnItemOver">
      <summary>
            Gets or sets the name of the client side function to be called when mouse is over a grid item.
            </summary>
      <remarks>
        <p>
            Set this property to the name of your JavaScript function that handles
            the event. The handler should take the following form:
            </p>
        <code lang="JavaScript">
            function your_event_handler(grid, item, changed, e)
            {
               ....
            }
            </code>
        <p>
            These arguments are passed to your handler:
            </p>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>grid</term>
            <description>The <a href="JSDoc.Public.Web.Grid.html">grid</a> that fires the event</description>
          </item>
          <item>
            <term>item</term>
            <description>The <a href="JSDoc.Public.Web.GridItem.html">item</a> that receives the mouse over event</description>
          </item>
          <item>
            <term>changed</term>
            <description>Whether this is the same item as last time</description>
          </item>
          <item>
            <term>e</term>
            <description>The DOM event object</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ClientSideOnCellOver">
      <summary>
            Gets or sets the name of the client side function to be called when mouse is over a grid cell.
            </summary>
      <remarks>
        <p>
            Set this property to the name of your JavaScript function that handles
            the event. The handler should take the following form:
            </p>
        <code lang="JavaScript">
            function your_event_handler(grid, cell, changed, e)
            {
               ....
            }
            </code>
        <p>
            These arguments are passed to your handler:
            </p>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>grid</term>
            <description>The <a href="JSDoc.Public.Web.Grid.html">grid</a> that fires the event</description>
          </item>
          <item>
            <term>cell</term>
            <description>The <a href="JSDoc.Public.Web.GridCell.html">cell</a> that receives the mouse over event</description>
          </item>
          <item>
            <term>changed</term>
            <description>Whether this is the same cell as last time</description>
          </item>
          <item>
            <term>e</term>
            <description>The DOM event object</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ClientSideOnColumnResize">
      <summary>
            Gets or sets the name of the client side function to be called when a column is resized.
            </summary>
      <remarks>
        <p>
            Set this property to the name of your JavaScript function that handles
            the event. The handler should take the following form:
            </p>
        <code lang="JavaScript">
            function your_event_handler(grid, column)
            {
               ....
            }
            </code>
        <p>
            These arguments are passed to your handler:
            </p>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>grid</term>
            <description>The <a href="JSDoc.Public.Web.Grid.html">grid</a> that fires the event</description>
          </item>
          <item>
            <term>column</term>
            <description>The <a href="JSDoc.Public.Web.GridColumn.html">column</a> that has been resized</description>
          </item>
        </list>
        <p>
            This event can be used by a <see cref="T:EO.Web.CustomColumn"></see>
            to resize its editor UI when the column resizes.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ClientSideOnColumnReorder">
      <summary>
            Gets or sets the name of the client side function to be called when a column is moved.
            </summary>
      <remarks>
        <p>
            Set this property to the name of your JavaScript function that handles
            the event. The handler should take the following form:
            </p>
        <code lang="JavaScript">
            function your_event_handler(grid, column)
            {
               ....
            }
            </code>
        <p>
            These arguments are passed to your handler:
            </p>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>grid</term>
            <description>The <a href="JSDoc.Public.Web.Grid.html">grid</a> that fires the event</description>
          </item>
          <item>
            <term>column</term>
            <description>The <a href="JSDoc.Public.Web.GridColumn.html">column</a> that has been resized</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.Items">
      <summary>
            Gets a collection of <see cref="T:EO.Web.GridItem"></see> objects
            that represents the individual items in the grid.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ChangedItems">
      <summary>
            Get a list of all items that have been changed on the client side.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.AddedItems">
      <summary>
            Get a list of items that have been added on the client side.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.DeletedItems">
      <summary>
            Get a list of items that have been deleted on the client side.
            </summary>
    </member>
    <member name="M:EO.Web.Grid.GetCheckedItems(EO.Web.CheckBoxColumn)">
      <summary>
            Gets all items that are checked on the given <see cref="T:EO.Web.CheckBoxColumn"></see>.
            </summary>
      <param name="column">The <see cref="T:EO.Web.CheckBoxColumn"></see>.</param>
    </member>
    <member name="P:EO.Web.Grid.CheckedItems">
      <summary>
            Get a list that contains all checked items.
            </summary>
      <remarks>
            An item is considered checked when it is checked on the
            first <see cref="T:EO.Web.CheckBoxColumn"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.ItemStyles">
      <summary>
            Gets a collection of <see cref="T:EO.Web.GridItemStyleSet"></see> objects that specify grid item styles.
            </summary>
      <remarks>
        <p>
            EO.Web Grid supports conditional formatting --- that is, using
            different style settings based on different values from the data
            source. In order to use this feature, you should first define
            multiple <see cref="T:EO.Web.GridItemStyleSet"></see> objects in 
            <see cref="P:EO.Web.Grid.ItemStyles"></see> collection and give each of
            the <b>GridItemStyleSet</b> a different <see cref="P:EO.Web.GridItemStyleSet.StyleSetID"></see>.
            At runtime, if an item's <see cref="P:EO.Web.GridItem.StyleSetID"></see> matches
            the <b>StyleSetID</b> of any <b>GridItemStyleSet</b>, that style set
            will be used for the item.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.GridLines">
      <summary>
            Gets or sets how grid lines are displayed.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.GridLineColor">
      <summary>
            Gets or sets the color of the grid lines.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.EditItemIndex">
      <summary>
            Gets or sets the intial edit item index.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.EditCellIndex">
      <summary>
            Gets or sets the intial edit cell index.
            </summary>
      <remarks>
            This property is ignored if <see cref="P:EO.Web.Grid.FullRowMode"></see> is <b>true</b>.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.SelectedItemIndex">
      <summary>
            Gets or sets the selected item index.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.SelectedCellIndex">
      <summary>
            Gets or sets the selected cell index.
            </summary>
      <remarks>
            This property is ignored if <see cref="P:EO.Web.Grid.FullRowMode"></see> is <b>true</b>.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.FullRowMode">
      <summary>
            Gets or sets whether selection and editing is row based or cell based.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.AllowNewItem">
      <summary>
            Gets or sets whether the grid allows user to append new items.
            </summary>
      <remarks>
        <p>
            When this property is set to <b>true</b>, an empty row is displayed
            after the last row. User can edit this row and when user submits 
            the changes, this row becomes a regular row and a new empty row is
            appended to the grid.
            </p>
        <p>
            Once the page posts back, you can get a list of all added items through
            <see cref="P:EO.Web.Grid.AddedItems"></see> property. <see cref="E:EO.Web.Grid.ItemAdded"></see>
            event is also fired for each added item.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.NewItemIndicatorHtml">
      <summary>
            Gets or sets the HTML for the new item indicator.
            </summary>
      <remarks>
            When <see cref="P:EO.Web.Grid.AllowNewItem"></see> is set to <b>true</b>, the
            grid displays an empty row after the last row. In order to
            differentiate this special row and all other regular rows,
            <see cref="T:EO.Web.RowNumberColumn"></see> does not display
            a row number for this row. It displays the value of this
            property instead.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.ColumnHeaderVisible">
      <summary>
            Gets or sets a value indicating whether column headers are visible.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.AllowColumnReorder">
      <summary>
            Gets or sets a value indicating whether to allow user to reorder columns by drag drop.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ColumnHeaderHeight">
      <summary>
            Gets or sets the height of the column header in pixel.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ColumnHeaderTextStyle">
      <summary>
            Gets or sets the style to be applied to column header text.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ColumnHeaderStyle">
      <summary>
            Gets or sets the styles to be applied to each column header.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ColumnHeaderHoverStyle">
      <summary>
            Gets or sets the styles to be applied to a column header when
            the mouse hovers over it.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ColumnHeaderDividerImage">
      <summary>
            Gets or sets the URL of the image to be displayed between column
            headers to create a visual divider between two adjacent columns.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ColumnHeaderDividerOffset">
      <summary>
            Gets or sets the column divider image offset relative to the
            dividing point of two adjacent columns. 
            </summary>
      <remarks>
        <p>
            The offset is typically half the width of the divider image.
            This is because the divider image is placed on top of the 
            dividing point in between two adjacent column headers. It
            overlaps with the right edge of the previous column header
            on the left and with the left edge of the next column header
            on the right. This property specifies how many pixels of the
            divider image are overlapped with the right edge of the previous
            column. Thus if the divider image is to be place right in
            the middle of the two columns, this property should be half
            width of the image.
            </p>
        <p>
            The default value is 4.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ColumnHeaderSortImageOffset">
      <summary>
            Gets or sets the sort image offset relative to the right edge of the column header.
            </summary>
      <remarks>
        <p>
            Sort image is a small image displayed on top of column header to
            indicate that the column can be sorted. It is usually displayed on
            the right side of the column header next to the header text. This
            property specifies the distance between the left edge of the sort
            image and the right edge of the column header.
            </p>
        <p>
            The default value is 16.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.ColumnHeaderAscImage">
      <summary>
            Gets or sets the image to be displayed on a column header to indicate 
            items are sorted in ascending order.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ColumnHeaderDescImage">
      <summary>
            Gets or sets the image to be displayed on a column header to indicate 
            items are sorted in descending order.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.Columns">
      <summary>
            Gets a collection of <see cref="T:EO.Web.GridColumn"></see> objects
            that represents each grid columns.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ColumnTemplates">
      <summary>
            Gets a collection of GridColumn objects that are used as templates for the real columns.
            </summary>
      <remarks>
            In addition to the <see cref="P:EO.Web.Grid.Columns"></see> collection, the grid also maintains 
            <b>ColumnTemplates</b> collection. This collection contains <see cref="T:EO.Web.GridColumn"></see>
            objects that can be used as template of grid columns in the <b>Columns</b> collection. 
            These templates are used to specify appearance related settings. For example, if one 
            wants all <see cref="T:EO.Web.TextBoxColumn">TextBoxColumns</see> in a grid to use a textbox with black borders 
            when editing cell data, he/she can define a <b>TextBoxColumn</b> in the grid's 
            ColumnTemplates collection and sets <see cref="P:EO.Web.TextBoxColumn.TextBoxStyle"></see> to include 
            black border settings on that column. At runtime, unless overridden on the target 
            column, all <b>TextBoxColumns</b> in the grid will inherits this setting. 
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.FixedColumnCount">
      <summary>
            Gets or sets the number of fixed columns.
            </summary>
      <remarks>
            Fixed columns do not scroll when the grid scrolls.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.ContentPaneStyle">
      <summary>
            Gets or sets the style to be applied to the content pane.
            </summary>
      <remarks>
            The content pane is the area that holds column headers and all items.
            In another word, it represents the area without the footer.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.ScrollBars">
      <summary>
            Gets or sets the type of scroll bars to be displayed.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.ItemHeight">
      <summary>
            Gets or sets the height of the item.
            </summary>
      <remarks>
            EO.Web Grid requires a fixed item height. The default value is 20.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.FixedTopItemCount">
      <summary>
            Gets or sets the number of fixed row on the top.
            </summary>
      <remarks>
            Fixed rows do not scroll when the grid scrolls.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.FixedBottomItemCount">
      <summary>
            Gets or sets the number of fixed row on the bottom.
            </summary>
      <remarks>
            Fixed rows do not scroll when the grid scrolls.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.FixedTopItemHeight">
      <summary>
            Gets or sets the height of the each fixed top items.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.FixedBottomItemHeight">
      <summary>
            Gets or sets the height of the each fixed bottom items.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.FixedTopItemStyle">
      <summary>
            Gets or sets the styles to be applied to each fixed top item.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.FixedBottomItemStyle">
      <summary>
            Gets or sets the styles to be applied to each fixed bottom item.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.FooterStyle">
      <summary>
            Gets or sets the style to be applied to the entire footer area.
            </summary>
      <remarks>
            The footer area is used to host the pager if
            <a href="Web/grid/paging.html">paging</a> is enabled. Otherwise
            it is not displayed.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.DataTable">
      <summary>
            Gets or sets the table name to be used when the data source is a DataSet object.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.KeyField">
      <summary>
            Gets or sets the key field of the data source.
            </summary>
      <remarks>
            EO.Web Grid retrieves the key data and store it in
            <see cref="P:EO.Web.GridItem.Key">GridItem.Key</see> property.
            <b>GridItem.Key</b> is not used by the Grid in any way
            but it is persisted across posts backs.
            Thus it's a value that is entirely yours to use.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.StyleSetIDField">
      <summary>
            Gets or sets the field from which GridItem populates its <see cref="P:EO.Web.GridItem.StyleSetID"></see> field.
            </summary>
      <remarks>
        <p>
            EO.Web Grid supports conditional formatting --- that is, using
            different style settings based on different values from the data
            source. In order to use this feature, you should first define
            multiple <see cref="T:EO.Web.GridItemStyleSet"></see> objects in 
            <see cref="P:EO.Web.Grid.ItemStyles"></see> collection and give each of
            the <b>GridItemStyleSet</b> a different <see cref="P:EO.Web.GridItemStyleSet.StyleSetID"></see>.
            At runtime, if an item's <see cref="P:EO.Web.GridItem.StyleSetID"></see> matches
            the <b>StyleID</b> of any <b>GridItemStyleSet</b>, that style set
            will be used for the item.
            </p>
        <p>
            When this property is set, value of <see cref="P:EO.Web.Grid.StyleSetIDField"></see>
            of the data source is stored in each <see cref="T:EO.Web.GridItem"></see>'s
            <see cref="P:EO.Web.GridItem.StyleSetID"></see> property.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.Grid.CreateItem">
      <summary>
            Creates a new <see cref="T:EO.Web.GridItem"></see> object.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.AllowPaging">
      <summary>
            Gets or sets a value indicating whether to allow paging.
            </summary>
      <remarks>
            Set this property to <b>true</b> to enable 
            <a href="Web/Grid/paging.html">paging</a>. 
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.FirstPageButtonHtml">
      <summary>
            Gets or sets the HTML for the pager button that would navigate to the first page.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.LastPageButtonHtml">
      <summary>
            Gets or sets the HTML for the pager button that would navigate to the last page.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.PrevPageButtonHtml">
      <summary>
            Gets or sets the HTML for the pager button that would navigate to the previous page.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.NextPageButtonHtml">
      <summary>
            Gets or sets the HTML for the pager button that would navigate to the next page.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.PageButtonFormat">
      <summary>
            Gets or sets the format string used to create the HTML text for pager buttons
            that would navigate to each individual page.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.CurrentPageButtonFormat">
      <summary>
            Gets or sets the format string used to create the HTML text for pager buttons
            that represents the current page.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.PagerLabelTemplate">
      <summary>
            Gets or sets the pager label template.
            </summary>
      <remarks>
            This property uses <see cref="T:EO.Web.ClientTemplate"></see> syntax to define
            customized pager label. You can include any 
            HTML tags as well as variables by using <b>var</b> keyword.
            See <see cref="T:EO.Web.ClientTemplate"></see> documentation for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.EmptyDataText">
      <summary>
            Gets or sets the HTML to be displayed when the Grid has no data.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.GoToBoxVisible">
      <summary>
            Gets or sets a value indicating whether to display a text box with which user can enter a target page number directly.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.GoToBoxStyle">
      <summary>
            Gets or sets the style to be applied to the text box where user can enter a target page number directly. 
            </summary>
    </member>
    <member name="P:EO.Web.Grid.GoToLabelText">
      <summary>
            Gets or sets the text to be displayed left to the textbox where user can directly enter a target page number.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.GoToButtonText">
      <summary>
            Gets or sets the text for the button displayed right to the textbox where user can directly enter a target page number.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.PageSize">
      <summary>
            Gets or sets the number of items displayed per page.
            </summary>
      <remarks>
            Value of this property does not include <see cref="P:EO.Web.Grid.FixedTopItemCount"></see>
            or <see cref="P:EO.Web.Grid.FixedBottomItemCount"></see>. 
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.PagerSize">
      <summary>
            Gets or sets the number of page buttons the pager displays.
            </summary>
      <remarks>
            This property is to not to be confused with <see cref="P:EO.Web.Grid.PageSize"></see>.
            <b>PageSize</b> specifies the number of items displayed per page, while
            this property specifies how many page buttons are displayed 
            in the pager area.
            </remarks>
    </member>
    <member name="P:EO.Web.Grid.CurrentPage">
      <summary>
            Gets or sets the zero based current page index.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.TotalPages">
      <summary>
            Gets the total number of pages.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.RecordCount">
      <summary>
            Gets or sets the total number of records.
            </summary>
      <remarks>
        <p>
            You must use this property to set the total number of records
            when <see cref="P:EO.Web.Grid.AllowPaging"></see> is set to <b>true</b> because
            when paging is enabled, the total number of record and the total
            number of items are usually different. The total number of record
            is the total number of records in the data source, where as the
            total number of items are total number of rows in the current page. 
            </p>
        <p>
            The following code demonstrated how to set this property:
            <code lang="C#">
            //Set the total number of records
            Grid1.RecordCount = GetTotalRecordCount();
            
            //Get the data for the current page. The data
            //returned is for this page only, thus usually
            //have much less number of record than set by
            //previous line
            Grid1.DataSource = GetDataForCurrentPage(Grid1.CurrentPage);
            
            //Populate the grid
            Grid1.DataBind();
            </code><code lang="VB">
            'Set the total number of records
            Grid1.RecordCount = GetTotalRecordCount()
            
            'Get the data for the current page. The data
            'returned is for this page only, thus usually
            'have much less number of record than set by
            'previous line
            Grid1.DataSource = GetDataForCurrentPage(Grid1.CurrentPage)
            
            'Populate the grid
            Grid1.DataBind()
            </code></p>
        <p>
            See <a href="Web/Grid/data_binding.html">populating the grid</a> for 
            more sample code on using this property.
            </p>
        <p>
            When <see cref="P:EO.Web.Grid.AllowPaging"></see> is false, this property
            returns the total number of <see cref="T:EO.Web.GridItem"></see>
            in the grid's <see cref="P:EO.Web.Grid.Items"></see> collection.
            Assigning it a value will be ignored.
            </p>
        <p>
          <b>Note:</b> RecordCount includes <see cref="P:EO.Web.Grid.FixedTopItemCount"></see>
            and <see cref="P:EO.Web.Grid.FixedBottomItemCount"></see>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Grid.RecordOffset">
      <summary>
            Gets the index of the first displayed record.
            </summary>
    </member>
    <member name="M:EO.Web.Grid.FindColumn(System.String)">
      <summary>
            Returns a column whose <see cref="P:EO.Web.GridColumn.Name"></see> matches the given name.
            </summary>
      <param name="columnName">The name of the column.</param>
      <returns>
            Returns the matching column if a match is found, otherwise <b>null</b> (Visual Basic <b>Nothing</b>).
            </returns>
    </member>
    <member name="P:EO.Web.Grid.IsCallbackByMe">
      <summary>
            Returns a value indicating whether the current request
            is generated by the <see cref="T:EO.Web.Grid"></see> in
            <see cref="F:EO.Web.RunningMode.Callback"></see> running mode
            to update grid data.
            </summary>
    </member>
    <member name="P:EO.Web.Grid.SortColumn">
      <summary>
            Gets the column that the Grid is currently being sorted on.
            </summary>
    </member>
    <member name="E:EO.Web.Grid.PageIndexChanged">
      <summary>
            Occurs when user has used the pager to navigate to a new page.
            </summary>
      <remarks>
        <p>
            This event is not fired when the Grid is running on 
            <see cref="F:EO.Web.RunningMode.Client"></see> running mode. On
            client running mode, the Grid performs paging on the
            client side.
            </p>
        <p>
            The <see cref="P:EO.Web.Grid.CurrentPage"></see> property has already
            been updated when this event is fired. Usually you should handle
            this event to provide the <see cref="T:EO.Web.Grid"></see> with new data
            for the new page. See 
            <a href="Web/Grid/data_binding.html">populating the grid</a> for sample code on how
            to handle this event.
            </p>
      </remarks>
    </member>
    <member name="E:EO.Web.Grid.ColumnSort">
      <summary>
            Occurs when user clicked on a sortable column when the 
            <see cref="T:EO.Web.Grid"></see> is running in
            <see cref="F:EO.Web.RunningMode.Server"></see> running mode or
            <see cref="F:EO.Web.RunningMode.Callback"></see> running mode.
            </summary>
      <remarks>
        <p>
            This event is not fired when the Grid is running on 
            <see cref="F:EO.Web.RunningMode.Client"></see> running mode. On
            client running mode, the Grid performs sorting on the
            client side.
            </p>
        <p>
            See <a href="Web/Grid/sorting.html">sorting</a> on for
            sample code on how to handle this event.
            </p>
      </remarks>
    </member>
    <member name="E:EO.Web.Grid.ColumnReorder">
      <summary>
            Occurs after the user has reordered grid columns and then
            the page posts back.
            </summary>
      <remarks>
        <p>
            This event does not occur immediately after the columns
            have been reordered. It occurs when the page posts back.
            </p>
      </remarks>
    </member>
    <member name="E:EO.Web.Grid.ItemCommand">
      <summary>
            Occurs when an item command event is raised.
            </summary>
      <remarks>
            An item command event is raised when a button inside a
            <see cref="T:EO.Web.ButtonColumn"></see> is clicked in <b>server</b>
            or <b>callback</b> mode, or when client side function
            <a href="JSDoc.Public.Web.Grid.raiseItemCommandEvent.html">raiseItemCommandEvent</a> is called.
            </remarks>
    </member>
    <member name="E:EO.Web.Grid.ItemChanged">
      <summary>
            Occurs when an item has been editted on the client side.
            </summary>
      <remarks>
        <p>
            This event is not fire immediately after the change is made. Instead
            all changes are logged and the event is fired when the page posts back.
            The event is fired once for each modified item.
            </p>
        <p>
            You can also use <see cref="P:EO.Web.Grid.ChangedItems"></see> to get a list of
            all changed items.
            </p>
      </remarks>
    </member>
    <member name="E:EO.Web.Grid.ItemAdded">
      <summary>
            Occurs when a new item has been added on the client side.
            </summary>
      <remarks>
        <p>
            This event is not fire immediately after the change is made. Instead
            all changes are logged and the event is fired when the page posts back.
            The event is fired once for each added item.
            </p>
        <p>
            You can also use <see cref="P:EO.Web.Grid.AddedItems"></see> to get a list of
            all added items.
            </p>
      </remarks>
    </member>
    <member name="E:EO.Web.Grid.ItemDeleted">
      <summary>
            Occurs when an item has been deleted on the client side.
            </summary>
      <remarks>
        <p>
            This event is not fire immediately after the change is made. Instead
            all changes are logged and the event is fired when the page posts back.
            The event is fired once for each deleted item.
            </p>
        <p>
            You can also use <see cref="P:EO.Web.Grid.DeletedItems"></see> to get a list of
            all deleted items.
            </p>
      </remarks>
    </member>
    <member name="T:EO.Web.ScrollBars">
      <summary>
            Specifies which scroll bars will be visible on a control.
            </summary>
    </member>
    <member name="F:EO.Web.ScrollBars.Auto">
      <summary>
            Control automatically displays a scroll bar if needed.
            </summary>
    </member>
    <member name="F:EO.Web.ScrollBars.Horizontal">
      <summary>
            Only horizontal scroll bars are shown.
            </summary>
    </member>
    <member name="F:EO.Web.ScrollBars.Vertical">
      <summary>
            Only vertical scroll bars are shown.
            </summary>
    </member>
    <member name="F:EO.Web.ScrollBars.Both">
      <summary>
            Both horizontal and vertical scroll bars are shown.
            </summary>
    </member>
    <member name="F:EO.Web.ScrollBars.None">
      <summary>
            No scroll bars are shown.
            </summary>
    </member>
    <member name="T:EO.Web.SortOrder">
      <summary>
            Specifies the sorting order.
            </summary>
    </member>
    <member name="F:EO.Web.SortOrder.None">
      <summary>
            Items are not sorted.
            </summary>
    </member>
    <member name="F:EO.Web.SortOrder.Ascending">
      <summary>
            Items are sorted in ascending order.
            </summary>
    </member>
    <member name="F:EO.Web.SortOrder.Descending">
      <summary>
            Items are sorted in descending order.
            </summary>
    </member>
    <member name="T:EO.Web.GridColumnEventArgs">
      <summary>
            Provides data for 
            <see cref="E:EO.Web.Grid.ColumnSort">Grid.ColumnSort</see> event.
            </summary>
    </member>
    <member name="M:EO.Web.GridColumnEventArgs.#ctor(EO.Web.GridColumn)">
      <summary>
            Create a new instance of the GridColumnEventArgs class.
            </summary>
      <param name="column">
            The <see cref="T:EO.Web.GridColumn"></see> thas is associated with this event.
            </param>
    </member>
    <member name="P:EO.Web.GridColumnEventArgs.Column">
      <summary>
            Gets the <see cref="T:EO.Web.GridColumn"></see>
            thas is associated with this event.
            </summary>
    </member>
    <member name="T:EO.Web.GridColumnEventHandler">
      <summary>
            Represents the method that handles event that references to a <see cref="T:EO.Web.GridColumn"></see>.
            </summary>
    </member>
    <member name="T:EO.Web.GridItemEventArgs">
      <summary>
            Provides data for events related to <see cref="T:EO.Web.GridItem"></see> object.
            </summary>
    </member>
    <member name="M:EO.Web.GridItemEventArgs.#ctor(EO.Web.GridItem)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.GridItemEventArgs"></see> class.
            </summary>
      <param name="item">The grid item.</param>
    </member>
    <member name="P:EO.Web.GridItemEventArgs.Item">
      <summary>
            Gets the grid item associated with this event.
            </summary>
    </member>
    <member name="T:EO.Web.GridItemEventHandler">
      <summary>
            Represents the method that handles event that references to a <see cref="T:EO.Web.GridItem"></see>.
            </summary>
    </member>
    <member name="T:EO.Web.GridCommandEventArgs">
      <summary>
            Provides data for events related to <see cref="E:EO.Web.Grid.ItemCommand">Grid.ItemCommand</see> event.
            </summary>
    </member>
    <member name="M:EO.Web.GridCommandEventArgs.#ctor(EO.Web.GridItem,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.GridCommandEventArgs"></see> class.
            </summary>
      <param name="item">The grid item.</param>
      <param name="commandName">The command name.</param>
    </member>
    <member name="P:EO.Web.GridCommandEventArgs.CommandName">
      <summary>
            Gets the command name associated with this event.
            </summary>
    </member>
    <member name="T:EO.Web.GridCommandEventHandler">
      <summary>
            Represents the method that handles <see cref="E:EO.Web.Grid.ItemCommand">Grid.ItemCommand</see> event.
            </summary>
    </member>
    <member name="T:EO.Web.GridColumnDataType">
      <summary>
            Specifies the data type of a grid column.
            </summary>
      <remarks>
            This type is used by <see cref="P:EO.Web.GridColumn.DataType"></see> property,
            which decides data types for values user entered on the client side.
            </remarks>
    </member>
    <member name="F:EO.Web.GridColumnDataType.Auto">
      <summary>
            The data type is automatically determined by the column type.
            </summary>
    </member>
    <member name="F:EO.Web.GridColumnDataType.Boolean">
      <summary>
            The column contains <see cref="T:System.Boolean"></see> values.
            </summary>
    </member>
    <member name="F:EO.Web.GridColumnDataType.Integer">
      <summary>
            The column contains <see cref="T:System.Int32"></see> values.
            </summary>
    </member>
    <member name="F:EO.Web.GridColumnDataType.Float">
      <summary>
            The column contains <see cref="T:System.Double"></see> values.
            </summary>
    </member>
    <member name="F:EO.Web.GridColumnDataType.String">
      <summary>
            The column contains <see cref="T:System.String"></see> values.
            </summary>
    </member>
    <member name="F:EO.Web.GridColumnDataType.DateTime">
      <summary>
            The column contains <see cref="T:System.DateTime"></see> values.
            </summary>
    </member>
    <member name="T:EO.Web.GridColumn">
      <summary>
            Serves as the base class for all 
            <a href="Web/Grid/columns.html">columns</a>
            for an EO.Web <see cref="T:EO.Web.Grid">Grid</see> control.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.Grid">
      <summary>
            Returns the Grid control that contains this column.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.Index">
      <summary>
            Returns the zero based index of this column.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.AllowEdit">
      <summary>
            Returns whether this column can be edited.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.ClientSideBeginEdit">
      <summary>
            Gets or sets the name of a client side JavaScript function to be
            called before the cell enters edit mode.
            </summary>
      <remarks>
            Use this handler to prepare the editing UI. This usually involes
            in calling <a href="JSDoc.Public.Web.GridCell.getValue.html">GridCell.getValue</a>
            to retrieve the current value of the cell, then load the value into
            the editing UI element. See 
            <a href="JSDoc.Public.Web.Handlers.grid_column_beginedit.html">grid_customcolumn_beginedit</a>
            for prototype information about this handler.
            </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.ClientSideEndEdit">
      <summary>
            Gets or sets the name of a client side JavaScript function to be
            called before the cell leaves edit mode.
            </summary>
      <remarks>
            Use this handler to retrieve value entered by the user from the
            editing UI element. See 
            <a href="JSDoc.Public.Web.Handlers.grid_column_endedit.html">grid_customcolumn_endedit</a>
            for prototype information about this handler.
            </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.Name">
      <summary>
            Gets or sets the name for this column.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.HeaderText">
      <summary>
            Gets or sets the header text for this column.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.Width">
      <summary>
            Gets or sets the pixel width for this column.
            </summary>
      <remarks>
            Set this property to -1 to define an "auto fit" column. An auto
            fit column is a column that automatically uses the maximum 
            available width. You should consider disable horizontal scrolling
            through <see cref="P:EO.Web.Grid.ScrollBars">Grid.ScrollBars</see> when
            using this feature.
            </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.MinWidth">
      <summary>
            Gets or sets the minimum width for this column when user resizes the column.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.MaxWidth">
      <summary>
            Gets or sets the maximum width for this column when user resizes the column.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.AllowResize">
      <summary>
            Gets or sets a value indicating whether this column is resizable.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.AllowSort">
      <summary>
            Gets or sets a value indicating whether this column supports sort.
            </summary>
      <remarks>
            See <a href="Web/Grid/sorting.html">implement sorting</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.ReadOnly">
      <summary>
            Gets or sets a value indicating whether this column is read-only.
            </summary>
      <remarks>
            Use this property to disable editing on an editable column, such as 
            a <see cref="T:EO.Web.TextBoxColumn"></see>. This property has no effect on
            non-editable columns, such as <see cref="T:EO.Web.StaticColumn"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.CellStyle">
      <summary>
            Gets or sets the styles for cells of this column.
            </summary>
      <remarks>
            This property overrides styles set through <see cref="P:EO.Web.Grid.ItemStyles"></see> property.
            </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.Visible">
      <summary>
            Gets or sets a value indicating whether the column is visible.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.SortOrder">
      <summary>
            Gets or sets the sort order for this column.
            </summary>
      <remarks>
        <p>
            Of all columns of a <see cref="T:EO.Web.Grid"></see> control, only one column
            can have <see cref="P:EO.Web.GridColumn.SortOrder"></see> set to a value other than
            <see cref="F:EO.Web.SortOrder.None"></see> at any given time. 
            </p>
        <p>
            See <a href="Web/Grid/sorting.html">sorting</a> for more details.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.DataField">
      <summary>
            Gets or sets the data field for this column.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.StyleField">
      <summary>
            Gets or sets the data field from which a cell can retrieve a CSS style class name.
            </summary>
      <remarks>
        <p>
            Use this property to specify an additional CSS style for each cell.
            The style is most often used to implement "conditional rendering"
            based on cell value. For example, to display a "Balance" column as
            red when the balance is below 0, one can use the following SQL statement
            to populate the grid:
            </p>
        <code lang="SQL">
            SELECT AccountNo, Balance, 
                IIF(Balance &lt; 0, 'negative_balance', '') as BalanceStyle
            FROM Accounts
            </code>
        <code lang="CSS">
            
            .negative_balance
            {
                background-color: red;
            }
            </code>
        <para>
            You can then set <see cref="P:EO.Web.GridColumn.StyleField" /> to <i>BalanceStyle</i> so that the value
            of the BalanceStyle field is automatically applied to each cell in that column.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.DataType">
      <summary>
            Specifies the data type for cells modified by the user in this column.
            </summary>
      <remarks>
        <p>
            When user adds a new item or edit an existing item on the client side,
            <see cref="T:EO.Web.GridColumn"></see> uses this property to determine the type 
            of value entered by the user. This type is ultimiated reflected through 
            <see cref="P:EO.Web.GridCell.Value">GridCell.Value</see> property.
            </p>
        <p>
            For example, if a <see cref="T:EO.Web.TextBoxColumn"></see>'s 
            <see cref="P:EO.Web.GridColumn.DataType"></see> is set to <see cref="F:EO.Web.GridColumnDataType.Integer"></see>
            and user enters a value of "123", then the corresponding 
            <see cref="P:EO.Web.GridCell.Value">GridCell.Value</see> would return
            an <see cref="T:System.Int32"></see> value of 123, instead of
            a <see cref="T:System.String"></see> value of "123".
            </p>
        <p>
            The default value is <see cref="F:EO.Web.GridColumnDataType.Auto"></see>, which
            is translated to different values based on the type of the column:
            </p>
        <list type="table">
          <listheader>
            <term>When the column is...</term>
            <description>GridColumnDataType.Auto is translated to...</description>
          </listheader>
          <item>
            <term>
              <see cref="T:EO.Web.CheckBoxColumn">
              </see>
            </term>
            <description>
              <see cref="T:System.Boolean">
              </see>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:EO.Web.DateTimeColumn">
              </see>
            </term>
            <description>
              <see cref="T:System.DateTime">
              </see>
            </description>
          </item>
          <item>
            <term>All other columns</term>
            <description>
              <see cref="T:System.String">
              </see>
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.DataFormat">
      <summary>
            Gets or sets the data format for this column.
            </summary>
      <remarks>
        <p>
            Use this property to specify the display format of a number or 
            date value. <see cref="P:EO.Web.GridColumn.DataFormat"></see> should be in the form of 
            "{0:format_string}", where "format_string" can have different 
            values, depending on the type of the data to be formatted.
            </p>
        <p>
            When the underlying data is a date, you can use any specifier
            listed <see cref="P:EO.Web.Calendar.TitleFormat">here</see> and
            <see cref="P:EO.Web.DatePicker.PickerFormat">here</see>. For example,
            setting <see cref="P:EO.Web.GridColumn.DataFormat"></see> to "{0:yyyy/mm/dd}" would
            results in "2007/12/01" for December 1st, 2007.
            </p>
        <p>
            When the underlying data is a number, you can use 
            <a href="http://msdn2.microsoft.com/en-us/library/dwhawy9k.aspx">Standard Numeric Format Strings</a>
            as listed in MSDN. For example, in order to format "12.345" to "12.34500", you can
            set <see cref="P:EO.Web.GridColumn.DataFormat"></see> to "{0:N5}". Note custom format strings such as
            "{0:0.000}" are not supported.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.EnableKeyboardNavigation">
      <summary>
            Gets or sets a value indicating whether keyboard navigation should be enabled for this column.
            </summary>
      <remarks>
            The Grid's <see cref="P:EO.Web.WebControl.EnableKeyboardNavigation"></see> must be set to true
            in order to use keyboard navigation. However you can set this property to false to skip
            keyboard navigation for this column.
            </remarks>
    </member>
    <member name="P:EO.Web.GridColumn.DataSorted">
      <summary>
            Gets or sets a value to indicate whether data is already sorted based on the 
            value of the <see cref="P:EO.Web.GridColumn.SortOrder" /> property.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.OrderByClause">
      <summary>
            Gets a SQL "ORDER BY" clause based on the column's DataField and SortOrder property.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumn.DefaultValue">
      <summary>
            Gets or sets the string representation of the default value for this column.
            </summary>
      <remarks>
            This value is used as the initial edit text for this column when user adds a new row on the client side.
            </remarks>
    </member>
    <member name="T:EO.Web.RowNumberColumn">
      <summary>
            Represents a column that displays row numbers.
            </summary>
    </member>
    <member name="M:EO.Web.RowNumberColumn.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.RowNumberColumn"></see> class.
            </summary>
    </member>
    <member name="T:EO.Web.StaticColumn">
      <summary>
            Represents a column that displays static text.
            </summary>
      <remarks>
        <see cref="T:EO.Web.StaticColumn">
        </see> is usually used to display data
            from the data source without offering any editing support. It
            can also be used to display a fixed static text by setting
            its <see cref="P:EO.Web.StaticColumn.Text"></see> property.
            </remarks>
    </member>
    <member name="M:EO.Web.StaticColumn.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.StaticColumn"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.StaticColumn.Text">
      <summary>
            Gets or sets the static text to be displayed for this column.
            </summary>
      <remarks>
            A <see cref="T:EO.Web.StaticColumn"></see> displays data from the data
            source by default (controlled by <see cref="P:EO.Web.GridColumn.DataField"></see>
            and <see cref="P:EO.Web.GridColumn.DataFormat"></see>). However, when <see cref="P:EO.Web.StaticColumn.Text"></see>
            is set, it displays <see cref="P:EO.Web.StaticColumn.Text"></see> instead.
            </remarks>
    </member>
    <member name="T:EO.Web.ButtonColumn">
      <summary>
            Represents a column with a link button or a push button.
            </summary>
      <remarks>
        <p>
          <see cref="T:EO.Web.ButtonColumn">
          </see> displays a push button or link button in 
            the column. When clicked, it calls <see cref="P:EO.Web.Grid.ClientSideOnItemCommand"></see> 
            handler if one is supplied. Otherwise it triggers server side 
            <see cref="E:EO.Web.Grid.ItemCommand"></see> event if the grid is running in 
            server or callback mode. 
            </p>
            You can also call <a href="JSDoc.Public.Web.Grid.raiseItemCommandEvent.html">raiseItemCommandEvent</a> 
            inside <see cref="P:EO.Web.Grid.ClientSideOnItemCommand"></see> event handler to 
            explicitly pass the event to the server side to raise 
            <see cref="E:EO.Web.Grid.ItemCommand"></see> server side event. 
            </remarks>
    </member>
    <member name="M:EO.Web.ButtonColumn.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.ButtonColumn"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.ButtonColumn.ButtonStyle">
      <summary>
            Gets or sets the styles for the button.
            </summary>
    </member>
    <member name="P:EO.Web.ButtonColumn.ButtonType">
      <summary>
            Gets or sets the type of the button.
            </summary>
    </member>
    <member name="P:EO.Web.ButtonColumn.ButtonText">
      <summary>
            Gets or sets the text of the button.
            </summary>
      <remarks>
        <b>Note</b>: When this property is left empty, value acquired based on
            <see cref="P:EO.Web.GridColumn.DataField"></see> is used as button text. In that case you 
            can further customize the format of the button text with 
            <see cref="P:EO.Web.GridColumn.DataFormat"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.ButtonColumn.CommandName">
      <summary>
            Gets or sets the command name associated with the button that is
            passed to the <see cref="E:EO.Web.Grid.ItemCommand"></see> event.
            </summary>
    </member>
    <member name="T:EO.Web.CheckBoxColumn">
      <summary>
            Represents a checkbox column.
            </summary>
      <remarks>
        <see cref="T:EO.Web.CheckBoxColumn">
        </see> displays a check box. The check box can be 
            checked/unchecked any time, even if the row is not in edit mode. A list of 
            checked rows can be acquired via
            <see cref="P:EO.Web.Grid.CheckedItems"></see> on the
            server side.
            </remarks>
    </member>
    <member name="M:EO.Web.CheckBoxColumn.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.CheckBoxColumn"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.CheckBoxColumn.CheckBoxStyle">
      <summary>
            Gets or sets the styles for the check box.
            </summary>
    </member>
    <member name="T:EO.Web.TextBoxColumn">
      <summary>
            Representing a text box column.
            </summary>
      <remark>
            The text column displays a static text in regular mode and
            a text box in edit mode.
            </remark>
    </member>
    <member name="M:EO.Web.TextBoxColumn.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.TextBoxColumn"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.TextBoxColumn.TextBoxMaxLength">
      <summary>
            Gets or sets the maximum length allowed by the text box.
            </summary>
    </member>
    <member name="P:EO.Web.TextBoxColumn.TextBoxRows">
      <summary>
            Gets or sets the number of rows allowed with the textbox.
            </summary>
    </member>
    <member name="P:EO.Web.TextBoxColumn.TextBoxMode">
      <summary>
            Gets or sets the text box mode.
            </summary>
    </member>
    <member name="P:EO.Web.TextBoxColumn.TextBoxStyle">
      <summary>
            Gets or sets the style of the text box.
            </summary>
    </member>
    <member name="P:EO.Web.TextBoxColumn.TextBoxWidth">
      <summary>
            Gets or sets the width of the text box.
            </summary>
    </member>
    <member name="T:EO.Web.DateTimeColumn">
      <summary>
            Represents a column can be used to display/edit date/time values in a <see cref="T:EO.Web.Grid"></see>.
            </summary>
      <remarks>
        <see cref="T:EO.Web.DateTimeColumn">
        </see> acts like a 
            <see cref="T:EO.Web.StaticColumn"></see> when the cell
            is not in edit mode. When in edit mode, it displays a
            <see cref="T:EO.Web.DatePicker"></see> 
            for you to edit the cell. 
            <p><b>Note</b>: Using DateTimeColumn requires
            a license for the <b>Calendar</b> control.</p></remarks>
    </member>
    <member name="M:EO.Web.DateTimeColumn.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.DateTimeColumn"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.DateTimeColumn.DatePicker">
      <summary>
            Gets or sets the <see cref="P:EO.Web.DateTimeColumn.DatePicker"></see> object used by this column.
            </summary>
    </member>
    <member name="M:EO.Web.DateTimeColumn.EnsureDatePicker">
      <summary>
            Ensures <see cref="P:EO.Web.DateTimeColumn.DatePicker"></see> property is initialized.
            </summary>
    </member>
    <member name="T:EO.Web.EditCommandColumn">
      <summary>
            Represents a column in a <see cref="T:EO.Web.Grid"></see> control that
            contains <b>Edit</b>, <b>Update</b> and <b>Cancel</b> command
            buttons for editing data in each row.
            </summary>
      <remarks>
        <p>
            EditCommandColumn is similar to the standard ASP.NET EditCommandColumn.
            It displays an "Edit" link button when the row is not in edit mode, and 
            displays an "Update" and "Cancel" link button when the row is in edit mode.
            However, unlike the standard ASP.NET EditCommandColumn that triggers
            server side event, all actions for EditCommandColumn are automatically
            handled by the Grid on the client side.
            </p>
        <p>
            All changes are logged and then posted back to the server side when the
            page posts back, at which point you can either handle
            <see cref="E:EO.Web.Grid.ItemChanged"></see> event
            or use <see cref="P:EO.Web.Grid.ChangedItems"></see> property
            to get a list of all changed items in order to save the changes back into
            your data source.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.EditCommandColumn.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.EditCommandColumn"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.EditCommandColumn.ButtonStyle">
      <summary>
            Gets or sets the styles for the button.
            </summary>
    </member>
    <member name="P:EO.Web.EditCommandColumn.EditText">
      <summary>
            Gets or sets the editing button text.
            </summary>
    </member>
    <member name="P:EO.Web.EditCommandColumn.UpdateText">
      <summary>
            Gets or set the update button text.
            </summary>
    </member>
    <member name="P:EO.Web.EditCommandColumn.CancelText">
      <summary>
            Gets or set the cancel button text.
            </summary>
    </member>
    <member name="T:EO.Web.DeleteCommandColumn">
      <summary>
            Represents a column with a delete button in the <see cref="T:EO.Web.Grid"></see>.
            </summary>
      <remarks>
        <p>
          <see cref="T:EO.Web.DeleteCommandColumn">
          </see> displays a "Delete" link button. 
            When clicked, EO.Web Grid deletes the current row without posting back 
            to the server. All delete actions are logged on the client side. When the 
            page posts back, <see cref="E:EO.Web.Grid.ItemDeleted"></see> server
            side event is fired based on the logs so that your code can update the
            data source. 
            </p>
        <p>All deleted items can also be accessed through
            <see cref="P:EO.Web.Grid.DeletedItems"></see> property.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.DeleteCommandColumn.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.DeleteCommandColumn"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.DeleteCommandColumn.ButtonStyle">
      <summary>
            Gets or sets the styles for the button.
            </summary>
    </member>
    <member name="P:EO.Web.DeleteCommandColumn.DeleteText">
      <summary>
            Gets or sets the delete button text.
            </summary>
    </member>
    <member name="T:EO.Web.MaskedEditColumn">
      <summary>
            Represents a <see cref="T:EO.Web.Grid"></see> column that uses a
            <see cref="P:EO.Web.MaskedEditColumn.MaskedEdit"></see> control to edit cell data.
            </summary>
      <p>
            MaskedEditColumn acts like a <see cref="T:EO.Web.StaticColumn"></see> when the cell
            is not in edit mode. When in edit mode, it displays a
            <see cref="T:EO.Web.MaskedEdit"></see> text box
            for you to edit the cell. 
            </p>
      <p>
        <b>Note</b>: Using MaskedEditColumn requires
            a license for the <b>MaskedEdit</b> control.</p>
    </member>
    <member name="M:EO.Web.MaskedEditColumn.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.DateTimeColumn"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.MaskedEditColumn.MaskedEdit">
      <summary>
            Gets or sets the <see cref="P:EO.Web.MaskedEditColumn.MaskedEdit"></see> object used by this column.
            </summary>
    </member>
    <member name="M:EO.Web.MaskedEditColumn.EnsureMaskedEdit">
      <summary>
            Ensures the <see cref="P:EO.Web.MaskedEditColumn.MaskedEdit"></see> property is initialized.
            </summary>
    </member>
    <member name="T:EO.Web.CustomColumn">
      <summary>
            Represents a column that allows you to customize the format
            and the editing UI of in the column.
            </summary>
      <remarks>
            CustomColumn allows you to customizing displaying and editing
            in the column. See <see href="Web/Grid/custom_column.html">here</see> 
            for more details on how to use CustomColumn.
            </remarks>
    </member>
    <member name="M:EO.Web.CustomColumn.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.CustomColumn"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.CustomColumn.EditorTemplate">
      <summary>
            Gets or sets the template for editing in a <see cref="T:EO.Web.CustomColumn"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.CustomColumn.EditorInstance">
      <summary>
            Gets an instance of the editor control created based on
            <see cref="P:EO.Web.CustomColumn.EditorTemplate"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.CustomColumn.ClientSideGetText">
      <summary>
            Gets or sets the name of a client side JavaScript function to be
            called to get the HTML text to be displayed in a cell.
            </summary>
      <remarks>
        <p>
            Use this handler to customize the HTML to be displayed.
            See <a href="JSDoc.Public.Web.Handlers.grid_customcolumn_gettext.html">custom_column_gettext</a>
            for prototype information about this handler.
            </p>
      </remarks>
    </member>
    <member name="T:EO.Web.GridColumnCollection">
      <summary>
            GridColumnCollection class is a collection of <see cref="T:EO.Web.GridColumn">GridColumn</see> objects. 
            </summary>
    </member>
    <member name="P:EO.Web.GridColumnCollection.Grid">
      <summary>
            Gets the Grid control this column belongs to.
            </summary>
    </member>
    <member name="M:EO.Web.GridColumnCollection.GetEnumerator">
      <summary>
            This class implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="P:EO.Web.GridColumnCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read only. Always return <b>false</b>.		
            </summary>
    </member>
    <member name="M:EO.Web.GridColumnCollection.Add(EO.Web.GridColumn)">
      <summary>
            Adds a column to the end of the collection.
            </summary>
      <param name="column">The column to be added to the end of the collection.</param>
      <returns>The index at which the new column was added.</returns>.
        </member>
    <member name="M:EO.Web.GridColumnCollection.IndexOf(EO.Web.GridColumn)">
      <summary>
            Determines the index of a specific column in the collection.
            </summary>
      <param name="column">The column to locate in the collection.</param>
      <returns>The index of value if found in the colllection; otherwise, -1.</returns>
    </member>
    <member name="M:EO.Web.GridColumnCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the column at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the column to be removed. 
            </param>
    </member>
    <member name="M:EO.Web.GridColumnCollection.Insert(System.Int32,EO.Web.GridColumn)">
      <summary>
            Inserts an column into the collection at the specified position.
            </summary>
      <param name="index">The zero-based index at which the column should be inserted.</param>
      <param name="column">The column to be inserted into the collection.</param>
    </member>
    <member name="M:EO.Web.GridColumnCollection.Remove(EO.Web.GridColumn)">
      <summary>
            Removes the first occurrence of the column.
            </summary>
      <param name="column">The column to be removed from the collection.</param>
    </member>
    <member name="M:EO.Web.GridColumnCollection.Contains(EO.Web.GridColumn)">
      <summary>
            Determines whether the collection contains the specified column.
            </summary>
      <param name="column">The column to locate in the collection.</param>
      <returns>
        <b>true</b> if the column is found in the collection; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:EO.Web.GridColumnCollection.Clear">
      <summary>
            Removes all items from the collection. 
            </summary>
    </member>
    <member name="P:EO.Web.GridColumnCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            Always return <b>false</b>.
            </summary>
    </member>
    <member name="P:EO.Web.GridColumnCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the GridColumnCollection is synchronized (thread-safe).
            Always returns <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.GridColumnCollection.Count">
      <summary>
            Gets the number of columns contained in the collection.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of columns in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of columns contained in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.GridColumnCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the columns of the collection to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the collection. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.GridColumnCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:EO.Web.GridColumnCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the collection.
            </summary>
      <param name="c">The collection to be added. </param>
    </member>
    <member name="P:EO.Web.GridColumnCollection.Item(System.Int32)">
      <summary>
            Gets a column in the collection at specific index. 
            </summary>
      <remarks>
            Index is the zero-based. 
            In C#, this property is the indexer of <see cref="T:EO.Web.GridColumnCollection">GridColumnCollection</see> class. 
            </remarks>
    </member>
    <member name="T:EO.Web.GridItem">
      <summary>
            Represents an item in the <see cref="P:EO.Web.GridItem.Grid"></see>.
            </summary>
    </member>
    <member name="M:EO.Web.GridItem.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.GridItem"></see> object.
            </summary>
    </member>
    <member name="P:EO.Web.GridItem.Grid">
      <summary>
            Returns the <see cref="P:EO.Web.GridItem.Grid"></see> controls that owns this item.
            </summary>
    </member>
    <member name="P:EO.Web.GridItem.Index">
      <summary>
            Returns the zero based index of this item.
            </summary>
    </member>
    <member name="P:EO.Web.GridItem.Key">
      <summary>
            Gets or sets the key data for this item.
            </summary>
      <remarks>
            This property is for you to store additional data.
            EO.Web Grid does not use this property in any way.
            The initial value is populated from 
            <see cref="P:EO.Web.Grid.KeyField"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.GridItem.StyleSetID">
      <summary>
            Gets or sets the style set ID for this item.
            </summary>
      <remarks>
        <p>
            EO.Web Grid supports conditional formatting --- that is, using
            different style settings based on different values from the data
            source. In order to use this feature, you should first define
            multiple <see cref="T:EO.Web.GridItemStyleSet"></see> objects in 
            <see cref="P:EO.Web.Grid.ItemStyles"></see> collection and give each of
            the <b>GridItemStyleSet</b> a different <see cref="P:EO.Web.GridItemStyleSet.StyleSetID"></see>.
            At runtime, if an item's <see cref="P:EO.Web.GridItem.StyleSetID"></see> matches
            the <b>StyleSetID</b> of any <b>GridItemStyleSet</b>, that style set
            will be used for the item.
            </p>
        <p>
            The initial value of this property is populated from
            <see cref="P:EO.Web.Grid.StyleSetIDField"></see>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.GridItem.Deleted">
      <summary>
            Gets or sets a value indicating whether this item has been deleted.
            </summary>
      <remarks>
            When a <see cref="T:EO.Web.GridItem"></see> is deleted on the client side,
            it is not deleted from the <see cref="P:EO.Web.Grid.Items"></see> collection,
            but is only being marked as deleted.
            </remarks>
    </member>
    <member name="P:EO.Web.GridItem.Cells">
      <summary>
            Gets a collection of <see cref="T:EO.Web.GridCell"></see> objects that
            represents the cells of this <see cref="T:EO.Web.GridItem"></see>.
            </summary>
    </member>
    <member name="T:EO.Web.GridItemCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Web.GridItem"></see> objects.
            </summary>
    </member>
    <member name="M:EO.Web.GridItemCollection.GetEnumerator">
      <summary>
            This class implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="P:EO.Web.GridItemCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read only. Always return <b>false</b>.		
            </summary>
    </member>
    <member name="M:EO.Web.GridItemCollection.Add(EO.Web.GridItem)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">The column to be added to the end of the collection.</param>
      <returns>The index at which the new column was added</returns>.
        </member>
    <member name="M:EO.Web.GridItemCollection.IndexOf(EO.Web.GridItem)">
      <summary>
            Determines the index of a specific item in the collection.
            </summary>
      <param name="item">The item to locate in the collection.</param>
      <returns>The index of value if found in the colllection; otherwise, -1.</returns>
    </member>
    <member name="M:EO.Web.GridItemCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to be removed. 
            </param>
    </member>
    <member name="M:EO.Web.GridItemCollection.Insert(System.Int32,EO.Web.GridItem)">
      <summary>
            Inserts an item into the collection at the specified position.
            </summary>
      <param name="index">The zero-based index at which the item should be inserted.</param>
      <param name="item">The item to be inserted into the collection.</param>
    </member>
    <member name="M:EO.Web.GridItemCollection.Remove(EO.Web.GridItem)">
      <summary>
            Removes the first occurrence of the item.
            </summary>
      <param name="item">The item to be removed from the collection.</param>
    </member>
    <member name="M:EO.Web.GridItemCollection.Contains(EO.Web.GridItem)">
      <summary>
            Determines whether the collection contains the specified item.
            </summary>
      <param name="item">The item to locate in the collection.</param>
      <returns>
        <b>true</b> if the item is found in the collection; otherwise, <b>false</b></returns>
    </member>
    <member name="M:EO.Web.GridItemCollection.Clear">
      <summary>
            Removes all items from the collection. 
            </summary>
    </member>
    <member name="P:EO.Web.GridItemCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            Always return <b>false</b>.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the GridItemCollection is synchronized (thread-safe).
            Always returns <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.GridItemCollection.Count">
      <summary>
            Gets the number of items contained in the collection.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of item in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of columns contained in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.GridItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the items of the collection to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the collection. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.GridItemCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:EO.Web.GridItemCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the collection.
            </summary>
      <param name="c">The collection to be added. </param>
    </member>
    <member name="P:EO.Web.GridItemCollection.Item(System.Int32)">
      <summary>
            Returns the <see cref="T:EO.Web.GridItem"></see> object at the given index.
            </summary>
    </member>
    <member name="T:EO.Web.GridCellCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Web.GridCell"></see> objects.
            </summary>
    </member>
    <member name="M:EO.Web.GridCellCollection.GetEnumerator">
      <summary>
            This class implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="P:EO.Web.GridCellCollection.Item(System.Int32)">
      <summary>
            Get the <see cref="T:EO.Web.GridCell"></see> object at the given index.
            </summary>
    </member>
    <member name="P:EO.Web.GridCellCollection.Item(System.String)">
      <summary>
            Get the <see cref="T:EO.Web.GridCell"></see> object that belongs
            the <see cref="T:EO.Web.GridColumn"></see> with the given column name.
            </summary>
    </member>
    <member name="T:EO.Web.GridCell">
      <summary>
            Represents a cell in the grid.
            </summary>
    </member>
    <member name="P:EO.Web.GridCell.Column">
      <summary>
            Gets the <see cref="T:EO.Web.GridColumn"></see> to which this cell belongs.
            </summary>
    </member>
    <member name="P:EO.Web.GridCell.Value">
      <summary>
            Gets the current value of the cell.
            </summary>
    </member>
    <member name="P:EO.Web.GridCell.Style">
      <summary>
            Gets or sets the style of the cell.
            </summary>
      <remarks>
            This property contains value populated from 
            <see cref="P:EO.Web.GridColumn.StyleField">GridColumn.StyleField</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.GridCell.ColSpan">
      <summary>
            Gets or sets the number of columns occupied by the cell.
            </summary>
    </member>
    <member name="P:EO.Web.GridCell.Modified">
      <summary>
            Gets a value indicating whether the cell has been modified.
            </summary>
    </member>
    <member name="T:EO.Web.GridItemStyleSet">
      <summary>
            Represents a set of styles used to set the appearance of
            items in a grid.
            </summary>
    </member>
    <member name="M:EO.Web.GridItemStyleSet.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.GridItemStyleSet"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemStyleSet.StyleSetID">
      <summary>
            Gets or sets the ID of the style set.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemStyleSet.ItemStyle">
      <summary>
            Specifies the appearance setting to be applied on each item.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemStyleSet.AlternatingItemStyle">
      <summary>
            Specifies the appearance setting to be applied on each alternating item.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemStyleSet.ItemHoverStyle">
      <summary>
            Specifies the appearance setting to be applied on each item when mouse is over the item.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemStyleSet.AlternatingItemHoverStyle">
      <summary>
            Specifies the appearance setting to be applied on each alternating item when mouse is over the item.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemStyleSet.SelectedStyle">
      <summary>
            Specifies the style to be applied when an item or cell is selected.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemStyleSet.EditSelectedStyle">
      <summary>
            Specifies the style to be applied when an item or cell is selected and in edit mode.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemStyleSet.SelectedHoverStyle">
      <summary>
            Specifies the style to be applied when an item or cell is selected and the mouse is over the item or cell.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemStyleSet.FixedColumnCellStyle">
      <summary>
            Specifies the style to be applied to cells of fixed columns.
            </summary>
    </member>
    <member name="P:EO.Web.GridItemStyleSet.CellStyle">
      <summary>
            Specifies styles to be applied to grid cells.
            </summary>
    </member>
    <member name="T:EO.Web.GridItemStyleSetCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Web.GridItemStyleSet"></see> object.
            </summary>
    </member>
    <member name="M:EO.Web.GridItemStyleSetCollection.GetItemByID(System.String)">
      <summary>
            Gets the style set with the specified ID from the collection.
            </summary>
      <param name="id">The ID of the style set.</param>
      <returns>The <see cref="T:EO.Web.GridItemStyleSet"></see> object with the specified ID.</returns>
    </member>
    <member name="P:EO.Web.GridItemStyleSetCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
            Gets a value indicating whether access to the MenuItemLookCollection is synchronized (thread-safe).
            Always return <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.GridItemStyleSetCollection.Count">
      <summary>
            Gets the number of elements contained in this <see cref="T:EO.Web.LookItemCollection"></see> object.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of elements in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of elements contained 
            in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.GridItemStyleSetCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:EO.Web.LookItemCollection">MenuItemLookCollection</see> to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from <see cref="T:EO.Web.MenuItemCollection">MenuItemLookCollection</see>. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.GridItemStyleSetCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:EO.Web.LookItemCollection"></see>.
            </summary>
    </member>
    <member name="M:EO.Web.GridItemStyleSetCollection.Clear">
      <summary>
            Clears the collection.
            </summary>
    </member>
    <member name="M:EO.Web.GridItemStyleSetCollection.Remove(System.String)">
      <summary>
            Removes a style set from the collection.
            </summary>
      <param name="id">The ID of the style set to be removed.</param>
    </member>
    <member name="M:EO.Web.GridItemStyleSetCollection.Add(System.String)">
      <summary>
            Create a new style set and add it into the collection.
            </summary>
      <param name="styleSetId">The ID of the new style set.</param>
      <returns>
            Returns the newly created style set.
            </returns>
    </member>
    <member name="M:EO.Web.GridItemStyleSetCollection.Add(EO.Web.GridItemStyleSet)">
      <summary>
            Adds a style set into the collection.
            </summary>
      <param name="styleSet">The new style set to be added. </param>
    </member>
    <member name="P:EO.Web.GridItemStyleSetCollection.Default">
      <summary>
            Gets the default style set.
            </summary>
    </member>
    <member name="T:EO.Web.ImageZoom">
      <summary>
            Dynamically zooms in and out an image.
            </summary>
    </member>
    <member name="M:EO.Web.ImageZoom.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.ImageZoom"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.AlternateText">
      <summary>
            Gets or sets the alternate text to display when an image is not available for the device. The default value is an empty string ("").
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.ImageAlign">
      <summary>
            Gets or sets the alignment of the image.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.SmallImageUrl">
      <summary>
            Gets or sets the URL of the small image initially displayed.
            </summary>
      <remarks>
        <see cref="T:EO.Web.ImageZoom">
        </see> zooms into the big image specified
            by <see cref="P:EO.Web.ImageZoom.BigImageUrl"></see> when the small image is clicked.
            </remarks>
    </member>
    <member name="P:EO.Web.ImageZoom.BigImageUrl">
      <summary>
            Gets or set the big image URL.
            </summary>
      <remarks>
        <see cref="T:EO.Web.ImageZoom">
        </see> zooms into the big image specified
            by <see cref="P:EO.Web.ImageZoom.BigImageUrl"></see> when the small image is clicked.
            </remarks>
    </member>
    <member name="P:EO.Web.ImageZoom.BackShadeColor">
      <summary>
            Specifies the shade of color for the background when the zoomed out image is shown.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.BackShadeOpacity">
      <summary>
            Gets or sets the opacity level for the back shade color. 
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.Description">
      <summary>
            Gets or sets the text to be displayed below the large image.
            </summary>
      <remarks>
            HTML Markup can be used to specify the text styles.
            </remarks>
    </member>
    <member name="P:EO.Web.ImageZoom.EffectType">
      <summary>
            Gets or sets the type of zoom in/out effect to be played.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.EffectDuration">
      <summary>
            Gets or sets the effect duration in millisecond.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.ClientSideBeforeZoomIn">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called before zooming in.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.ClientSideAfterZoomIn">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called after zoomed in.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.ClientSideBeforeZoomOut">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called before zoom out.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.ClientSideAfterZoomOut">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called after zoomed out.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.PositionX">
      <summary>
            Gets or sets the horizontal positioning mode.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.PositionY">
      <summary>
            Gets or sets the vertical positioning mode.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.OffsetX">
      <summary>
            Gets or sets the horizontal offset in pixel when <see cref="P:EO.Web.ImageZoom.PositionX"></see>
            is set to <see cref="F:EO.Web.ImageZoomPosition.Relative"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.OffsetY">
      <summary>
            Gets or sets the horizontal offset in pixel when <see cref="P:EO.Web.ImageZoom.PositionY"></see>
            is set to <see cref="F:EO.Web.ImageZoomPosition.Relative"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.LoadingPanelID">
      <summary>
            Gets or sets the ID of a control that will be displayed when
            the image is loading.
            </summary>
    </member>
    <member name="P:EO.Web.ImageZoom.ZoomPanelTemplate">
      <summary>
            Gets or sets custom zoom panel template.
            </summary>
      <remarks>
            Zoom panel is the panel that displays the big image when the
            small image is clicked.
            </remarks>
    </member>
    <member name="P:EO.Web.ImageZoom.ZoomPanelStyle">
      <summary>
            Gets or sets the style of the zoom panel.
            </summary>
      <remarks>
            Zoom panel is the panel that displays the big image when the
            small image is clicked.
            </remarks>
    </member>
    <member name="T:EO.Web.ImageZoomEffectType">
      <summary>
            Specifies zoom in and zoom out effect type.
            </summary>
    </member>
    <member name="F:EO.Web.ImageZoomEffectType.Zoom">
      <summary>
            Zoom effect.
            </summary>
    </member>
    <member name="F:EO.Web.ImageZoomEffectType.Fade">
      <summary>
            Fade effect.
            </summary>
    </member>
    <member name="T:EO.Web.ImageZoomPosition">
      <summary>
            Specifies horizontal or vertical positioning mode for an <see cref="T:EO.Web.ImageZoom"></see> control.
            </summary>
    </member>
    <member name="F:EO.Web.ImageZoomPosition.ScreenCenter">
      <summary>
            The zoomed in image is placed at the center of the browser window.
            </summary>
    </member>
    <member name="F:EO.Web.ImageZoomPosition.ImageCenter">
      <summary>
            The zoomed in image has the same center position as the original image.
            </summary>
    </member>
    <member name="F:EO.Web.ImageZoomPosition.Relative">
      <summary>
            The zoomed in image's position is relative to the position of the
            original image by an offset set either by <see cref="P:EO.Web.ImageZoom.OffsetX"></see>
            or <see cref="P:EO.Web.ImageZoom.OffsetY"></see> property.
            </summary>
    </member>
    <member name="T:EO.Web.DataBinding">
      <summary>
            Represents mapping between data source field and navigation item's property. 
            The mapping is used in data binding process to assign navigation item's property
            to the value specified in corresponding data source field.
            </summary>
      <remarks>
        <p>
            Represents mapping between data source field and navigation item's property. 
            The mapping is used in data binding process to assign navigation item's property
            to the value specified in corresponding data source field.
            </p>
        <p>
            See <see href="Web/MenuCommon/DataBinding/populate_dataset.html">populating from DataSet</see> for
            examples.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.DataBinding.Depth">
      <summary>
            Specifies the hierarchical level this 
            DataBinding applies to. 
            </summary>
      <remarks>
        <p>
            Specifies the hierarchical level 
            this DataBinding applies to. <b>Depth</b> starts with zero.
            </p>
        <p>	 
            For example, 
            when a <see cref="M:EO.Web.BaseNavigator.DataBind">menu's DataBind()</see> is called,
            if <b>Depth</b> is 0, items in the top group will have the target property assigned to the value from 
            the corresponding data field. <br />
            In another example, when a second level 
            <see cref="M:EO.Web.NavigationItemGroup.DataBind">menu group's DataBind</see> is called,
            if <b>Depth</b> is 0, items from the second level menu group
            will have the target property assigned to the value from the corresponding data field. 
            </p>
        <p>
            Here's a list of frequently used properties when defining a DataBinding:
            <list type="bullet"><item>Use <see cref="P:EO.Web.DataBinding.Property"></see> to specify the target  
            property of a navigation item to be assigned;</item><item>
            Use <see cref="P:EO.Web.DataBinding.DataField"></see> to specify what value
            from the database to assign to the target property; 
            </item><item>
            Use <see cref="P:EO.Web.DataBinding.Depth"></see> to specify which level of 
            the item the above Property and DataField mapping applies.
            </item></list></p>
        <p>
            Setting <b>Depth</b> to -1 to apply current DataBinding to items at all levels.
            </p>
        <p>
            See <see href="Web/MenuCommon/DataBinding/DataBinding_overview.html">data binding</see> for more information.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.DataBinding.DataField">
      <summary>
            Specifies the field name or property name of the source data item. 
            </summary>
      <remarks>
        <p>
            Specifies the field name or property name of the source data item. The value of the source
            data item will assign to the corresponding property specified by <see cref="P:EO.Web.DataBinding.Property"></see>.
            </p>
        <p>
            When the data source is a 
            <see cref="T:System.Data.DataSet">DataSet</see>, 
            <see cref="T:System.Data.DataTable">DataTable</see>, 
            <see cref="T:System.Data.DataView">DataView</see> or any objects that implements 
            <see cref="T:System.Data.IDataReader">IDataReader</see>,
            <b>DataField</b> specifies the data field name, otherwise <b>DataField</b>
            is interpreted as property name.
            </p>
        <p>
            Here's a list of frequently used properties when defining a DataBinding:
            <list type="bullet"><item>Use <see cref="P:EO.Web.DataBinding.Property"></see> to specify the target  
            property of a navigation item to be assigned;</item><item>
            Use <see cref="P:EO.Web.DataBinding.DataField"></see> to specify what value
            from the database to assign to the target property; 
            </item><item>
            Use <see cref="P:EO.Web.DataBinding.Depth"></see> to specify which level of 
            the item the above Property and DataField mapping applies.
            </item></list></p>
        <p>
            See <see href="Web/MenuCommon/DataBinding/populate_dataset.html">populating from DataSet</see> for
            examples.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.DataBinding.DataFormatString">
      <summary>
            Specifies the format string used by this DataBinding.
            </summary>
      <remarks>
        <p>
            If specified, the navigation control will use it to format the value from 
            the source data field before assigning it to item's target property.
            The format string must be in the form of "{0:[,alignment][:formatString]}",
            where <i>alignment</i> and <i>formatString</i> are optional. Navigation control
            uses this property to call <see cref="M:System.String.Format(System.String,System.Object[])">String.Format</see> to
            format the data.
            </p>
        <p>
            The default value is <b>null</b>, indicating the navigation control will use 
            the source value's <see cref="M:System.Object.ToString"></see> to assign to the target property.
            </p>
        <p>
            See <see href="Web/MenuCommon/DataBinding/populate_dataset.html">populating from DataSet</see> for
            examples.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.DataBinding.Property">
      <summary>
            Specifies the target item's property name. 
            </summary>
      <remarks>
        <p>
            During data binding, 
            the target item's property value is assigned to the value
            specified by <see cref="P:EO.Web.DataBinding.DataField"></see> property, which is retrieved from DataSource.
            </p>
        <p>
            Here's a list of frequently used properties when defining a DataBinding:
            <list type="bullet"><item>Use <see cref="P:EO.Web.DataBinding.Property"></see> to specify the target  
            property of a navigation item to be assigned;</item><item>
            Use <see cref="P:EO.Web.DataBinding.DataField"></see> to specify what value
            from the database to assign to the target property; 
            </item><item>
            Use <see cref="P:EO.Web.DataBinding.Depth"></see> to specify which level of 
            the item the above Property and DataField mapping applies.
            </item></list></p>
            The following code demonstrates how to define
            <b>DataBinding</b> to specify an item to acquire its LookID from
            data field "look".
            <code lang="HTML">
            &lt;eo:DataBinding
                DataField="look" Property="LookID"&gt;
            &lt;/eo:DataBinding&gt;
            </code><p>
            Use "-" to concatenate sub object's properties, for example, the following
            code demonstrates how to define 
            <b>DataBinding</b> to specify an item to acquire its left icon URL from
            data field "icon": 
            <code lang="HTML">
            &lt;eo:DataBinding
                DataField="icon" Property="LeftIcon-Url"&gt;
            &lt;/eo:DataBinding&gt;
            </code></p><p>
            See <see href="Web/MenuCommon/DataBinding/populate_dataset.html">populating from DataSet</see> for
            more details.
            </p></remarks>
    </member>
    <member name="T:EO.Web.DataBindingCollection">
      <summary>
            Provides a collection of <see cref="T:EO.Web.DataBinding"></see> objects.
            </summary>
      <remarks>
        <p>
            You can specify a collection of DataBinding on the following types of object:
            <list type="bullet"><item>Controls inherited from <see cref="T:EO.Web.BaseNavigator"></see> (E.g. Menu, SlideMenu, TabStrip etc) </item><item>Groups inherited from <see cref="T:EO.Web.NavigationItemGroup"></see> (E.g. MenuGroup, ToolbarItemGroup, TreeNodeGroup)</item></list>	
            Both control and group have <b>Bindings</b> property 
            which contains a collection of <see cref="T:EO.Web.DataBinding"></see>
            objects to customize mappings between the data source and the property of a navigation item.
            </p>
        <p>
            See <see href="Web/MenuCommon/DataBinding/populate_dataset.html">populating from DataSet</see> or 
            for <see href="Web/MenuCommon/DataBinding/populate_table.html">populating from DataTable, DataView or IDataReader</see> for 
            more details.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.DataBindingCollection.Add(EO.Web.DataBinding)">
      <summary>
            Adds a new <see cref="T:EO.Web.DataBinding"></see> into the collection.
            </summary>
      <param name="binding">The <see cref="T:EO.Web.DataBinding"></see> object to be added.</param>
      <returns>
            The index at which the <see cref="T:EO.Web.DataBinding"></see> has been added.
            </returns>
    </member>
    <member name="P:EO.Web.DataBindingCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:EO.Web.DataBinding"></see> object at the specified index.
            </summary>
      <remarks>
            Index is the zero-based index of the <see cref="T:EO.Web.DataBinding"></see> to get or set. 
            In C#, this property is the indexer of <see cref="T:EO.Web.DataBindingCollection"></see> class. 
            </remarks>
    </member>
    <member name="M:EO.Web.DataBindingCollection.Remove(EO.Web.DataBinding)">
      <summary>
            Removes a <see cref="T:EO.Web.DataBinding"></see> from the collection.
            </summary>
      <param name="binding">
            The <see cref="T:EO.Web.DataBinding"></see> object to be removed.
            </param>
    </member>
    <member name="M:EO.Web.DataBindingCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:EO.Web.DataBinding"></see> object at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the <see cref="T:EO.Web.DataBinding"></see> to be removed.
            </param>
    </member>
    <member name="T:EO.Web.SpecialLookIDs">
      <summary>
            This class defines the names of the built-in look IDs.
            </summary>
    </member>
    <member name="F:EO.Web.SpecialLookIDs.None">
      <summary>
            The ID of the empty look item. No appearance setting is defined. 
            </summary>
    </member>
    <member name="F:EO.Web.SpecialLookIDs.Default">
      <summary>
            The ID of the built-in "_default" look item. This is the default look for all items.
            </summary>
      <remarks>
            The built-in "_default" look is used to control the appearance setting for 
            all items by default. 
            </remarks>
    </member>
    <member name="F:EO.Web.SpecialLookIDs.Separator">
      <summary>
            The ID of the built-in "_Separator" look item. This is the default look for all separator item.
            </summary>
      <remarks>
            The built-in "_Separator" look is used to control the appearance setting for 
            separators, which is used to divide items. 
            </remarks>
    </member>
    <member name="F:EO.Web.SpecialLookIDs.TopGroup">
      <summary>
            The ID of the built-in "_TopGroup" look item. This is the default look for top level group.
            </summary>
      <remarks>
            The built-in "_TopGroup" look is used to control the appearance setting for 
            the entire top level group, e.g, the background, font, border etc. 
            <p><b>Note:</b><br />
            Note this look does not control the appearance of the top level items. The appearance of the
            top level items and their sub groups are controlled by the <b>_TopLevelItem</b> look.
            </p></remarks>
    </member>
    <member name="F:EO.Web.SpecialLookIDs.TopLevelItem">
      <summary>
            The ID of the built-in "_TopLevelItem" look item. This is the default look for all top level items.
            </summary>
      <remarks>
            The built-in "_TopLevelItem" look is used to control the appearance setting for 
            each top level items and its child group. 
            </remarks>
    </member>
    <member name="F:EO.Web.SpecialLookIDs.Auto">
      <summary>
            Relies on the control to determine the ID of the look item. 
            </summary>
      <remarks>
            When <see cref="P:EO.Web.NavigationItem.LookID">LookID</see> property is set to <b>Auto</b>, the following logic is used to 
            determine which look to use:
            <list type="number"><item>Uses look ID from skin</item><item>
            If skin is not defined, then uses 
            the parent group's <see cref="P:EO.Web.NavigationItemGroup.DefaultItemLookID"></see>;
            </item></list>
            If <b>DefaultItemLookID</b> is not defined, 
            one of the built-in looks will be used:
            <list type="table"><listheader><term>built-in Look</term><description>Remarks</description></listheader><item><term>_TopGroup</term><description><p>
            	Use this look to control the appearance
            	settings of the <b>entire top level group</b>. 
            	</p><p>
            	Note this look does not control the appearance of the top level items. The appearance of the
            	top level items and their sub groups are controlled by the <b>_TopLevelItem</b> look.
            	</p></description></item><item><term>_TopLevelItem</term><description>
            	Use this look to control the appearance setting
            	for the <b>individual top level items</b>. 
            	</description></item><item><term>_Default</term><description>
            	Use this look to control the appearance setting for 
            	all items by default. 
            	For example,
            	if <b>_TopLevelItem</b> look is not defined, _Default look will be applied to the top level items.
            	</description></item></list><p>See <see href="Web/MenuCommon/LookSkinAndTheme/lookskinTheme.html">look, skin &amp; theme</see> 
            for more details.</p></remarks>
    </member>
    <member name="T:EO.Web.LookItemCollection">
      <summary>
            Maintains all look items for a  navigation control.
            </summary>
    </member>
    <member name="M:EO.Web.LookItemCollection.GetItemByID(System.String)">
      <summary>
            Gets the item with the specified ID from the collection.
            </summary>
      <param name="id">The ID of the item.</param>
      <returns>The NavigationItem object with the specified ID.</returns>
    </member>
    <member name="P:EO.Web.LookItemCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
            Gets a value indicating whether access to the MenuItemLookCollection is synchronized (thread-safe).
            Always return <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.LookItemCollection.Count">
      <summary>
            Gets the number of elements contained in this <see cref="T:EO.Web.LookItemCollection"></see> object.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of elements in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of elements contained 
            in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.LookItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:EO.Web.LookItemCollection">MenuItemLookCollection</see> to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from <see cref="T:EO.Web.MenuItemCollection">MenuItemLookCollection</see>. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.LookItemCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:EO.Web.LookItemCollection"></see>.
            </summary>
    </member>
    <member name="M:EO.Web.LookItemCollection.Clear">
      <summary>
            Clears the collection.
            </summary>
    </member>
    <member name="M:EO.Web.LookItemCollection.Remove(System.String)">
      <summary>
            Removes a look item from the collection.
            </summary>
      <param name="id">The ID of the look item to be removed.</param>
      <remarks>
            Use <b>Remove</b> method to remove the look from the collection. Note that if any of the menu item's <b>LookID</b>
            property is pointing to this look, those menu items will use default or parent's look. 
            <p><b>Note:</b><br />
            The following built-in special look items can not be removed: 
            <list type="bullet"><item><see cref="F:EO.Web.SpecialLookIDs.Default">SpecialLookIDs.Default</see></item><item><see cref="F:EO.Web.SpecialLookIDs.Separator">SpecialLookIDs.Separator</see></item></list>
            Calling <b>Remove</b> method with these IDs has no effect. 
            </p></remarks>
    </member>
    <member name="M:EO.Web.LookItemCollection.Add(System.String)">
      <summary>
            Create a new look item and add it into the collection.
            </summary>
      <param name="lookId">The ID of the new look.</param>
      <remarks>
            Use <b>Add</b> method to add a new look item into the collection 
            that <see cref="T:EO.Web.Menu"></see> maintains in <see cref="P:EO.Web.Menu.LookItems"></see> property.
            You need to make sure that the ID of the look item is unique; otherwise, 
            if the item with the same name already exists in the collection, the old item is replaced by the new item. 
            </remarks>
      <returns>
            Returns the newly created look item.
            </returns>
    </member>
    <member name="M:EO.Web.LookItemCollection.Add(EO.Web.NavigationItem)">
      <summary>
            Adds a look item into the collection.
            </summary>
      <param name="item">The new look item to be added. </param>
      <remarks>
            Use <b>Add</b> method to add a new look item into the collection 
            that <b cref="T:EO.Web.Menu"></b> maintains in <see cref="P:EO.Web.Menu.LookItems"></see> property.
            You need to make sure that the ID of the look item is unique; otherwise, 
            if the item with the same name already exists in the collection, the old item will be replaced by the new item. 
            </remarks>
    </member>
    <member name="T:EO.Web.MaskedEdit">
      <summary>
            Provides an enhanced text box that can restrict user
            input to certain patterns.
            </summary>
    </member>
    <member name="M:EO.Web.MaskedEdit.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.MaskedEdit"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.MaskedEdit.Text">
      <summary>
            Gets or sets the contents of the textbox.
            </summary>
      <remarks>
        <p>
            This property is being automatically formatted based on
            <see cref="P:EO.Web.MaskedEdit.Segments"></see>. 
            </p>
        <p>
            You can also use each segment's <see cref="P:EO.Web.MaskedEditSegment.Text"></see>
            property to access each segment's contents. This can be useful when
            you need to compose the final value from each component's value,
            for example, a DateTime value based on the year, month and day
            components.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MaskedEdit.IsValid">
      <summary>
            Returns a value indicating whether the current content is valid.
            </summary>
    </member>
    <member name="P:EO.Web.MaskedEdit.Segments">
      <summary>
            Returns a collection of <see cref="T:EO.Web.MaskedEditSegment"></see>
            objects that defines input segments.
            </summary>
      <remarks>
        <p>
            EO.Web MaskedEdit supports multiple segments with each of them having any of the following segment types: 
            <list type="bullet"><item><b>Literal</b>. Literal segment are readonly segment in the textbox;</item><item><b>Number</b>. Use number segment to enter numeric values;</item><item><b>Choice</b>. Use choice segment to enter choice values;</item><item><b>Mask</b>. Use mask segment to specify a mask value;</item></list>
            When using only one <b>Mask</b> segment, EO.Web MaskedEdit works
            very much like a traditional MaskedEdit control. However, supporting
            multiple type of segments enables the control to support much
            more sophisticated input patterns.
            </p>
        <p>
            For more information about how to use segments, see 
            <a href="Web/MaskedEdit/segments.html">Understanding Segments</a>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MaskedEdit.Hint">
      <summary>
            Sets or gets the hint text of the edit control.
            </summary>
      <remarks>
        <p>
            A "hint text" is a text displayed to hint user what to enter. For example,
            it makes sense to set the hint text to "Enter start date here" for 
            a <see cref="T:EO.Web.MaskedEdit"></see> control that is used to enter "start date".
            </p>
        <p>
            The "hint text" is only displayed when the edit control has no value. Once
            user started to type in contents, the "hint text" will disappear and the
            edit box will displays its real contents based on the segments constrains.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MaskedEdit.Mask">
      <summary>
            Gets or sets the mask for the <see cref="T:EO.Web.MaskedEdit"></see> control.
            </summary>
      <remarks>
            Use this property to instruct the <see cref="T:EO.Web.MaskedEdit"></see> control
            to only use one <see cref="F:EO.Web.MaskedEditSegmentType.Mask"></see> segment
            and also set or get the <see cref="P:EO.Web.MaskedEditSegment.Mask"></see> property
            of that segment.
            </remarks>
    </member>
    <member name="P:EO.Web.MaskedEdit.PromptChar">
      <summary>
            Gets or sets the prompt char for the edit control.
            </summary>
    </member>
    <member name="P:EO.Web.MaskedEdit.TextBoxStyle">
      <summary>
            Gets or sets the style of the text box.
            </summary>
    </member>
    <member name="P:EO.Web.MaskedEdit.AutoPostBack">
      <summary>
            Gets or sets a value that indicates whether an automatic postback to the server occurs when the control loses focus.
            </summary>
    </member>
    <member name="P:EO.Web.MaskedEdit.ClientSideOnChange">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called when the MaskedEdit 
            contents changes.
            </summary>
      <p>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for prototype information about this handler. 
            </p>
      <p>
            This event is not fired while the user is typing, but rather when the user commits 
            the change by leaving the text box that has focus.
            </p>
    </member>
    <member name="E:EO.Web.MaskedEdit.TextChanged">
      <summary>
            Occurs when the content of the <see cref="T:EO.Web.MaskedEdit"></see> control changes between posts to the server.
            </summary>
    </member>
    <member name="T:EO.Web.MaskedEditValidator">
      <summary>
            Used to validate the input of the associated <see cref="T:EO.Web.MaskedEdit"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.MaskedEditValidator.ControlToValidate">
      <summary>
            Gets or sets the <see cref="T:EO.Web.MaskedEdit"></see> control to validate.
            </summary>
    </member>
    <member name="T:EO.Web.MaskedEditSegmentType">
      <summary>
            Specifies the segment type of a <see cref="T:EO.Web.MaskedEditSegment"></see> object.
            </summary>
    </member>
    <member name="F:EO.Web.MaskedEditSegmentType.Literal">
      <summary>
            The segment's <see cref="P:EO.Web.MaskedEditSegment.Text"></see> contains a literal value
            that appears as themselves and can not be moved or deleted by
            the user.
            </summary>
    </member>
    <member name="F:EO.Web.MaskedEditSegmentType.Number">
      <summary>
            The segment would be used to enter a number and its 
            <see cref="P:EO.Web.MaskedEditSegment.MaxValue"></see> and
            <see cref="P:EO.Web.MaskedEditSegment.MinValue"></see> would
            contains the maximum and minimum allowed value for
            the segment.
            </summary>
    </member>
    <member name="F:EO.Web.MaskedEditSegmentType.Choice">
      <summary>
            The segment would be used for the user to choose from
            a list of options provided through the segment's
            <see cref="P:EO.Web.MaskedEditSegment.Choices"></see> property.
            </summary>
    </member>
    <member name="F:EO.Web.MaskedEditSegmentType.Mask">
      <summary>
            The segment would restrict the user's input based
            on a pattern set by <see cref="P:EO.Web.MaskedEditSegment.Mask"></see>,
            which can contain many pre-defined mask elements.
            </summary>
    </member>
    <member name="T:EO.Web.MaskedEditSegment">
      <summary>
            Represents a segment in a <see cref="T:EO.Web.MaskedEdit"></see> control.
            </summary>
    </member>
    <member name="M:EO.Web.MaskedEditSegment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.MaskedEditSegment"></see> class.
            </summary>
    </member>
    <member name="M:EO.Web.MaskedEditSegment.CreateMaskSegment(System.String)">
      <summary>
            Creates a <see cref="F:EO.Web.MaskedEditSegmentType.Mask"></see> segment.
            </summary>
      <param name="mask">The mask for the mask segment.</param>
      <returns>Returns the newly created mask segment.</returns>
    </member>
    <member name="M:EO.Web.MaskedEditSegment.CreateLiteralSegment(System.String)">
      <summary>
            Creates a <see cref="F:EO.Web.MaskedEditSegmentType.Literal"></see> segment.
            </summary>
      <param name="literal">The literal for the literal segment.</param>
      <returns>Returns the newly created literal segment.</returns>
    </member>
    <member name="M:EO.Web.MaskedEditSegment.CreateChoiceSegment(System.String)">
      <summary>
            Creates a <see cref="F:EO.Web.MaskedEditSegmentType.Choice"></see> segment.
            </summary>
      <param name="choices">The choices for the choice segment.</param>
      <returns>Returns the newly created choice segment.</returns>
    </member>
    <member name="M:EO.Web.MaskedEditSegment.CreateNumberSegment(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a <see cref="F:EO.Web.MaskedEditSegmentType.Number"></see> segment.
            </summary>
      <param name="minValue">The minimum value for the number segment.</param>
      <param name="maxValue">The maximum value for the number segment.</param>
      <param name="decimal">The number of decimal places.</param>
      <returns>Returns the newly created number segment.</returns>
    </member>
    <member name="M:EO.Web.MaskedEditSegment.CreateNumberSegment(System.Int32,System.Int32)">
      <summary>
            Creates a <see cref="F:EO.Web.MaskedEditSegmentType.Number"></see> segment.
            </summary>
      <param name="minValue">The minimum value for the number segment.</param>
      <param name="maxValue">The maximum value for the number segment.</param>
      <returns>Returns the newly created number segment.</returns>
    </member>
    <member name="P:EO.Web.MaskedEditSegment.SegmentType">
      <summary>
            Gets or sets the type of the segment.
            </summary>
    </member>
    <member name="P:EO.Web.MaskedEditSegment.IsRequired">
      <summary>
            Gets or sets a value indicating whether this segment is required.
            </summary>
      <remarks>
            This property is ignored if <see cref="P:EO.Web.MaskedEditSegment.SegmentType"></see> is
            <see cref="F:EO.Web.MaskedEditSegmentType.Mask"></see>, in which case each
            character, not the whole segment, can be specified as required or
            optional by the input mask.
            </remarks>
    </member>
    <member name="P:EO.Web.MaskedEditSegment.Text">
      <summary>
            Gets or sets the text of the segment.
            </summary>
      <remarks>
        <p>
            At runtime, this property contains the contents of the segment 
            that are formatted based on other properties of the segment.
            The value is not formatted at design time, allowing you to set
            an initial value for the segment.
            </p>
        <p>
            Usually you would use <see cref="P:EO.Web.MaskedEdit.Text">MaskedEdit.Text</see>
            property to access the text of the whole edit control. However,
            sometimes it can be useful when
            you need to compose the final value from each component's value,
            for example, a DateTime value based on the year, month and day
            components, in which case you can use each segment's
            <see cref="P:EO.Web.MaskedEditSegment.Text"></see> property to derive individual
            component values.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MaskedEditSegment.MinValue">
      <summary>
            Gets or sets the minimum value of the segment.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.MaskedEditSegment.SegmentType"></see>
            is <see cref="F:EO.Web.MaskedEditSegmentType.Number"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.MaskedEditSegment.MaxValue">
      <summary>
            Gets or sets the maximum value of the segment.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.MaskedEditSegment.SegmentType"></see>
            is <see cref="F:EO.Web.MaskedEditSegmentType.Number"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.MaskedEditSegment.Decimals">
      <summary>
            Specifies the desired number of decimal places for a Number segment.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.MaskedEditSegment.SegmentType"></see>
            is <see cref="F:EO.Web.MaskedEditSegmentType.Number"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.MaskedEditSegment.Choices">
      <summary>
            Gets or sets the list of choices separated by '|' for this segment.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.MaskedEditSegment.SegmentType"></see>
            is <see cref="F:EO.Web.MaskedEditSegmentType.Choice"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.MaskedEditSegment.Mask">
      <summary>
            Gets or sets the mask for this segment.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.MaskedEditSegment.SegmentType"></see>
            is <see cref="F:EO.Web.MaskedEditSegmentType.Mask"></see>. See
            <a href="Web/MaskedEdit/masks.html">here</a> for a list
            of all supported mask elements.
            </remarks>
    </member>
    <member name="P:EO.Web.MaskedEditSegment.IsValid">
      <summary>
            Gets a value indicating whether the input is valid.
            </summary>
    </member>
    <member name="T:EO.Web.MaskedEditSegmentCollection">
      <summary>
        <see cref="T:EO.Web.MaskedEditSegmentCollection">
        </see> maintains a collection of 
            <see cref="T:EO.Web.MaskedEditSegment"></see> objects.
            </summary>
    </member>
    <member name="M:EO.Web.MaskedEditSegmentCollection.GetEnumerator">
      <summary>
            This class implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="P:EO.Web.MaskedEditSegmentCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read only. Always return <b>false</b>.		
            </summary>
    </member>
    <member name="M:EO.Web.MaskedEditSegmentCollection.Add(EO.Web.MaskedEditSegment)">
      <summary>
            Adds a segment to the end of the collection.
            </summary>
      <param name="segment">The segment to be added to the end of the collection.</param>
      <returns>The index at which the new segment was added</returns>.
        </member>
    <member name="M:EO.Web.MaskedEditSegmentCollection.IndexOf(EO.Web.MaskedEditSegment)">
      <summary>
            Determines the index of a specific segment in the collection.
            </summary>
      <param name="segment">The segment to locate in the collection.</param>
      <returns>The index of value if found in the colllection; otherwise, -1.</returns>
    </member>
    <member name="M:EO.Web.MaskedEditSegmentCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the segment at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the segment to be removed. 
            </param>
    </member>
    <member name="M:EO.Web.MaskedEditSegmentCollection.Insert(System.Int32,EO.Web.MaskedEditSegment)">
      <summary>
            Inserts an segment into the collection at the specified position.
            </summary>
      <param name="index">The zero-based index at which the segment should be inserted.</param>
      <param name="segment">The segment to be inserted into the collection.</param>
    </member>
    <member name="M:EO.Web.MaskedEditSegmentCollection.Remove(EO.Web.MaskedEditSegment)">
      <summary>
            Removes the first occurrence of the segment.
            </summary>
      <param name="segment">The segment to be removed from the collection.</param>
    </member>
    <member name="M:EO.Web.MaskedEditSegmentCollection.Contains(EO.Web.MaskedEditSegment)">
      <summary>
            Determines whether the collection contains the specified segment.
            </summary>
      <param name="segment">The segment to locate in the collection.</param>
      <returns>
        <b>true</b> if the segment is found in the collection; otherwise, <b>false</b></returns>
    </member>
    <member name="M:EO.Web.MaskedEditSegmentCollection.Clear">
      <summary>
            Removes all items from the collection. 
            </summary>
    </member>
    <member name="P:EO.Web.MaskedEditSegmentCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            Always return <b>false</b>.
            </summary>
    </member>
    <member name="P:EO.Web.MaskedEditSegmentCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the MaskEditSegmentCollection is synchronized (thread-safe).
            Always returns <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.MaskedEditSegmentCollection.Count">
      <summary>
            Gets the number of segments contained in the collection.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of segments in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of segments contained in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.MaskedEditSegmentCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the segments of the collection to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the collection. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.MaskedEditSegmentCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:EO.Web.MaskedEditSegmentCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the collection.
            </summary>
      <param name="c">The collection to be added. </param>
    </member>
    <member name="P:EO.Web.MaskedEditSegmentCollection.Item(System.Int32)">
      <summary>
            Gets a segment in the collection at specific index. 
            </summary>
      <remarks>
            Index is the zero-based. 
            In C#, this property is the indexer of <see cref="T:EO.Web.MaskedEditSegmentCollection">MaskedEditSegmentCollection</see> class. 
            </remarks>
    </member>
    <member name="T:EO.Web.BaseMenuItem">
      <summary>
            Represents the abstract parent class of MenuItem and TabItem. 
            This class is for internal use only.	
            </summary>
      <remarks> 
            A BaseMenuItem inherits from NavigationItem. In addition to 
            NavigationItem's functionalities, it can be an image-only item, or an item with LeftIcon, Text and RightIcon.
            You can specify different URLs for BaseMenuItem's images. 
            The following table lists some important <see cref="T:EO.Web.BaseMenuItem"></see> properties: 
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:EO.Web.BaseMenuItem.LeftIcon">LeftIcon</see></term><description>Specifies the image displayed to the left of the text on an item. </description></item><item><term><see cref="P:EO.Web.BaseMenuItem.RightIcon">RightIcon</see></term><description>Specifies the image displayed to the right of the text on an item. </description></item><item><term><see cref="P:EO.Web.BaseMenuItem.Image">Image</see></term><description>Specifies the image displayed as the whole content of an item.</description></item><item><term><see cref="P:EO.Web.BaseMenuItem.Checked"></see></term><description>Specifies if an item is checked.</description></item></list></remarks>
      <seealso cref="T:EO.Web.MenuGroup">
      </seealso>
      <seealso cref="T:EO.Web.MenuItem">
      </seealso>
      <seealso cref="T:EO.Web.Menu">
      </seealso>
      <seealso cref="T:EO.Web.TabItemGroup">
      </seealso>
      <seealso cref="T:EO.Web.TabItem">
      </seealso>
      <seealso cref="T:EO.Web.TabStrip">
      </seealso>
    </member>
    <member name="M:EO.Web.BaseMenuItem.#ctor(System.String)">
      <summary>
            Creates a new instance of BaseMenuItem class.
            </summary>
      <param name="html">The text of the BaseMenuItem.</param>
    </member>
    <member name="M:EO.Web.BaseMenuItem.#ctor">
      <summary>
            Creates a new instance of BaseMenuItem class.
            </summary>
    </member>
    <member name="P:EO.Web.BaseMenuItem.Checked">
      <summary>
            Gets or sets or value indicating whether the item is checked.
            </summary>
      <value>
        <p>
          <see cref="T:System.Boolean">System.Boolean</see>
        </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            When an item's <b>Checked</b> property is true, 
            it will display a "check icon" as the left
            icon. 
            Note that if both BaseNavigator.CheckIconUrl and NavigationItem.LeftIcon 
            are defined, check icon takes precedence over LeftIcon. Therefore, 
            if <b>Checked</b> is set to true, CheckIconUrl will be displayed.
            If <b>Checked</b> is set to false, LeftIcon will be displayed when applicable.		
            </p>
        <p>
            The default check icon is <img src="images/DefaultCheckIcon.gif"></img>, use 
            <see cref="P:EO.Web.BaseNavigator.CheckIconUrl">CheckIconUrl</see> property to specify
            a customized icon.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseMenuItem.LeftIcon">
      <summary>
            Gets or sets a collection of left icon image URLs displayed in an item for different states. 		
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.NavigationItemImages">
          </see>
        </p>
        <p>
            A set of image URLs that will be displayed left to the text 
            in an item for different states. 
            </p>
            The property is read / write. 
            </value>
      <remarks>
        <p>
            LeftIcon property contains a collection of images that are displayed left to the <see cref="P:EO.Web.BaseMenuItem.Text"></see> or <see cref="P:EO.Web.NavigationItem.CustomItem"></see> 
            in an item. When the item switches to a different state, 		
            EO.Web control automatically switches to the corresponding left icon image for the state. 
            See <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see> for details.
            </p>
        <p>
            This property is ignored if the item is configured as an image-only item, in which case 
            the URL specified by <see cref="P:EO.Web.BaseMenuItem.Image"></see> property will be displayed.
            Besides this property, <see cref="P:EO.Web.NavigationItem.CustomItem"></see>, 
            <see cref="P:EO.Web.BaseMenuItem.Text"></see> and <see cref="P:EO.Web.BaseMenuItem.RightIcon"></see> 
            will all be ignored.
            </p>
        <p>
          <tip>
            You can define different URLs for different states. 
            E.g, LeftIcon.HoverUrl specifies the URL to 
            display when mouse hovers over the item. If no URL is defined for a certain state, 
            LeftIcon.Url will be used as default.
            </tip>
        </p>
        <seealso cref="T:EO.Web.NavigationItemImages">
        </seealso>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseMenuItem.RightIcon">
      <summary>
            Gets or sets a collection of right icon image URLs displayed in an item for different states. 		
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.NavigationItemImages">
          </see>
        </p>
        <p>
            A set of image URLs that will be displayed right to the text 
            in an item for different states. 
            </p>
            The property is read / write. 
            </value>
      <remarks>
        <p>
            This property contains a collection of images that are displayed right
            to the <see cref="P:EO.Web.BaseMenuItem.Text"></see> or <see cref="P:EO.Web.NavigationItem.CustomItem"></see> 
            in an item. When the item switches to a different state, 		
            EO.Web control automatically switches to the corresponding right icon image for the state. 
            See <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see> for details.
            </p>
        <p>
            This property is ignored if the item is configured as an image-only item, in which case 
            the URL specified by <see cref="P:EO.Web.BaseMenuItem.Image"></see> property will be displayed 
            as the only content of the item.
            Besides this property, <see cref="P:EO.Web.NavigationItem.CustomItem"></see>, 
            <see cref="P:EO.Web.BaseMenuItem.Text"></see> and <see cref="P:EO.Web.BaseMenuItem.RightIcon"></see> 
            will all be ignored.
            </p>
        <p>
            For an EO.Web <see cref="T:EO.Web.Menu"></see> control, right icon can also be used as sub menu icon to 
            indicate if a menu item has sub menu. 
            You have two approaches to define a sub menu icon:
            <list type="bullet"><item>To define the URL for the whole Menu, use Menu's <see cref="P:EO.Web.Menu.SubMenuIconUrl">SubMenuIconUrl</see> property.
            	</item><item>To define the URL for individual item, use MenuItem's <see cref="P:EO.Web.MenuItem.SubMenuIcon">SubMenuIcon</see> 
            	and this property to specify right icon as sub menu icon.
            	See SubMenuIcon property for details.
            	</item></list><tip>
            You can define different URLs for different states. 
            E.g, RightIcon.HoverUrl specifies the URL to 
            display when mouse hovers over the item. If no URL is defined for a certain state, 
            RightIcon.Url will be used as default.
            </tip></p>
        <seealso cref="T:EO.Web.NavigationItemImages">
        </seealso>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseMenuItem.Image">
      <summary>
            Specifies a collection of images that are used to display in an item for different states 
            and how the images are displayed in the item.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuItemImages">EO.Web.MenuItemImages</see>
        </p>
            The property is read / write.
            </value>
      <remarks>
            This property defines a set of images and how the images are displayed in an item. 
            <p><b>To define a set of images</b>, specify URLs of the images for different item states.		
            EO.Web control automatically switches to the corresponding image for the state. 
            See <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see> for details.
            </p><p><b>To define displaying mode for the images</b>, specify the item's <see cref="P:EO.Web.MenuItemImages.Mode">Image.Mode</see> property.
            There are three basic image displaying mode:
            <list type="bullet"><item>Image-only item: displays the corresponding image for a state as the only content of the item. <see cref="P:EO.Web.BaseMenuItem.LeftIcon"></see>, 
            <see cref="P:EO.Web.BaseMenuItem.RightIcon"></see>, <see cref="P:EO.Web.BaseMenuItem.Text"></see>, 
            <see cref="P:EO.Web.NavigationItem.CustomItem"></see> are all ignored.
            </item><item>As item's background: displays the corresponding image for a state as the item's background.</item><item>As Text's background: displays the corresponding image for a state as the item text's background.</item></list>		
            See MenuItemImages's <see cref="T:EO.Web.MenuItemImages.ImageMode">ImageModes</see> property for enum details.
            </p><tip>
            No need to provide images 
            for every state. 
            In most case, providing images for <b>Normal</b> state
            and <b>Hover</b> state is good enough.
            </tip><seealso cref="T:EO.Web.MenuItemImages.ImageMode" /></remarks>
    </member>
    <member name="P:EO.Web.BaseMenuItem.Text">
      <summary>
            Gets the object that controls the text of an item in a navigation control.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.NavigationItemText">
          </see> controls the text of the item.</p>		
            The property is read only, however, you can access the properties and methods
            of the object it returns.
            </value>
      <remarks>
            Use the following properties on this object
            to control the Text: 
            <list type="bullet"><item><term><see cref="P:EO.Web.NavigationItemText.Html">Text.Html</see></term><description>The content of the Text.</description></item><item><term><see cref="P:EO.Web.NavigationItemText.Padding">Text.Padding</see></term><description>The padding of the Text. This property is usually used to adjust the position of the text displayed on an item. </description></item><item><term><see cref="P:EO.Web.NavigationItemText.HorizontalAlign">Text.HorizontalAlign</see></term><description>Align to left, middle, right or justify. </description></item><item><term><see cref="P:EO.Web.NavigationItemText.VerticalAlign">Text.VerticalAlign</see></term><description>Align to top, bottom or middle.</description></item><item><term><see cref="P:EO.Web.NavigationItemText.NoWrap">Text.NoWrap</see></term><description>Display Text as one line or wrap into multiple lines.</description></item></list><p>
            On a navigation control, this property will be ignored if either of the following properties is set:
            <list type="number"><item><term><see cref="P:EO.Web.NavigationItem.CustomItemID">CustomItemID</see>/<see cref="P:EO.Web.NavigationItem.CustomItem">CustomItem</see></term><description>The content of the custom item will replace where Text should be. For example, if this navigation control is a Menu control, 
            it will display LeftIcon, CustomItem and RightIcon. 
            </description></item><item><term><see cref="P:EO.Web.BaseMenuItem.Image"></see></term><description>
            If it's an image-only item, the whole image will be displayed. Other properties, such as LeftIcon, Text and RightIcon, will be ignored.  
            See <see cref="T:EO.Web.MenuItemImages.ImageMode">Image property's ImageMode</see> for details on how to use this Image property. 
            </description></item></list></p></remarks>
    </member>
    <member name="T:EO.Web.MenuItemImages">
      <summary>
            This class is used by <see cref="P:EO.Web.BaseMenuItem.Image">BaseMenuItem's Image</see> property to specify
             a collection of images that are used to display in an item for different states 
            and how the images are displayed in the item.
            </summary>
      <remarks>
            Please see <see cref="P:EO.Web.BaseMenuItem.Image">BaseMenuItem's Image</see> property for details.
            </remarks>
    </member>
    <member name="T:EO.Web.MenuItemImages.ImageMode">
      <summary>
            Specifies displaying mode of the images defined in MenuItemImages.
            </summary>
    </member>
    <member name="F:EO.Web.MenuItemImages.ImageMode.NotSet">
      <summary>
            The value is not set. Runtime will use the value from the corresponding look 
            item. If not specified, <b>ImageOnly</b> will be used.
            </summary>
    </member>
    <member name="F:EO.Web.MenuItemImages.ImageMode.ImageOnly">
      <summary>
            Displays the image as item's whole content, also known as image-only item.  
            <see cref="P:EO.Web.BaseMenuItem.LeftIcon"></see>, 
            <see cref="P:EO.Web.BaseMenuItem.Text"></see> and
            <see cref="P:EO.Web.BaseMenuItem.RightIcon"></see> will be ignored.
            </summary>
    </member>
    <member name="F:EO.Web.MenuItemImages.ImageMode.ItemBackground">
      <summary>
            Displays the image as item's background. 
            </summary>
    </member>
    <member name="F:EO.Web.MenuItemImages.ImageMode.TextBackground">
      <summary>
            Displays the image as item text's background. The image only displays 
            as background on the region where <see cref="P:EO.Web.BaseMenuItem.Text"></see> is displayed, 			
            <see cref="P:EO.Web.BaseMenuItem.LeftIcon"></see> and
            <see cref="P:EO.Web.BaseMenuItem.RightIcon"></see> will not be affected.
            </summary>
    </member>
    <member name="P:EO.Web.MenuItemImages.Mode">
      <summary>
            Specifies displaying mode of the images defined in MenuItemImages. 
            </summary>
      <remarks>
            See <see cref="T:EO.Web.MenuItemImages.ImageMode"></see> enumeration for available displaying modes.
            </remarks>
    </member>
    <member name="P:EO.Web.MenuItemImages.BackgroundRepeat">
      <summary>
            When <see cref="P:EO.Web.MenuItemImages.Mode"></see> property is set to "background image", this property 
            specifies how the background image is tiled.
            </summary>
    </member>
    <member name="T:EO.Web.BackgroundRepeat">
      <summary>
            Specifies how a background image tiles.
            </summary>
    </member>
    <member name="F:EO.Web.BackgroundRepeat.NotSet">
      <summary>
            The tile mode is not set. Runtime will try to use the value from
            look item. If none is available, <b>RepeatXY</b> is used.
            </summary>
    </member>
    <member name="F:EO.Web.BackgroundRepeat.None">
      <summary>
            Do not repeat the background image.
            </summary>
    </member>
    <member name="F:EO.Web.BackgroundRepeat.RepeatX">
      <summary>
            Image is repeated horizontally.
            </summary>
    </member>
    <member name="F:EO.Web.BackgroundRepeat.RepeatY">
      <summary>
            Image is repeated vertically.
            </summary>
    </member>
    <member name="F:EO.Web.BackgroundRepeat.RepeatXY">
      <summary>
            Image is repeated horizontally and vertically.
            </summary>
    </member>
    <member name="T:EO.Web.ExpandDirection">
      <summary>
            Specifies the direction to which submenu expands.
            </summary>
      <remarks>
            This enumeration is used by 
            <see cref="P:EO.Web.MenuGroup.ExpandDirection">MenuGroup's ExpandDirection</see>
            to specify the direction to which the menu group expands.
            </remarks>
    </member>
    <member name="F:EO.Web.ExpandDirection.Auto">
      <summary>		
            Automatically determines the proper ExpandDirection. The submenu will
            expand to <b>BottomRight</b> if the parent menu item belongs to a vertical
            menu group, or <b>Bottom</b> if the parent item menu item belongs to 
            a horizontal menu group.
            </summary>
    </member>
    <member name="F:EO.Web.ExpandDirection.TopLeft">
      <summary>
            Expands submenu to top left of the parent item.
            </summary>
    </member>
    <member name="F:EO.Web.ExpandDirection.BottomLeft">
      <summary>
            Expands submenu to bottom left of the parent item.
            </summary>
    </member>
    <member name="F:EO.Web.ExpandDirection.Top">
      <summary>
            Expands submenu to top of the parent item.
            </summary>
    </member>
    <member name="F:EO.Web.ExpandDirection.Bottom">
      <summary>
            Expands submenu to bottom of the parent item.
            </summary>
    </member>
    <member name="F:EO.Web.ExpandDirection.TopRight">
      <summary>
            Expands submenu to top right of the parent item.
            </summary>
    </member>
    <member name="F:EO.Web.ExpandDirection.BottomRight">
      <summary>
            Expands submenu to bottom right of the parent item.
            </summary>
    </member>
    <member name="F:EO.Web.ExpandDirection.All">
      <summary>
            Expands to all directions.
            </summary>
    </member>
    <member name="T:EO.Web.BaseMenuItemGroup">
      <summary>
            Represents base class for both MenuGroup and TabItemGroup.
            </summary>
    </member>
    <member name="P:EO.Web.BaseMenuItemGroup.Orientation">
      <summary>
            Gets or sets the orientation (horizontal or vertical) of the group.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.Orientation">
          </see>
        </p>
            An Orientation enumeration specifying the direction in which to render the group.
            <p>This property is read /write.</p></value>
      <remarks>
            Use <b>Orientation</b> property to specify whether a <see cref="T:EO.Web.NavigationItemGroup"></see> should be horizontal or vertical.
            You can set this property on each <b>NavigationGroup</b> separately.
            </remarks>
    </member>
    <member name="P:EO.Web.BaseMenuItemGroup.LeftIconCellWidth">
      <summary>
            Gets or sets the width reserved for left icon cell 
            during runtime if left icon is not specified. 
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
            The width reserved for left icon cell during runtime if left icon is not specified. 
            </value>
      <remarks>
        <p>		
            If an item has no left icon, you can use <b>LeftIconCellWidth</b> to 
            reserve space for an empty left icon so that it will be aligned to items that have left icon. 
            This property is also used to reserve space for check icon if you set 
            <see cref="P:EO.Web.BaseMenuItem.Checked"></see> property.
            </p>
        <p>
            By default, item group automatically adjusts left and right icon cell
            width to make sure the text cell of items in a vertical group 
            are aligned. EO.Web controls determines the maximum width of left
            icon cell and apply it to all left icon cells. Same logic applies to right icon.
            </p>
        <p>
            However, adjustment cannot be done if no  
            item in a group has left or right icon specified. This can cause item
            text shift to the right when an icon is provided later through 
            <see href="Web/clientapi_howto.html">client side script interface</see>.
            In this case, you can use <b>LeftIconCellWidth</b> to force the space
            to be reserved when a group is firstly rendered.
            </p>
        <tip>
            If you do not want to reserve space for certain items, 
            set this property to 0 to disable automatic icon alignment. 
            </tip>
      </remarks>
    </member>
    <member name="P:EO.Web.BaseMenuItemGroup.RightIconCellWidth">
      <summary>
            Gets or sets the width reserved for right icon cell 
            during runtime if right icon is not specified. 
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
            The width reserved for right icon cell during runtime if right icon is not specified. 
            </value>
      <remarks>
        <p>
            If an item has no right icon, you can use <b>RightIconCellWidth</b> to 
            reserve space for an empty right icon so that this item can align to items that have right icon. 
            </p>
        <p>
            By default, item group automatically adjusts left and right icon cell
            width to make sure the text cell of items in a vertical group 
            are aligned. EO.Web controls determines the maximum width of right
            icon cell and apply it to all right icon cells. Same logic applies to left icon.
            </p>
            However, adjustment cannot be done if no  
            item in the group has left or right icon specified. This may cause item
            text shift to the left when an icon is provided later through 
            <see href="Web/clientapi_howto.html">client side script interface</see>.
            In this case, you can use <b>RightIconCellWidth</b> to force the space
            to be reserved when the group is firstly rendered.
            <tip>
            If you do not want to reserve space for certain items, 
            set this property to 0 to disable automatic icon alignment. 
            </tip></remarks>
    </member>
    <member name="P:EO.Web.BaseMenuItemGroup.SideImage">
      <summary>
            Gets or sets an image URL string that is displayed on the left side of the entire group. 
            </summary>
      <remarks>
        <p>
            Group's SideImage property and item's LeftIcon can be used together to create styles
            like Office 2003. 
            <br />
            Group's SideImage property displays image on the left side of an entire group, 
            item's LeftIcon property displays image on the left side of an individual item. 	
            </p>
        <p>		
            SideImage can be used as 
            background image of the left icons to create certain style such as Office 2003.
            This property can also be used with  <see cref="P:EO.Web.BaseMenuItemGroup.LeftIconCellWidth"></see>
            property to explicitly specify the left icon cell width.
            </p>
        <note>
            Due to a bug in the Gecko rendering engine, the height of the side image should be greater than
            the height of one menu item. Otherwise Gecko based browsers (Netscape, Mozilla, Firefox) may 
            display some artifacts when playing glide effects.
            </note>
        <p>
            See <see href="Web/MenuCommon/StyleAndAppearance/menu_group_appearance.html#spacing">adjust menu item spacing and side bar image</see>
            for a sample.
            </p>
        <p>
            If this property is a relative path (not started with "~\" or specific drive), 
            <see cref="P:EO.Web.WebControl.ImageBaseDirectory"></see> may be used as the root of this relative path.
            </p>
      </remarks>
    </member>
    <member name="T:EO.Web.Menu">
      <summary>
            Represents the functionality of a menu control. 
            </summary>
      <remarks>
        <p>
            A Menu control represents the container for the hierarchical structure used to navigate
            a web site. It is composed of MenuItem objects that represent a group of individual navigation items 
            in the hierarchical structure. 
            </p>
        <note>
            For applications that will have support for multiple languages, you can use 
            the <see cref="P:EO.Web.WebControl.RightToLeft"></see> property to display the text 
            of the menu from right to left to support languages such as Arabic.
            </note>
        <p>
            There are several ways to create a menu:
            <list type="bullet"><item>During design time, use Menu Builder to create a static menu.</item><item>During run time, use API to dynamically create or modify a menu.</item><item>During run time, use data binding to dynamically create a menu.</item></list>
            EO.Web menu also supports fully customizable styles, such as image-only item, custom item, 
            item with <see cref="P:EO.Web.BaseMenuItem.LeftIcon"></see> and <see cref="P:EO.Web.BaseMenuItem.RightIcon"></see>, 
            menu skin and page theme.
            </p>
            The code below demonstrates how to dynamically create a menu via API:
            <code lang="C#">
            //Create a Menu object
            EO.Web.Menu menu = new EO.Web.Menu();
            
            //Create a MenuItem object
            EO.Web.MenuItem item = new EO.Web.MenuItem();
            item.Text.Html = "New Menu Item";
            
            //Add MenuItem to Menu object
            menu.Items.Add(item);
            
            //Add the Menu object to the page
            Controls.Add(menu);
            </code><code lang="VB">
            'Create a Menu object
            Dim menu1 As New EO.Web.Menu
            
            'Create a MenuItem object
            Dim item As New EO.Web.MenuItem
            item.Text.Html = "New Menu Item"
            
            'Add MenuItem to Menu object
            menu.Items.Add(item)
            
            'Add the Menu object to the page
            Controls.Add(menu)
            </code></remarks>
    </member>
    <member name="M:EO.Web.Menu.#ctor">
      <summary>
            Creates an instance of Menu.
            </summary>
    </member>
    <member name="P:EO.Web.Menu.LookItems">
      <summary>
            Returns a collection of "Look" items. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuLookItemCollection">
          </see>
        </p>
            A collection of "Look" which defines menu item's appearance settings. "Look" is also a
            <b>MenuItem</b> object. 
            <p> This property is read only. However, you can access the properties and methods of the 
            object it returns.</p></value>
      <remarks>
        <p>
            Menu maintains a collection of "Looks" which can be applied to each menu item. 
            You can change a specific "Look" to control the common appearance of the menu items
            that use this "Look". Each "Look" in the collection is also a <b>MenuItem</b> object. 
            Apply "Look" to a menu item by using the <b>MenuItem</b>'s <see cref="P:EO.Web.NavigationItem.LookID">LookID</see> property.
            </p>
        <p>		
            When designing a menu's appearance, you should put common appearance setting into "Look" item,
            such as an item's border, padding, font etc. For individual item that has specific appearance, 
            such as LeftIcon, you can set the appearance setting on that item. During run time, a menu item 
            will merge its own appearance setting and its "Look" item's appearance setting together. 
            </p>
        <p>Here is a sample on how to dynamically create a menu look and apply the look to menu items.</p>
        <code lang="C#">
            // Create a look item with ID of "firstLevel"            
            MenuItem firstLevelLook = new MenuItem();
            firstLevelLook.NormalStyle.CssClass = "NormalStyle";
            firstLevelLook.HoverStyle.CssClass = "HoverStyle";
            firstLevelLook.ItemID = "firstLevel";
            Menu1.LookItems.Add(firstLevelLook);
            
            // Set the menu item's LookID to "firstLevel". 
            // This menu item uses the "firstLevel" look now.
            Menu1.LookItems[0].LookID = "firstLevel";		
            </code>
        <code lang="VB">
            ' Create a look item with ID of "firstLevel"
            Dim firstLevelLook As New MenuItem
            firstLevelLook.NormalStyle.CssClass = "NormalStyle"
            firstLevelLook.HoverStyle.CssClass = "HoverStyle"
            firstLevelLook.ItemID = "firstLevel"
            Menu1.LookItems.Add(firstLevelLook)
            
            ' Set the menu item's LookID to "firstLevel". 
            ' This menu item uses the "firstLevel" look now.
            Menu1.LookItems.Item(0).LookID = "firstLevel"
            </code>
            See <a href="Web/MenuCommon/LookSkinAndTheme/looks.html">Menu item look</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.Menu.TopGroup">
      <summary>
            Gets the top level menu group. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuGroup">MenuGroup</see>
        </p>
            The top level menu group object. 
            <p> This property is read only. However, you can set the properties 
            of the <see cref="T:EO.Web.MenuGroup">MenuGroup</see> object it returns.</p></value>
      <remarks>
            Use <b>TopGroup</b> to control the appearance, behavior and content of 
            the top level menu items.
            </remarks>
    </member>
    <member name="P:EO.Web.Menu.Items">
      <summary>
            Returns a collection of top level menu items. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see> class</p>
            A collection of top level menu items. 
            <p> This property is read only. However, you can access the properties and methods of the 
            object it returns.</p></value>
      <remarks>
            This property is a collection of top level menu items. 
            You can also access the top level menu items via <see cref="P:EO.Web.MenuGroup.Items">TopGroup.Items</see>.
            The code below demonstrates how to dynamically add top level menu items.
            <code lang="C#">
            Menu1.Items.Add("Products");
            Menu1.Items.Add("Support");
            </code><code lang="VB">
            Menu1.Items.Add("Products")
            Menu1.Items.Add("Support")
            </code></remarks>
    </member>
    <member name="P:EO.Web.Menu.SubMenuPositionConfine">
      <summary>
            Gets or sets how the screen position of a submenu is aligned 
            so that the submenu is displayed within a certain boundary.
            </summary>
      <value>
        <p>
          <see cref="P:EO.Web.Menu.SubMenuPositionConfine">
          </see> enumeration</p>
            One of the SubMenuPositionConfine enumeration values. The default value is <b>SubMenuPositionConfine.Window</b>.
            <p> This property is read/write. </p></value>
      <remarks>
            See <see cref="P:EO.Web.Menu.SubMenuPositionConfine">SubMenuPositionConfine</see> enumeration for a description on each option.
            Here's a program example:
            <code lang="C#">MyMenu.SubMenuPositionConfine = SubMenuPositionConfine.MenuBarAllLevels;</code><code lang="VB">MyMenu.SubMenuPositionConfine = SubMenuPositionConfine.MenuBarAllLevels</code></remarks>
    </member>
    <member name="P:EO.Web.Menu.ExpandDelay">
      <summary>
            Gets or sets the delay time between mouse
            positions over a menu item and submenu expands.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
            The amount of time (in milliseconds) between mouse is positioned over a menu item
            and submenu expands.
            The default is 0 milliseconds.
            <p> This property is read/write. </p></value>
      <remarks>
        <p>
            To make the menu less sensitive to mouse movement, 
            adjust the value of this property to delay expanding a 
            submenu.
            </p>
        <note>
            When a menu item is clicked, submenu will expand immediately regardless of this property. 
            </note>
      </remarks>
      <seealso cref="P:EO.Web.Menu.ExpandOnClick">
      </seealso>
    </member>
    <member name="P:EO.Web.Menu.CollapseDelay">
      <summary>
            Gets or sets the duration between mouse leaves a submenu and the submenu collapses. 
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
            The amount of delay time (in milliseconds) a submenu is closed
            after the mouse has left the menu. 
            The default is 300 milliseconds.
            <p> This property is read/write. </p></value>
      <remarks>
        <p>
            After mouse leaves a submenu, it
            waits <b>CollapseDelay</b> milliseconds before collapsing.
            </p>
        <note>
            When another submenu expands or user clicked the mouse outside of the menu,
            the menu will collapse immediately regardless of this setting. 
            </note>
        <tip>Set this property to 0 to force submenu remain open when  
            mouse pointer leaves the menu until another submenu expands 
            or user clicks the mouse.
            </tip>
      </remarks>
    </member>
    <member name="P:EO.Web.Menu.ExpandOnClick">
      <summary>
            Gets or sets the value indicating whether submenu should expand on 
            mouse click event or mouse over event.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ExpandOnClickState">ExpandOnClickState enumeration</see>
        </p>
            Indicating the triggering event (mouse over or mouse click) to expand a submenu. 
            The default is mouse over event.
            <p> This property is read/write. </p></value>
      <remarks>
        <p>
            By default, the value is "Disabled" and submenu automatically expands when mouse moves over a menu item. 
            If this property is set to <see cref="T:EO.Web.ExpandOnClickState">ExpandOnClickState.EnabledForTopLevelOnly</see>, 
            you will need to click on one of the top level menu items to expand submenus.
            Once a submenu is expanded, you can point the mouse to expand other submenus.
            </p>
        <p>
            This property has different default value for a <see cref="T:EO.Web.SlideMenu"></see>, please
            see <see cref="P:EO.Web.SlideMenu.ExpandOnClick">SlideMenu.ExpandOnClick</see>
            for more details.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Menu.TargetFrame">
      <summary>
            Gets or sets the name of the target frame in which all sub menu appears. 
            </summary>
      <remarks>
            Use this property to implement cross frame menu. See <see href="Web/MenuCommon/crossframe.html">Using Cross Frame</see> menu for details.
            </remarks>
    </member>
    <member name="P:EO.Web.Menu.SubMenuIconUrl">
      <summary>
            Gets or sets the Url string for the default icon displayed on a menu item to indicate this item has submenu.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">
          </see>
        </p>
            A string representing the Url of the default icon indicating if the menu item has submenu. 
            By default, if this value is empty, the built-in image <img src="images/PopupMarker.gif"></img> is used.
            <p> This property is read/write. </p></value>
      <remarks>
        <p>
            Use this property to specify the default submenu icon Url for all menu items. You can
            override this value on individual menu item by setting the MenuItem's <see cref="P:EO.Web.MenuItem.SubMenuIcon"></see> property
            to any value that is not <b>Auto</b>.
            </p>
        <p>
            If the value of this property is a relative path, 
            <see cref="P:EO.Web.WebControl.ImageBaseDirectory"></see> property could be used as base path, then
            the final result will be ImageBaseDirectory and this property combined together. 
            Note, you can use "~/" to specify a root relative path in all EO.Web URL properties.
            Once the value starts with "~/", ImageBaseDirectory will not be used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Menu.KeepExpandedOnClick">
      <summary>
            Gets or sets the value indicating whether a submenu should keep expanded after a menu item is clicked.
            </summary>
      <remarks>
            By default, when user clicks on an item, expanded submenu will collapse immediately. 
            You can disable this behavior by setting this property to <b>true</b> for a menu or a menu group. 
            When this property is set to <b>true</b>, the expanded submenu will collapse 
            only if user clicks the mouse outside of the menu or expands another submenu.
            </remarks>
    </member>
    <member name="M:EO.Web.Menu.LoadMenu(System.String)">
      <summary>
            Loads a menu from the specified location.
            </summary>
      <param name="virtualPath">
            The virtual path of the menu file. You can use '~' to represent the Web application root. For example,
            you can use "~/menu1.EOWeb.ascx" to load "menu1.EOWeb.ascx" in the Web application root directory. 
            </param>
      <returns>
            Returns the loaded menu.
            </returns>
      <remarks>
        <p>
            Uses Menu Builder to save menu as a file.
            </p>
        <tip>
            To load a slide menu, use <see cref="M:EO.Web.SlideMenu.LoadSlideMenu(System.String)"></see>.
            </tip>
      </remarks>
    </member>
    <member name="M:EO.Web.Menu.LoadMenuSkin(System.String,System.String)">
      <summary>
            Loads a menu skin from the specified location.
            </summary>
      <param name="virtualPath">
            The virtual path of the external skin file. You can use '~' to represent the Web application root. For example,
            you can use "~/skins/MenuSkin1.EOMenu.ascx" to load "MenuSkin1.EOMenu.ascx" in the "skins" directory. 
            </param>
      <param name="customSkinId">
            The ID of the custom skin. You can set this ID to other menus to apply this Skin to the menus.
            </param>
      <remarks>
        <p>
            Menu Builder can save a menu as an external skin. 
            This function must be called first to load a saved skin from disk into memory. 
            As the function only needs to be called once, you can place it in <b>Application_Start</b> event handler.
            </p>
        <tip>
            To load a slide menu skin, use <see cref="M:EO.Web.SlideMenu.LoadSlideMenuSkin(System.String,System.String)"></see>.
            </tip>
      </remarks>
    </member>
    <member name="T:EO.Web.ExpandOnClickState">
      <summary>
            Used by <see cref="P:EO.Web.Menu.ExpandOnClick">Menu.ExpandOnClick</see> property to 
            specify how a submenu is expanded when mouse is clicked.
            </summary>
    </member>
    <member name="F:EO.Web.ExpandOnClickState.Disabled">
      <summary>
            Submenu expands whenever mouse moves over its parent menu item. 
            </summary>
    </member>
    <member name="F:EO.Web.ExpandOnClickState.EnabledForTopLevelOnly">
      <summary>
            Submenu firstly expands when user clicks on one of the top level menu items,
            afterwards, submenu expands when mouse moves over its parent menu item. 
            </summary>
    </member>
    <member name="F:EO.Web.ExpandOnClickState.EnabledAlways">
      <summary>		
            Submenu expands only when user clicks its parent menu item.
            </summary>
    </member>
    <member name="T:EO.Web.SubMenuPositionConfine">
      <summary>
             Used by <see cref="P:EO.Web.Menu.SubMenuPositionConfine"></see> property to 
             specify how the position of a submenu is aligned so that its submenu 
             is displayed within a certain boundary.
            </summary>
      <seealso cref="P:EO.Web.Menu.SubMenuPositionConfine">
      </seealso>
    </member>
    <member name="F:EO.Web.SubMenuPositionConfine.Window">
      <summary>
            All submenus are displayed within the current browser window.
            This is the default value.
            </summary>
    </member>
    <member name="F:EO.Web.SubMenuPositionConfine.MenuBarFirstLevelOnly">
      <summary>
            For a horizontal menu, its second level submenus are displayed
            within the menu's left and right boundary. 
            </summary>
    </member>
    <member name="F:EO.Web.SubMenuPositionConfine.MenuBarAllLevels">
      <summary>
            For a horizontal menu, all submenus are displayed 
            within the menu's left and right boundary. 
            </summary>
    </member>
    <member name="F:EO.Web.SubMenuPositionConfine.None">
      <summary>
            No restriction.
            </summary>
    </member>
    <member name="T:EO.Web.ContextMenu">
      <summary>
            Represents a ContextMenu object. A context menu is bound to a specific 
            control or DHTML element and is displayed when user right clicks on the control or
            element. 
            </summary>
      <remarks>
        <p>ContextMenu can be bound to any DHTML element, 
            such as a link, an image or a div. When user right clicks 
            on the element, the menu will be displayed as context menu of the 
            clicked element. 
            </p>
        <p>
            Context menu is not supported for Opera.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.ContextMenu.#ctor">
      <summary>
            Creates a new instance of ContextMenu.
            </summary>
    </member>
    <member name="P:EO.Web.ContextMenu.ContextControlID">
      <summary>
            Gets or sets the <see cref="P:System.Web.UI.Control.ClientID">ClientID</see> of a control or DHTML element 
            on which this menu shows up when the control is right-clicked. 
            </summary>
      <remarks>
            The <see cref="P:System.Web.UI.Control.ClientID">ClientID</see> of a control is usually
            the same as the control's <see cref="P:System.Web.UI.Control.ID"></see>. However if the
            control is inside a <see cref="T:System.Web.UI.INamingContainer"></see> (for example, a user control),
            the two would be different.
            </remarks>
    </member>
    <member name="T:EO.Web.PageContextMenu">
      <summary>
            Represents a PageContextMenu object. 
            </summary>
      <remarks>
        <p>
            A <b>PageContextMenu</b> represents the context menu for current page. When a user 
            right clicks on current page, this menu
            will be displayed as context menu. 
            </p>
        <warning>
            It might not be user-friendly to replace the default context menu 
            for a page. Please use <b>PageContextMenu</b> with extra caution.
            </warning>
        <p>
            Context menu is not supported for Opera.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.PageContextMenu.#ctor">
      <summary>
            Creates a new instance of PageContextMenu.
            </summary>
    </member>
    <member name="T:EO.Web.MenuGroup">
      <summary>
            Represents a group of MenuItems. 
            </summary>
    </member>
    <member name="P:EO.Web.MenuGroup.ParentItem">
      <summary>
            Gets the parent item of this submenu.
            </summary>
    </member>
    <member name="P:EO.Web.MenuGroup.TemplateItem">
      <summary>
            Gets or sets an item that is used as a template to generate data bound items.
            </summary>
      <remarks>
        <p>
            During data binding, items are automatically created for each data record in the data source. 
            If <b>TemplateItem</b> is set, the newly created item will apply the same setting specified in TemplateItem. 
            </p>
        <p>
            Specify the common setting in <b>TemplateItem</b> to simplify the code. 
            </p>
        <tip>
            You can embed group inside a <b>TemplateItem</b>. The embedded group settings will apply to the newly created item's group.
            </tip>
        <p>
          <see href="Web/MenuCommon/DataBinding/binding_template.html">using item template</see> for details.</p>
      </remarks>
    </member>
    <member name="P:EO.Web.MenuGroup.Items">
      <summary>
            Gets a collection of menu items in this menu group. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuItemCollection">
          </see>
        </p>
        <p>A collection of menu items.</p>
        <p>This property is read only, however, you can access the properties and methods of the object it returns.</p>
      </value>
      <remarks>
            Use <b>Items</b> property to access the child menu items displayed in this submenu. 
            <note>
            There are two ways to access the child menu items of a menu item:
            <list type="bullet"><item><see cref="P:EO.Web.MenuItem.SubItems">MenuItem.SubItems</see></item><item><see cref="P:EO.Web.MenuGroup.Items">MenuItem.SubMenu.Items</see></item></list>
            Both properties access the same <see cref="T:EO.Web.MenuItemCollection"></see>. 
            </note></remarks>
    </member>
    <member name="P:EO.Web.MenuGroup.OffsetX">
      <summary>
            Gets and sets the horizontal offset(in pixel) between a submenu and its parent menu.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>An integer specifies the horizontal offset (in pixel) of a submenu. </p>
        <p>This property is read/write. </p>
      </value>
      <remarks>
        <p>
            Use this property to specify the horizontal space between the submenu and its parent menu.
            Specifies a negative value causes the submenu to overlap with its parent menu. 
            A positive value causes the submenu to display apart from its parent menu. 		
            </p>
        <p>
            By default, the value of this property is 
            <see cref="F:EO.Web.Consts.IntNotSet"></see>. 
            When the property is not set, menu uses the OffsetX specified in 
            parent menu item's look item to determine the horizontal offset.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MenuGroup.OffsetY">
      <summary>
            Gets and sets the vertical offset(in pixel) between a submenu and its parent menu.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>An integer specifies the vertical offset (in pixel) between a submenu and its parent maneu. </p>
        <p>This property is read / write. </p>
      </value>
      <remarks>
        <p>
            Use this property to specify the vertical space between a submenu and its parent menu.
            Specifies a negative value causes the submenu to overlap with the parent menu. 
            A positive value causes the submenu to display apart from its parent menu. 		
            </p>
        <p>
            By default, the value of this property is 
            <see cref="F:EO.Web.Consts.IntNotSet"></see>. 
            When the property is not set, menu uses the OffsetY specified in 
            parent menu item's look item to determine the vertical offset.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MenuGroup.ShadowColor">
      <summary>
            Specifies the color of this submenu's shadow. If not set, default color(gray) is used.
            </summary>
      <value>
        <p>
          <see cref="T:System.Drawing.Color">System.Drawing.Color</see>
        </p>
            The color of the shadow. 
            <p>This property is read /write.</p></value>
      <remarks>
            Use <b>ShadowColor</b> property to specify a submenu's shadow color. 
            <p>
            By default, the color is <b>Color.Empty</b>.
            </p><p>
            When color is not specified, its look item's <b>ShadowColor</b> will be used;<br />
            if the look item's <b>ShadowColor</b> is also empty, then "gray" is used.
            </p></remarks>
    </member>
    <member name="P:EO.Web.MenuGroup.ShadowDepth">
      <summary>
            Specifies the depth (in pixel) of the submenu shadow. If not set, default value(3px) is used.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
            The depth (in pixel) of the submenu's shadow. 
            <p>This property is read /write.</p></value>
      <remarks>
        <p>
            Use <b>ShadowDepth</b> property to specify the depth of the shadow. 
            </p>
        <p>
            The default value is <see cref="F:EO.Web.Consts.IntNotSet"></see>.
            </p>
        <p>
            If this value is empty, parent item's look item's <b>ShadowDepth</b> is used; <br />
            if the look item's <b>ShadowDepth</b> is also empty, default value 3(px) is used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MenuGroup.ExpandDirection">
      <summary>
            Gets and sets the direction to which a submenu expands. 
            </summary>
      <value>
        <p>
          <see cref="P:EO.Web.MenuGroup.ExpandDirection">
          </see>
        </p>
            An ExpandDirection enumeration specifying the direction to which a submenu expands. By default, expand direction is determined automatically.
            <p>This property is read/write.</p></value>
      <remarks>
        <p>
            By default, submenu expands to the bottom in a horizontal menu and to the right in a vertical menu.
            </p>
        <p>
            You can change default behavior by specifying direction in this property, for example, if you
            menu is placed at the right side of the page, you can set ExandDirection to <see cref="F:EO.Web.ExpandDirection.BottomLeft"></see>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MenuGroup.ExpandEffect">
      <summary>
            Gets the <see cref="T:EO.Web.Effect"></see> object that controls the effect to expand a submenu.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.Effect">
          </see>
        </p>
            The Effect object that controls the way a submenu expands.
            <p>This property is read only, however, you can access the properties and methods of the object it returns.</p></value>
      <remarks>
        <p>
            Use this property to control the way a submenu expands. EO.Web Menu supports
            60+ expand effects.
            </p>
        <p>
            Default value is <see cref="F:EO.Web.EffectType.NotSet"></see>. 
            </p>
        <p>
            If this property is not set, <b>MenuGroup</b> will try to get the value from the parent item's look item.
            If none of the ancestor items or look item has this value set, Menu does not have any expanding effects.
            </p>
            See <see href="Web/Menu/QuickStartGuide/effects.html">using effects</see> for details.
            </remarks>
    </member>
    <member name="P:EO.Web.MenuGroup.CollapseEffect">
      <summary>
            Gets the <see cref="T:EO.Web.Effect"></see> object that controls the effect to collapse a submenu.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.Effect">
          </see>
        </p>
            The Effect object that controls the way to collapse a submenu.
            <p>This property is read only, however, you can access the properties and method of the object it returns.</p></value>
      <remarks>
        <p>
            Use this property to control the way a submenu collapses. EO.Web Menu supports
            60+ collapse effects.
            </p>
        <p>
            When this property is specified, EO.Web Menu renders "reverse effect" of the specified effect.
            </p>
        <p>
            For example, <see cref="T:EO.Web.EffectType">GlideTopToBottom</see> effect glides a submenu from top to
            bottom.  
            <list type="bullet"><item>
            Setting it to <b>ExpandEffect</b> property glides the submenu from top to bottom;
            </item><item>
            Setting it to <b>CollapseEffect</b> property glides the submenu from bottom to top. 
            </item></list></p>
        <p>
            Therefore, you pick the same effect for both ExpandEffect and 
            CollapseEffect properties, the actual effects will automatically match. 
            </p>
        <p>
            By default, <see cref="P:EO.Web.Effect.Type">CollapseEffect.Type</see> is set to <see cref="F:EO.Web.EffectType.NotSet">EffectType.NotSet</see>,
            in which case the submenu will try to get the value from the parent item's look item.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MenuGroup.KeepExpandedOnClick">
      <summary>
            Gets or sets a value indicating if a submenu should be kept expanded 
            when user clicks on one of the menu items in the submenu.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.NullableBool">
          </see>
        </p>
            The Boolean value object that indicates if a menu group should be kept expanded when 
            user clicks on a menu item. 
            <p>This property is read/write. </p></value>
      <remarks>
        <p>
            By default, when user clicks on a menu item in an expanded submenu, the submenu will collapse automatically. 
            Setting this property to true to specify the submenu to keep expanded 
            when user clicks on the menu item.
            </p>
        <p>
            This property is useful when you have a deep menu and do not want 
            user to navigate to the deep level again if he/she clicks on a menu item. 
            </p>
        <tip>
            There are three events that may trigger a submenu to collapse:
            <list type="bullet"><item>When a menu item is clicked;</item><item>When mouse moves or is clicked outside of the menu;</item><item>When another submenu expands;</item></list>
            Setting this property to true only causes the submenu not to collapse on the first event.
            The submenu still collapses when the other two events happen.
            </tip>
      </remarks>
    </member>
    <member name="T:EO.Web.SubMenuIconSource">
      <summary>
            Specifies which icon should be used to indicate if a menu item has submenu.
            </summary>
      <remarks>
        <p>
            This enum is used by <see cref="P:EO.Web.MenuItem.SubMenuIcon"></see> property
            to specify which icon should be used to indicate if a menu item
            has submenu. The icon is displayed when the menu item
            has submenu.
            </p>
      </remarks>
    </member>
    <member name="F:EO.Web.SubMenuIconSource.Auto">
      <summary>
        <p>
            Automatically set the submenu icon.
            </p>
        <p>
            The following steps are used to determine
            which submenu icon to display when this value is set:
            <list type="number"><item>
            Use <see cref="P:EO.Web.BaseMenuItem.RightIcon"></see> if provided, otherwise - 
            </item><item>Use <see cref="P:EO.Web.Menu.SubMenuIconUrl"></see> if provided, otherwise - </item><item>Use default <img src="images/PopupMarker.gif" /> submenu icon;</item></list></p>
      </summary>
    </member>
    <member name="F:EO.Web.SubMenuIconSource.LeftIcon">
      <summary>
        <p>
            Use left icon as submenu icon.
            </p>
        <p>
            Submenu icon usually appears on the right side of a menu item.
            It can be customized to appear on the left side
            of the menu item. 
            </p>
        <p>
            For example, on a right-to-left web page, the menu may appear on the right edge
            of the page. Setting <see cref="P:EO.Web.MenuItem.SubMenuIcon"></see> to 
            to <b>LeftIcon</b> can display left icon
            as submenu icon.
            </p>
      </summary>
    </member>
    <member name="F:EO.Web.SubMenuIconSource.RightIcon">
      <summary>
            Use the menu icon's right icon as submenu icon.
            </summary>
    </member>
    <member name="F:EO.Web.SubMenuIconSource.None">
      <summary>
            The menu item does not have a submenu icon.
            </summary>
    </member>
    <member name="T:EO.Web.MenuItem">
      <summary>
            Represents a menu item in a menu control. 
            </summary>
      <remarks>
        <p>
            A menu control is made up of a hierarchy of menu items 
            represented by <b>MenuItem</b> objects. A group of menu items that have the same parent menu item 
            forms <b>Submenu</b> of the menu item, and is represented by the <see cref="T:EO.Web.MenuGroup"></see>
            object. The group can be accessed
            by <see cref="P:EO.Web.MenuItem.SubMenu">MenuItem.SubMenu</see> property.
            You can access the parent menu item of the submenu by using  
            <see cref="P:EO.Web.MenuGroup.ParentItem">MenuGroup.ParentItem</see> property. 
            </p>
        <p>
            Each submenu maintains a collection of child <b>MenuItem</b> objects.
            You can access this child menu item collection through:
            <list type="bullet"><item><see cref="P:EO.Web.MenuItem.SubItems">MenuItem.SubItems</see></item><item><see cref="P:EO.Web.MenuGroup.Items">MenuItem.SubMenu.Items</see></item></list>
            Both properties access the same <see cref="T:EO.Web.MenuItemCollection"></see> object.
            </p>
        <p>
            To customized a menu item's appearance and contents:
            <list type="table"><listheader><term>To...</term><description>Use...</description></listheader><item><term>Specifies the menu item text</term><description>Use <see cref="P:EO.Web.NavigationItemText.Html">MenuItem.Text.Html</see></description></item><item><term>Specifies the menu item icons</term><description>
            use <see cref="P:EO.Web.BaseMenuItem.LeftIcon">MenuItem.LeftIcon</see> and 
            <see cref="P:EO.Web.BaseMenuItem.RightIcon">MenuItem.RightIcon</see> property.
            		</description></item><item><term>Specifies menu item styles</term><description>Use 
            		<see cref="P:EO.Web.NavigationItem.NormalStyle">MenuItem.NormalStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.HoverStyle">MenuItem.HoverStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.ExpandedStyle">MenuItem.ExpandedStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.SelectedStyle">MenuItem.SelectedStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.SelectedHoverStyle">MenuItem.SelectedHoverStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.SelectedExpandedStyle">MenuItem.SelectedExpandedStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.DisabledStyle">MenuItem.DisabledStyle</see>
            		property</description></item><item><term>Navigate pages</term><description>Use <see cref="P:EO.Web.NavigationItem.NavigateUrl">MenuItem.NavigateUrl</see> property</description></item></list></p>
        <p>
            See <see href="Web/MenuCommon/ItemsAndGroups/menu_item.html">using menu item</see> for more details.
            </p>
      </remarks>
      <seealso cref="T:EO.Web.MenuGroup">
      </seealso>
      <seealso cref="T:EO.Web.Menu">
      </seealso>
    </member>
    <member name="M:EO.Web.MenuItem.#ctor(System.String)">
      <summary>
            Create an instance of MenuItem. 
            </summary>
      <param name="html">The html text of the menu item. </param>
    </member>
    <member name="M:EO.Web.MenuItem.#ctor">
      <summary>
            Create an instance of MenuItem.
            </summary>
    </member>
    <member name="P:EO.Web.MenuItem.ParentItem">
      <summary>
            Gets the parent <see cref="T:EO.Web.MenuItem"></see>.		
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuItem">
          </see>
        </p>
            The parent menu item. 
            </value>
      <seealso cref="T:EO.Web.Menu">
      </seealso>
      <seealso cref="T:EO.Web.MenuItem">
      </seealso>
      <seealso cref="T:EO.Web.MenuGroup">
      </seealso>
    </member>
    <member name="P:EO.Web.MenuItem.SubMenu">
      <summary>
            Gets the submenu of this menu item.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuGroup">
          </see>
        </p>
        <p>The submenu of the current menu item.</p>
            The property is read only, however, you can access the properties and methods
            of the object it returns.
            </value>
      <remarks>
            Use <b>SubMenu</b> property to control the appearance, behavior and contents 
            of the submenu. For example, the shadow color of the submenu, 
            the space between each menu item in the submenu, the effect, expand direction, sub menu items, etc.
            <p>Please refer to <see cref="T:EO.Web.MenuGroup"></see> for details.</p></remarks>
    </member>
    <member name="P:EO.Web.MenuItem.SubItems">
      <summary>
            Returns a collection of child items.
            </summary>
      <remarks>
            This property returns the same collection as <see cref="P:EO.Web.MenuGroup.Items">MenuItem.SubMenu.Items</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.MenuItem.SubMenuIcon">
      <summary>
            Specified which icon (left icon, right icon or none) should be used to indicate this item has submenu. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.SubMenuIconSource">
          </see>
        </p>
        <p>An enumeration specifies which icon is used to indicate this item has submenu.</p>
        <p>This property is read/write.</p>
      </value>
      <remarks>
        <p>
            Submenu icon is displayed when menu item contains a submenu. 
            Default submenu icon is <img src="images/PopupMarker.gif"></img>. 
            If you need to replace this icon for the entire menu, use 
            <see cref="P:EO.Web.Menu.SubMenuIconUrl">Menu.SubMenuIconUrl</see>
            and set <b>SubMenuIcon</b> to <b>Auto</b>.
            </p>
        <p>
            You can use <b>LeftIcon</b> as submenu icon by setting this property 
            to <see cref="F:EO.Web.SubMenuIconSource.LeftIcon">SubMenuIconSource.LeftIcon</see>. 
            </p>
      </remarks>
    </member>
    <member name="T:EO.Web.MenuItemCollection">
      <summary>
            MenuItemCollection class is a collection of <see cref="T:EO.Web.MenuItem">MenuItem</see> objects. 
            </summary>
      <remarks>
        <p>
            The <b>MenuItemCollection</b> class is used to store and manage a 
            collection of MenuItem objects. <see cref="T:EO.Web.Menu"></see> object uses  
            it to store top level menu items in the <see cref="P:EO.Web.Menu.Items"></see> property. 
            <see cref="T:EO.Web.MenuGroup"></see> object uses it to store the child menu item objects in 
            <see cref="P:EO.Web.MenuGroup.Items"></see> property.
            </p>
        <p>
            You can programmatically manage a MenuItemCollection object by 
            adding and removing <b>MenuItem</b> objects. To add menu items to the 
            collection, use the <see cref="M:EO.Web.MenuItemCollection.Add(EO.Web.MenuItem)"></see> method. To remove nodes 
            from the collection, use the 
            <see cref="M:EO.Web.MenuItemCollection.Remove(EO.Web.MenuItem)"></see>, the 
            <see cref="M:EO.Web.NavigationItemCollection.RemoveAt(System.Int32)"></see>, or the 
            <see cref="M:EO.Web.NavigationItemCollection.Clear"></see> method.
            </p>
        <p>
          <b>Note:</b>
          <br>
          </br>
          <see cref="M:EO.Web.NavigationItemGroup.DataBind">
          </see> clears the submenu's sub item collection.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MenuItemCollection.Item(System.Int32)">
      <summary>
            Gets the menu item in the collection at specific index. 
            </summary>
      <remarks>
            Index is the zero-based. 
            In C#, this property is the indexer of <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see> class. 
            </remarks>
    </member>
    <member name="M:EO.Web.MenuItemCollection.Insert(System.Int32,EO.Web.MenuItem)">
      <summary>
            Inserts a <see cref="T:EO.Web.MenuItem">MenuItem</see> into the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see> at the specified position.
            </summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The <see cref="T:EO.Web.MenuItem">MenuItem</see> to insert into the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see>. </param>
    </member>
    <member name="M:EO.Web.MenuItemCollection.Remove(EO.Web.MenuItem)">
      <summary>
            Removes the first occurrence of a  <see cref="T:EO.Web.MenuItem">MenuItem</see> from the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see>.
            </summary>
      <param name="value">The <see cref="T:EO.Web.MenuItem">MenuItem</see> to remove from the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see>.</param>
    </member>
    <member name="M:EO.Web.MenuItemCollection.Contains(EO.Web.MenuItem)">
      <summary>
            Determines whether the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see> contains the specific <see cref="T:EO.Web.MenuItem">MenuItem</see>.
            </summary>
      <param name="value">The <see cref="T:EO.Web.MenuItem">MenuItem</see> to locate in the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see>.</param>
      <returns>
        <b>true</b> if the <see cref="T:EO.Web.MenuItem">MenuItem</see> is found in the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see>; otherwise, <b>false</b></returns>
    </member>
    <member name="M:EO.Web.MenuItemCollection.IndexOf(EO.Web.MenuItem)">
      <summary>
            Determines the index of a specific <see cref="T:EO.Web.MenuItem">MenuItem</see> in the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see>.
            </summary>
      <param name="value">The <see cref="T:EO.Web.MenuItem">MenuItem</see> to locate in the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see>.</param>
      <returns>The index of value if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:EO.Web.MenuItemCollection.Add(EO.Web.MenuItem)">
      <summary>
            Adds a <see cref="T:EO.Web.MenuItem">MenuItem</see> to the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see>.
            </summary>
      <param name="item">The <see cref="T:EO.Web.MenuItem">MenuItem</see> to add in the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see>.</param>
      <returns>The index at which the new <see cref="T:EO.Web.MenuItem">MenuItem</see> was inserted</returns>.
        </member>
    <member name="M:EO.Web.MenuItemCollection.Add(System.String)">
      <summary>
            Adds a <see cref="T:EO.Web.MenuItem">MenuItem</see> to the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see>.
            </summary>
      <param name="itemHtml">
        <see cref="P:EO.Web.NavigationItemText.Html">Text.Html</see> of the new MenuItem. </param>
      <returns>The newly created <see cref="T:EO.Web.MenuItem">MenuItem</see> object.</returns>
    </member>
    <member name="M:EO.Web.MenuItemCollection.Add(System.String,System.String)">
      <summary>
            Adds a <see cref="T:EO.Web.MenuItem">MenuItem</see> to the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see> and also set the look id.
            </summary>
      <param name="lookId">The look Id of the new item. Pass <b>null</b> or <b>SpecialLookIDs.Auto</b> to use default value.</param>
      <param name="itemHtml">
        <see cref="P:EO.Web.NavigationItemText.Html">Text.Html</see> of the new MenuItem. </param>
      <returns>The newly created <see cref="T:EO.Web.MenuItem">MenuItem</see> object.</returns>
    </member>
    <member name="M:EO.Web.MenuItemCollection.Add(System.String,System.String,System.String)">
      <summary>
            Adds a <see cref="T:EO.Web.MenuItem">MenuItem</see> to the <see cref="T:EO.Web.MenuItemCollection">MenuItemCollection</see> and 
            also set the look id and left icon URL.
            </summary>
      <param name="lookId">The look Id of the new item. Pass <b>null</b> or <b>SpecialLookIDs.Auto</b> to use default value.</param>
      <param name="itemHtml">
        <see cref="P:EO.Web.NavigationItemText.Html">Text.Html</see> of the new MenuItem. </param>
      <param name="leftIconUrl">The left icon URL of the added MenuItem.</param>
      <returns>The newly created <see cref="T:EO.Web.MenuItem">MenuItem</see> object.</returns>
    </member>
    <member name="T:EO.Web.MenuLookItemCollection">
      <summary>
            MenuItemLookCollection maintains all look items. 	
            </summary>
      <remarks>
        <p>
            This class is used by Menu's LookItems property to maintain a collection of "look items" 
            that define common appearance settings for menu items.</p>
        <p>
            "Look item" is also a <see cref="T:EO.Web.MenuItem"></see> object.
            </p>
        <p>
            Each menu item specifies which look's appearance setting to use by setting the 
            MenuItem.LookID property.
            </p>
        <p>
          <b>Note:</b>
          <br />
            Menu item look is an important object used to specify common appearance of menu items. 
            Skin is used to control the appearance of a menu and implement page theme.
            Please refer to <see href="Web/MenuCommon/LookSkinAndTheme/lookskinTheme.html">look, skin &amp; theme</see> 
            for more details.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.MenuLookItemCollection.Default">
      <summary>
            Gets the _Default look item object. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuItem">
          </see>
        </p>
        <p>The menu item object that is used as the look item. </p>
        <p>
            This property is read only, however, you can access the properties and methods of the object
            it returns.
            </p>
      </value>
      <remarks>
        <p>
            Default property returns a look item that is used by all menu items to 
            apply appearance settings by default.
            </p>
            For detailed information on how this look item is used, see <see cref="F:EO.Web.SpecialLookIDs.Auto">SpecialLookIDs.Auto</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.MenuLookItemCollection.Separator">
      <summary>
            Gets the _Separator look item object.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuItem">
          </see>
        </p>
        <p>The menu item object that is used as the look item. </p>
            This property is read only, however, you can access the properties and methods of the object
            it returns.
            </value>
      <remarks>
            Separator property returns a look item that defines the appearance setting 
            for a separator item, which is used to divide items.
            Change the appearance setting in the <b>Separator</b> look item will change the appearance of the separators.
            </remarks>
    </member>
    <member name="P:EO.Web.MenuLookItemCollection.TopLevelItem">
      <summary>
            Gets the _TopLevelItem look item object. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuItem">
          </see>
        </p>
        <p>The menu item object that is used as a look item. </p>
            This property is read only, however, you can access the properties and methods of the object
            it returns.		
            </value>
      <remarks>
        <p>TopLevelItem property returns a look item that defines the appearance setting 
            for every menu items in the top level menu group.
            </p>
            For detailed information on how this look item is used, see <see cref="F:EO.Web.SpecialLookIDs.Auto">SpecialLookIDs.Auto</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.MenuLookItemCollection.TopGroup">
      <summary>
            Gets the _TopGroup look item object. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.MenuItem">
          </see>
        </p>
        <p>The MenuItem object that is used as a look item, it defines the appearance settings for the top level menu group. </p>
            This property is read only, however, you can access the properties and methods of the object
            it returns.
            </value>
      <remarks>
        <p>
            TopGroup property returns a look item that defines the appearance setting for the entire top level menu group.
            </p>
            For detailed information on how this look item is used, see <see cref="F:EO.Web.SpecialLookIDs.Auto">SpecialLookIDs.Auto</see>.
            </remarks>
    </member>
    <member name="T:EO.Web.SlideMenu">
      <summary>
            Represents an EO.Web SlideMenu object.
            </summary>
      <remarks>
        <p>
            A <b>SlideMenu</b> provides the look and feel of Microsoft Outlook side panel. 
            </p>
        <p>
            Use <see cref="P:EO.Web.SlideMenu.SingleExpand"></see> property to specify if only one pane
            can be expanded at a time. In SingleExpand mode, expanding one pane will automatically
            collapses other expanded panes. If SingleExpand property is false, each pane is
            expanded/collapsed independently.
            </p>
        <p>
            Use <see cref="P:EO.Web.SlideMenu.SlidePaneHeight"></see> to specify the height of the expanded pane 
            in SingleExpand mode. This property is ignored if SingleExpand is set to False.
            </p>
        <p>
            Use <see cref="P:EO.Web.SlideMenu.SlideEffectType"></see> property to set the effect played when pane
            expands and collapses. Use <see cref="P:EO.Web.SlideMenu.SlideEffectDuration"></see> to control effect speed.
            </p>
        <p>
            SlideMenu derives from <see cref="T:EO.Web.Menu"></see> and inherits a lot of Menu's
            functionalities. Top level menu item displays as sliding pane's title. 
            Children of top level item (2nd level items) displays inside the sliding pane. 3rd level 
            items display as popup menu.
            </p>
        <p>
            Use slide menu item the same as normal menu item. For example,
            place an "image button" into sliding pane by specifying the item's <see cref="P:EO.Web.BaseMenuItem.Image"></see> property;
            or place an ASP.NET control into sliding pane by using <see cref="T:EO.Web.CustomItem"></see>.
            </p>
        <p>
            When a pane is expanded, the corresponding top level menu item (which is rendered as the pane title)'s
            <see cref="P:EO.Web.NavigationItem.Selected"></see> property is automatically set to true.  
            Use <see cref="P:EO.Web.NavigationItem.SelectedStyle"></see> property  to control
            the appearance of the menu item when it is expanded. For example, you can use
            <see cref="P:EO.Web.NavigationItemImages.SelectedUrl">MenuItem.LeftIcon.SelectedUrl</see> to specify a 
            different image to indicate that the pane is expanded.
            </p>
            See <see href="Web/SlideMenu/using_slidemenu.html">how to use SlideMenu</see> for more details.
            </remarks>
    </member>
    <member name="M:EO.Web.SlideMenu.#ctor">
      <summary>
            Creates a new instance of SlideMenu.
            </summary>
    </member>
    <member name="P:EO.Web.SlideMenu.SingleExpand">
      <summary>
            Gets or sets a value indicating if only one pane can be expanded at a time. 
            </summary>
      <remarks>
            By default, expanding one pane automatically collapses all other panes. Set this value to
            <b>false</b> to expand/collapse each pane independently.
            </remarks>
    </member>
    <member name="P:EO.Web.SlideMenu.SlideEffectType">
      <summary>
            Gets or sets the effect played while a pane expands/collapses.
            </summary>
      <remarks>
        <p>
            Uses this property to specify the effect played when a sliding pane expands or collapses.
            The default value is <see cref="T:EO.Web.SlideMenuEffect">SlideMenuEffect.Glide</see>.
            </p>
        <note>
            This setting overrides effects specified in 
            <see cref="P:EO.Web.MenuGroup.ExpandEffect">MenuGroup.ExpandEffect</see> and 
            <see cref="P:EO.Web.MenuGroup.CollapseEffect">MenuGroup.CollapseEffect</see> for top level
            items. 
            </note>
      </remarks>
    </member>
    <member name="P:EO.Web.SlideMenu.SlideEffectDuration">
      <summary>
            Gets or sets the duration of the effects in milliseconds.
            </summary>
      <remarks>
            Default duration is 300 milliseconds.
            </remarks>
    </member>
    <member name="P:EO.Web.SlideMenu.SlidePaneHeight">
      <summary>
            Gets or sets the height of a sliding pane. 
            </summary>
      <remarks>
        <p>
            Use this property to specify the height of a sliding pane when <see cref="P:EO.Web.SlideMenu.SingleExpand"></see>
            is set to <b>true</b>. The acutal height of the menu may increase
            if the height specified by this property is not adequate.
            </p>
        <tip>
            To control bottom paddings for each menu group, use <see cref="P:EO.Web.NavigationItemGroup.Style">MenuGroup.Style.Paddings</see>
            property or related CSS style attribute.
            </tip>
      </remarks>
    </member>
    <member name="P:EO.Web.SlideMenu.ExpandEmptyPane">
      <summary>
            Gets or sets a value indicating whether empty pane should be expanded when clicked.
            </summary>
      <remarks>
            By default, if a sliding pane does not have menu items, it will not expand when clicked. 
            Set this property to <b>True</b> causes such menu item to expand.
            </remarks>
    </member>
    <member name="P:EO.Web.SlideMenu.ExpandOnClick">
      <summary>
            Gets or sets the value indicating whether a submenu or sliding pane should expand on 
            mouse click or mouse over event.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ExpandOnClickState">ExpandOnClickState enumeration</see>
        </p>
            Indicating the triggering event (mouse over or mouse click) to expand the popup submenu
            or slide pane. The default value is <see cref="T:EO.Web.ExpandOnClickState">ExpandOnClickState.EnabledForTopLevelOnly</see>,
            so that mouse click event triggers slide pane expands and mouse over event
            triggers sub menu expands.
            <p> This property is read/write.</p></value>
      <remarks>
        <p>
            If <see cref="P:EO.Web.SlideMenu.SingleExpand"></see> is set to <b>True</b>, setting this property to
            <see cref="T:EO.Web.ExpandOnClickState">ExpandOnClickState.Disabled</see> causes sliding pane
            to automatically expand on mouse over event instead of mouse click event. This value 
            has no effect when <see cref="P:EO.Web.SlideMenu.SingleExpand"></see> expand is set to <b>False</b>, in which 
            case only mouse click event can expand/collapse a slide pane.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.SlideMenu.LoadSlideMenu(System.String)">
      <summary>
            Loads a SlideMenu from the specified location.
            </summary>
      <param name="virtualPath">The virtual path of the SlideMenu file. 
            You can use '~' to represent the Web application root. 
            For example, you can use "~/menu1.EOWeb.ascx" to 
            load "menu1.EOWeb.ascx" in the Web application root directory. 
            </param>
      <returns>Returns a SlideMenu.</returns>
    </member>
    <member name="M:EO.Web.SlideMenu.LoadSlideMenuSkin(System.String,System.String)">
      <summary>
            Loads a SlideMenu skin from the specified location.
            </summary>
      <param name="virtualPath">The virtual path of the SlideMenu file. 
            You can use '~' to represent the Web application root. 
            For example, you can use "~/menu1.EOWeb.ascx" to 
            load "menu1.EOWeb.ascx" in the Web application root directory. 
            </param>
      <param name="customSkinId">The ID of the custom skin. 
            You can set this ID to other SlideMenu to apply this Skin to the SlideMenu.
            </param>
    </member>
    <member name="T:EO.Web.SlideMenuEffect">
      <summary>
            Specifies the effect played when a sliding pane in a <see cref="T:EO.Web.SlideMenu"></see> expands or collapses.
            </summary>
    </member>
    <member name="F:EO.Web.SlideMenuEffect.None">
      <summary>
            No effect is played.
            </summary>
    </member>
    <member name="F:EO.Web.SlideMenuEffect.Glide">
      <summary>
            Plays a glide effect, similar to that of Microsoft Outlook side panel.
            </summary>
    </member>
    <member name="F:EO.Web.SlideMenuEffect.Fade">
      <summary>
            Plays a fade effect.
            </summary>
    </member>
    <member name="T:EO.Web.NavigationItem">
      <summary>
            Represents a NavigationItem in a BaseNavigator. 	
            </summary>
      <remarks>
        <p>
            A BaseNavigator control is made up of a hierarchy of items 
            represented by <b>NavigationItem</b> objects. A group of NavigationItem that have the same parent item 
            forms a <b>NavigationItemGroup</b> and is represented by <see cref="T:EO.Web.NavigationItemGroup"></see>
            object. 
            </p>
        <p>
            To customized an item's appearance and contents:
            <list type="table"><listheader><term>To...</term><description>Use...</description></listheader><item><term>Specify item text</term><description><see cref="P:EO.Web.NavigationItemText.Html">NavigationItem.Text.Html</see> property</description></item><item><term>Specify item styles</term><description><see cref="P:EO.Web.NavigationItem.NormalStyle">NormalStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.HoverStyle">HoverStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.ExpandedStyle">ExpandedStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.SelectedStyle">SelectedStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.SelectedHoverStyle">SelectedHoverStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.SelectedExpandedStyle">SelectedExpandedStyle</see>,
            		<see cref="P:EO.Web.NavigationItem.DisabledStyle">DisabledStyle</see>
            		properties</description></item><item><term>Navigate pages</term><description>Use <see cref="P:EO.Web.NavigationItem.NavigateUrl">NavigateUrl</see> property</description></item></list></p>
      </remarks>
      <seealso cref="T:EO.Web.NavigationItemGroup">
      </seealso>
      <seealso cref="T:EO.Web.BaseNavigator">
      </seealso>
    </member>
    <member name="M:EO.Web.NavigationItem.#ctor(System.String)">
      <summary>
            Creates a new instance of NavigationItem class.
            </summary>
      <param name="itemHtml">The text of the NavigationItem.</param>
    </member>
    <member name="M:EO.Web.NavigationItem.#ctor">
      <summary>
            Creates a new instance of NavigationItem class.
            </summary>
      <seealso cref="T:EO.Web.MenuItem">
      </seealso>
      <seealso cref="T:EO.Web.TabItem">
      </seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.ParentNavigationItem">
      <summary>
            Returns an object representing the parent navigation item.
            </summary>
    </member>
    <member name="P:EO.Web.NavigationItem.IsLookItem">
      <summary>
            Gets a boolean value indicating if this item is used 
            as a look item.
            </summary>
      <value>
        <p>
          <see cref="T:System.Boolean">System.Boolean</see>
        </p>
            A boolean value indicating if this item is used as a look item. 
            </value>
      <remarks>
        <p>
            Each <see cref="T:EO.Web.NavigationItem">item</see> object has <see cref="P:EO.Web.NavigationItem.LookID">LookID</see> property that points 
            to a "look" object. When this <see cref="T:EO.Web.NavigationItem">item</see> is rendered, it combines the appearance 
            settings of the item look object with its own appearance settings.
            </p>
        <p>
          <tip>
            Using look item to define a common set of appearance settings is a good way to manage 
            the control's appearance. 
            </tip>
        </p>
        <p>
            For more information about how to use item looks, see <see href="Web/MenuCommon/LookSkinAndTheme/looks.html">item looks</see>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.IsSeparator">
      <summary>
            Gets or sets a boolean value indicating whether this item is a separator.
            </summary>
      <value>
        <p>A <see cref="T:System.Boolean"></see> value indicating if this item is a separator.</p>
        <p>This property is read/write.</p>
      </value>
      <remarks>
        <p>
            Separator item is a special item with a single purpose --- divide regular items. Hence, 		
            some of the properties are ignore. For example, if this NavigationItem is a MenuItem, 
            <see cref="P:EO.Web.BaseMenuItem.LeftIcon">LeftIcon</see>, 
            <see cref="P:EO.Web.BaseMenuItem.Text">Text</see> and <see cref="P:EO.Web.BaseMenuItem.RightIcon">RightIcon</see> do not 
            make sense and are ignored. 
            However, you can use <see cref="P:EO.Web.BaseMenuItem.Image"></see> property to specify 
            an image to use in this separator.
            </p>
        <p>
            Separator does not response to mouse event either, only the appearance setting defined in <see cref="P:EO.Web.NavigationItem.NormalStyle">NormalStyle</see> is used, 
            all other styles are ignored.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.Index">
      <summary>
            Gets the index of the item. 
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>
            The integer indicates the zero-based position index of the item in its
            parent group.
            </p>
            This property is read only. 
            </value>
    </member>
    <member name="P:EO.Web.NavigationItem.Level">
      <summary>
            Gets the depth level of the item. 
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicates the depth of this item. Top level item is 0. </p>
            This property is read only.
            </value>
    </member>
    <member name="P:EO.Web.NavigationItem.Disabled">
      <summary>
            Gets or sets a boolean value indicating whether this item is disabled.
            </summary>
      <value>
        <p>
          <see cref="T:System.Boolean">System.Boolean</see>
        </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Set <b>Disabled</b> to <b>true</b> to put the item into "Disabled" state.
            An item in "Disabled" state:
            <list type="bullet"><item>Always uses <see cref="P:EO.Web.NavigationItem.DisabledStyle">DisabledStyle</see>;</item><item>Does not response to mouse or keyboard event;</item></list></p>
        <tip>
            You can use <see href="Web/clientapi_howto.html">client side script interface</see> to change <b>Disabled</b> property on the client side.
            </tip>
        <p>
            Note: If the current state of the item is "Selected", when setting the "Disabled" property
            to true, the item will automatically clear the "Selected" state.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.Selected">
      <summary>
            Gets or sets a boolean value indicating whether the item is in "Selected" state.
            </summary>
      <value>
        <p>
          <see cref="T:System.Boolean">System.Boolean</see>
        </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Use <b>Selected</b> property to specify whether a item is "Selected" or not. 
            Unlike regular items that switches styles according to mouse events,
            A "Selected" item always uses <see cref="P:EO.Web.NavigationItem.SelectedStyle">SelectedStyle</see>,
            If <b>SelectedStyle</b> is not defined, <see cref="P:EO.Web.NavigationItem.HoverStyle">HoverStyle</see> is used,
            if <b>HoverStyle</b> is not defined, <see cref="P:EO.Web.NavigationItem.NormalStyle">NormalStyle</see> is used.
            </p>
        <p>
            For a <see cref="T:EO.Web.SlideMenu"></see>, setting a top level item's
            <b>Selected</b> to <b>True</b> also expand the sliding pane.
            </p>
        <tip>
            You can call <see href="JSDoc.Public.Web.NavigationItem.setSelected.html">MenuItem.setSelected</see>
            on client side through <see href="Web/clientapi_howto.html">client side script interface</see>.
            Note you should not call this function to expand/collapse a slide pane for a slide menu. Use 
            <see href="JSDoc.Public.Web.MenuItem.expandSubMenu.html">MenuItem.expandSubMenu</see> or
            <see href="JSDoc.Public.Web.MenuItem.collapseSubMenu.html">MenuItem.collapseSubMenu</see> instead.
            </tip>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.Expanded">
      <summary>
            Gets or sets a boolean indicating if the item is expanded.
            </summary>
    </member>
    <member name="P:EO.Web.NavigationItem.Visible">
      <summary>
            Gets or sets a value indicating whether this item is visible.
            </summary>
      <value>
        <p>
          <see cref="T:System.Boolean">System.Boolean</see>
        </p>
            This property is read/write.
            </value>
      <remarks>
            Use <b>Visible</b> property to specify if the item is visible. Even if the item is not visible, 
            you can still use 
            <see href="Web/clientapi_howto.html">client side script interface</see> to get or set the properties of the item on the client side. 
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.LookID">
      <summary>
            Gets or sets the ID of the look item.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>A string value of the look item ID. </p>
            This property is read/write.
            </value>
      <remarks>		
            Look items are special <see cref="T:EO.Web.NavigationItem">items</see> that allow you to 
            define appearance settings that can be applied to other items. 
            Each control inherits from <see cref="T:EO.Web.BaseNavigator">BaseNavigator</see> (e.g, Menu, TabStrip) 
            maintains a collection of look items in 
            <b>LookItems</b> property, 
            through which you can access individual look items by ID.
            Here is an example on how to configure a menu control's look item:
            <code lang="C#">
            MyMenu.LookItems["Product"].NormalStyle.CssClass = "product";
            </code><code lang="VB">
            MyMenu.LookItems.Items("Product").NormalStyle.CssClass = "product"
            </code>
            
            Another code example to dynamically create look:
            <p><code lang="C#">
            //Create a new look object
            EO.Web.MenuItem theLook = new EO.Web.MenuItem();
            
            //Setting the ID of the look object
            theLook.ID = "Test";
            
            //Set the shadow of the submenu to grey.
            theLook.SubMenu.Style.ShadowColor = Color.Grey;
            
            //Add it to the menu's item look objects collection
            menu.LookItems.Add(theLook);
            
            //Menu item1 now uses the new look we just created.
            //It's SubMenu has grey shadow.
            menuItem1.LookID = "Test";
            </code><code lang="VB">
            'Create a new look object
            Dim theLook as 
            		EO.Web.MenuItem = New EO.Web.MenuItem
            
            'Setting the ID of the look object
            theLook.Name = "Test"
            
            'Set the shadow of the submenu to grey.
            theLook.SubMenu.Style.ShadowColor = Color.Grey
            
            'Add it to the menu's item look objects collection
            menu.LookItems.Add(theLook)
            
            'Menu item1 now uses the new look we just created.
            'It's SubMenu has grey shadow.
            menuItem1.LookID = "Test"
            </code></p>
            See <see href="Web/MenuCommon/LookSkinAndTheme/looks.html">item look</see> for more details about item look.
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.Height">
      <summary>
            TGets or sets the item height in pixel.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The item height.</p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Use <b>Height</b> to explicitly set item height. 
            </p>
        <p>
            When this property is not set, item height is automatically determined 
            based on the content and style settings of the item.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.Width">
      <summary>
            Gets or sets the item width in pixel.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The item width.</p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Use this property to explicitly set item width when the item belongs
            to a horizontal item group. Note this property 
            is ignored for items that belong to a vertical item group, in which case
            the width of the group is used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.NormalStyle">
      <summary>
            Gets and sets the style of a item's appearance when the item is in "Normal" state.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ElementStyle">
          </see>
        </p>
            An ElementStyle object maintains appearance related settings, such as font, background, paddings etc.
            <p>This property is read/write.</p></value>
      <remarks>
        <p>
            To be able to fully customize the appearance setting of a navigation control, you need to understand 
            <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see>. Navigation control item uses different styles in different states.
            </p>
        <p>
          <b>NormalStyle</b> defines the appearance when the item is not in any of the other states. 
            For all kinds of navigation control items, NormalStyle must be specified. All other styles are optional and if not defined, 
            control item will fall back to next "basic" level style until it reaches the most "basic" level -  NormalStyle.		
            </p>
        <p>
            If the item's <see cref="P:EO.Web.NavigationItem.LookID">LookID</see> property is set, the item will try to uses the look
            item's <b>NormalStyle</b>.
            </p>
        <p>
            See <see cref="T:EO.Web.ElementStyle">ElementStyle</see> class 
            and <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</see> for more information
            about item states and how to specify item style (background, font, padding etc.)
            in different states.
            </p>
        <p>
            See <see href="Web/Menu/StyleAndAppearance/StylesCommonTasks.html">Styles - HOW TOs</see> for specific information
            on most common tasks. 
            </p>
      </remarks>
      <seealso cref="T:EO.Web.ElementStyle">ElementStyle class</seealso>
      <seealso href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.HoverStyle">
      <summary>
            Gets and sets the style to control an item's appearance when the item is in "Hover" state,
            that is, when mouse is over the item.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ElementStyle">
          </see>
        </p>
            An ElementStyle object maintains appearance related settings, such as font, background, paddings etc.
            <p>This property is read/write.</p></value>
      <remarks>
            Use <b>Hover</b> property to specify the style of the navigation control item when 
            the mouse is positioned over the item.
            <p><b>Note:</b><br />
            If <b>HoverStyle</b> is empty and the item is in "Hover" state, 
            then <see cref="P:EO.Web.NavigationItem.NormalStyle">NormalStyle</see> will be used.
            </p><p>
            See <see cref="T:EO.Web.ElementStyle">ElementStyle</see> class 
            and <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</see> for more information
            about item states and how to specify item style (background, font, padding etc.)
            in different states.
            </p><p>
            See <see href="Web/Menu/StyleAndAppearance/StylesCommonTasks.html">Styles - HOW TOs</see> for specific information
            on most common tasks. 
            </p></remarks>
      <seealso cref="T:EO.Web.ElementStyle">ElementStyle class</seealso>
      <seealso href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.ExpandedStyle">
      <summary>
            Gets and sets the style to control an item's appearance when the item expands its children items.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ElementStyle">
          </see>
        </p>
            An ElementStyle object maintains style related settings, such as font, background, paddings etc.
            <p>This property is read/write.</p></value>
      <remarks>
        <p>
            Use <b>ExpandedStyle</b> property to specify the style of an item when 
            the item expands its children items.
            </p>
        <p>
          <b>Note:</b>
          <br />
            If <b>ExpandedStyle</b> is empty and the item is in "Expanded" state, 
            then <see cref="P:EO.Web.NavigationItem.HoverStyle"></see> will be used.
            </p>
        <p>
            See <see cref="T:EO.Web.ElementStyle">ElementStyle</see> class 
            and <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</see> for more information
            about item states and how to specify item style (background, font, padding etc.)
            in different states.
            </p>
        <p>
            See <see href="Web/Menu/StyleAndAppearance/StylesCommonTasks.html">Styles - HOW TOs</see> for specific information
            on most common tasks. 
            </p>
      </remarks>
      <seealso cref="T:EO.Web.ElementStyle">ElementStyle class</seealso>
      <seealso href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.SelectedStyle">
      <summary>
            Gets and sets the style to control an item's appearance when the item is in "Selected" state.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ElementStyle">
          </see>
        </p>
            An ElementStyle object maintains style related settings, such as font, background, paddings etc.
            <p>This property is read/write.</p></value>
      <remarks>
        <p>
            Use <b>SelectedStyle</b> property to specify the style of an item when 
            the item's <see cref="P:EO.Web.NavigationItem.Selected"></see> property is set to true.
            </p>
        <p>
          <b>Note:</b>
          <br />
            If <b>SelectedStyle</b> is empty and the item is in "Selected" state, 
            then <see cref="P:EO.Web.NavigationItem.HoverStyle"></see> will be used.
            </p>
        <p>
            See <see cref="T:EO.Web.ElementStyle">ElementStyle</see> class 
            and <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</see> for more information
            about item states and how to specify item style (background, font, padding etc.)
            in different states.
            </p>
        <p>
            See <see href="Web/Menu/StyleAndAppearance/StylesCommonTasks.html">Styles - HOW TOs</see> for specific information
            on most common tasks. 
            </p>
      </remarks>
      <seealso cref="T:EO.Web.ElementStyle">ElementStyle class</seealso>
      <seealso href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.SelectedHoverStyle">
      <summary>
            Gets and sets the style to control an item's appearance when the item is in both "Selected" and "Hover" state.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ElementStyle">
          </see>
        </p>
            An ElementStyle object maintains style related settings, such as font, background, paddings etc.
            <p>This property is read/write.</p></value>
      <remarks>
        <p>
            Use <b>SelectedHoverStyle</b> property to specify the style of an item when 
            the item's <see cref="P:EO.Web.NavigationItem.Selected"></see> property is true, and 
            mouse is positioned over the item.
            </p>
        <p>
          <b>Note:</b>
          <br />
            If <b>SelectedHoverStyle</b> is empty and the item is in "Selected" and "Hover" state, 
            then <see cref="P:EO.Web.NavigationItem.SelectedStyle"></see> will be used.
            </p>
        <p>
            See <see cref="T:EO.Web.ElementStyle">ElementStyle</see> class 
            and <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</see> for more information
            about item states and how to specify item style (background, font, padding etc.)
            in different states.
            </p>
        <p>
            See <see href="Web/Menu/StyleAndAppearance/StylesCommonTasks.html">Styles - HOW TOs</see> for specific information
            on most common tasks. 
            </p>
      </remarks>
      <seealso cref="T:EO.Web.ElementStyle">ElementStyle class</seealso>
      <seealso href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.SelectedExpandedStyle">
      <summary>
            Gets and sets the style to control an item's appearance when the item is in both "Selected" and "Expanded" state.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ElementStyle">
          </see>
        </p>
            An ElementStyle object maintains style related settings, such as font, background, paddings etc.
            <p>This property is read/write.</p></value>
      <remarks>
        <p>
            Use <b>SelectedExpandedStyle</b> property to specify the style of an item when 
            the item's <see cref="P:EO.Web.NavigationItem.Selected"></see> property is true and 
            the item expands its children items..
            </p>
        <p>
          <b>Note:</b>
          <br />
            If <b>SelectedExpandedStyle</b> is empty and the item is in "Selected" and "Hover" state, 
            then <see cref="P:EO.Web.NavigationItem.SelectedHoverStyle"></see> will be used.
            </p>
        <p>
            See <see cref="T:EO.Web.ElementStyle">ElementStyle</see> class 
            and <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</see> for more information
            about item states and how to specify item style (background, font, padding etc.)
            in different states.
            </p>
        <p>
            See <see href="Web/Menu/StyleAndAppearance/StylesCommonTasks.html">Styles - HOW TOs</see> for specific information
            on most common tasks. 
            </p>
      </remarks>
      <seealso cref="T:EO.Web.ElementStyle">ElementStyle class</seealso>
      <seealso href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item states</seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.DisabledStyle">
      <summary>
            Gets or sets the style to control item appearance when the item is in "Disabled" state.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ElementStyle">
          </see>
        </p>
            An ElementStyle object maintains style-related settings, such as font, background, paddings etc.
            <p>This property is read/write.</p></value>
      <remarks>
        <p>
            Use this property to specify the style of an item when 
            the item's <see cref="P:EO.Web.NavigationItem.Disabled"></see> property
            is set to <b>true</b>.
            </p>
        <p>
          <b>Note:</b>
          <br />
            If <b>DisabledStyle</b> is empty and the item is in "Disabled" state, 
            then <see cref="P:EO.Web.NavigationItem.NormalStyle"></see> will be used.
            </p>
        <p>
            See <see cref="T:EO.Web.ElementStyle">ElementStyle</see> class 
            and <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">navigation item states</see> for more information
            about item states and how to specify item style (background, font, padding etc.)
            in different states.
            </p>
        <p>
            See <see href="Web/Menu/StyleAndAppearance/StylesCommonTasks.html">Styles - How Tos</see> for specific information
            about how to achieve certain result.
            </p>
      </remarks>
      <seealso cref="T:EO.Web.ElementStyle">ElementStyle class</seealso>
      <seealso href="Web/MenuCommon/StyleAndAppearance/item_state.html">Item state</seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.CustomItemID">
      <summary>
            Gets or sets the custom item ID. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>
            A string represents the ID of the <see cref="P:EO.Web.NavigationItem.CustomItem"></see> to be displayed in an item. 
            </p>
            The property is read/write. 
            </value>
      <remarks>
        <p>
            There are two ways to define a custom item:
            <list type="bullet"><item>
            Drag a <b>CustomItem</b> control on page and specify any 
            navigation item's <b>CustomItemID</b> to that CustomItem. 
            Refer to <see href="Web/MenuCommon/ItemsAndGroups/custom_item.html#regular">regular custom item</see> for details.
            </item><item>
            Use embedded item by specifying <b>CustomItem</b> tag as the following HTML code
            Refer to <see href="Web/MenuCommon/ItemsAndGroups/custom_item.html#embedded">embedded custom item</see> for details.
            </item></list><p>
            To define a regular custom item, set this property to the ID of the <see cref="P:EO.Web.NavigationItem.CustomItem"></see> object, 
            which is a container object that can contain any other HTML or ASP.NET controls. The containing controls
            will be displayed as content of this regular custom item.
            </p><note><list type="bullet"><item>
            When this item is defined as a custom item, the <b>CustomItem</b> object specified 
            by this property is displayed, <see cref="P:EO.Web.BaseMenuItem.Text">Text</see> property is ignored. 
            </item><item>
            When this item is defined as an image-only item, the image specified in the <see cref="P:EO.Web.BaseMenuItem.Image">Image</see> property is displayed, 
            <see cref="P:EO.Web.BaseMenuItem.LeftIcon">LeftIcon</see>, <see cref="P:EO.Web.NavigationItem.CustomItem">CustomItem</see>, 
            <see cref="P:EO.Web.BaseMenuItem.Text">Text</see> and <see cref="P:EO.Web.BaseMenuItem.RightIcon">RightIcon</see> properties are ignored.
            </item></list></note></p>
      </remarks>
      <seealso cref="P:EO.Web.NavigationItem.CustomItem">CustomItem class</seealso>
      <seealso href="Web/MenuCommon/ItemsAndGroups/custom_item.html">Using CustomItem</seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.CustomItem">
      <summary>
            Returns an ITemplate object that is used to define an embedded custom item on Aspx page for data binding. 
            </summary>
      <value>
        <p>
          <see cref="T:System.Web.UI.ITemplate">System.Web.UI.ITemplate</see>
        </p>
        <p>
            An ITemplate that contains the custom item template for this navigation item. The
            default value is null (<b>Nothing</b> for Visual Basic).
            </p>
      </value>
      <remarks>
        <p>
            There are two ways to define a custom item:
            <list type="bullet"><item>
            Drag a <b>CustomItem</b> control on page and specify any 
            navigation item's <b>CustomItemID</b> to that CustomItem. 
            Refer to <see href="Web/MenuCommon/ItemsAndGroups/custom_item.html#regular">regular custom item</see> for details.
            </item><item>
            Use embedded item by specifying <b>CustomItem</b> tag as the following HTML code
            </item></list><code>
            &lt;eo:MenuItem&gt;
            	&lt;CustomItem&gt;
            		&lt;asp:TextBox runat="server" Text="test"&gt;&lt;&gt;
            	&lt;/CustomItem&gt;
            &lt;/eo:MenuItem&gt;
            </code></p>
        <p>
            You can enclose any ASP.NET server controls or HTML inside the <b>CustomItem</b> tag.
            An embedded custom item can be used to nest ASP.NET control in a navigation item
            and it has the following advantages:
            <list type="bullet"><item>No need to specify <see cref="P:EO.Web.NavigationItem.CustomItemID">CustomItemID</see>;
            </item><item>Can be defined inside a TemplateItem which defines common properties of 
            repeatly created items during data binding. As for a regular custom item, it can not be repeately.</item><item>Being created during a navigation control or NavigationItemGroup's <see href="Web/MenuCommon/ItemsAndGroups/custom_item.html#binding">data binding process</see>. 
            </item></list></p>
        <p>
            Refer to <see href="Web/MenuCommon/ItemsAndGroups/custom_item.html#embedded">embedded custom item</see> for details.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.CustomItemInstance">
      <summary>
            Gets the embedded custom item instance associated with this navigation item.
            </summary>
      <value>
        <p>
          <see cref="P:EO.Web.NavigationItem.CustomItem">CustomItem</see>
        </p>
        <p>
            The embedded <see cref="P:EO.Web.NavigationItem.CustomItem">CustomItem</see> associated with this item,
            or null (<b>Nothing</b> for Visual Basic) if there isn't one.
            </p>
      </value>
      <remarks>
        <p>
            Embedded custom item is initialized during data binding. So this property
            always returns null before <see cref="M:EO.Web.BaseNavigator.DataBind">DataBind</see> method is called.
            </p>
        <p>
            Typically you will use this property in 
            <see cref="E:EO.Web.BaseNavigator.CustomItemCreated"></see> or 
            <see cref="E:EO.Web.BaseNavigator.ItemDataBound"></see> event handler
            to modify the custom item before it is rendered. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.ToolTip">
      <summary>
            Gets or sets the tooltip string to be displayed when the mouse is positioned over the item. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            When the mouse is positioned over a navigation item for a while, this string 
            is displayed as tooltip to provide more description of this item.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.Status">
      <summary>
            Gets or sets the text string to be displayed at the browser's status bar when the mouse is positioned over the item. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            When the mouse is positioned over a menu item, this text is displayed at
            the browser's status bar.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.RaisesServerEvent">
      <summary>
            Gets or sets a value indicating whether the server side event should be raised when this item is clicked.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.NullableBool">
          </see>
        </p>
        <p>A NullableBool indicates whether or not to raise server side postback event when this item is clicked.</p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Setting this property to <see cref="F:EO.Web.NullableBool.True"></see> causes 
            the page to raise server side <see cref="E:EO.Web.BaseNavigator.ItemClick"></see> postback event 
            when this item is clicked.
            You can handle the event in <b>ItemClick</b> event handler.
            In the event handler, the clicked item can be accessed through 
            <see cref="T:EO.Web.NavigationItemEventArgs"></see>'s properties.
            </p>
        <p>
          <b>Value Inheritance</b> section lists generic rules to determine final value during runtime, 
            however, there is one exception for <b>slide menu's top level items</b>: 		
            <list type="bullet"><item>For slide menu, a top level item's RaisesServerEvent must be set to true 
            	to raise server event when that item is clicked. Because by default slide menu's 
            	top level items expand sub menu panes when clicked.
            	</item></list></p>
      </remarks>
      <inherit type="EO.Web.NullableBool">
      </inherit>
      <seealso cref="E:EO.Web.BaseNavigator.ItemClick">ItemClick event</seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.CausesValidation">
      <summary>
            Gets or sets a value indicating whether clicking this item will
            cause server side validation to be performed.
            </summary>
      <value>
        <see cref="T:EO.Web.NullableBool">
        </see>
      </value>
      <remarks>
        <p>
            Setting this property to <see cref="F:EO.Web.NullableBool.True"></see> causes 
            validation to be performed on any controls that require validation		
            </p>
        <p>
          <b>Value Inheritance</b> section lists generic rules to determine final value during runtime. 
            </p>
      </remarks>
      <inherit type="EO.Web.NullableBool">
      </inherit>
    </member>
    <member name="P:EO.Web.NavigationItem.OnClickScript">
      <summary>
            Gets or sets the client side JavaScript code to be executed when this item is clicked.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The JavaScript code that is executed at client side when mouse is clicked on this item.</p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Set inline JavaScript code to this property instead of JavaScript function name.
            To specify a JavaScript function name, use <see cref="P:EO.Web.BaseNavigator.ClientSideOnItemClick">ClientSideOnItemClick</see> property. 
            </p>
        <p>
            When both this property and <b>ClientSideOnItemClick</b> are specified, 
            The code specified in OnClickScript is executed before the function specified in ClientSideOnItemClick.
            </p>
        <p>
            If <see cref="P:EO.Web.NavigationItem.RaisesServerEvent">RaisesServerEvent</see> is evaluated to true, 
            server event will be raised after client side script is executed.
            See <see cref="P:EO.Web.BaseNavigator.ClientSideOnItemClick">ClientSideOnItemClick</see> property for details and code examples.
            </p>
            In general, when mouse is clicked on an item, the event is handled in the following order:
            <list type="number"><item><term>NavigationItem.OnClickScript</term><description>Client side event handler</description></item><item><term>BaseNavigator.ClientSideOnItemClick</term><description>Client side event handler</description></item><item><term>NavigationItem.NavigateUrl</term><description>Redirect to the URL without executing server side event</description></item><item><term>BaseNavigator.ItemClick</term><description>Server side event</description></item></list><p>
            See <see href="Web/MenuCommon/HandlingEvent/client_event.html">handling client side events</see> for more details.
            </p></remarks>
      <seealso cref="P:EO.Web.BaseNavigator.ClientSideOnItemClick">ClientSideOnItemClick</seealso>
    </member>
    <member name="P:EO.Web.NavigationItem.NavigateUrl">
      <summary>
            Gets or sets the URL to navigate when the item is clicked.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The URL to navigate when the item is clicked. </p>
            This property is read/write.
            </value>
      <remarks>
        <p>Use <b>NavigateUrl</b> property to redirect the page to the specified URL. Page will be
            redirected to anothe URL at client side, so the server side event handlers do not have a chance to be executed. 
            </p>
            Use '~/' to represent the application root. 
            <p>
            If you want to open a new window to display content of this URL, you can set 
            <see cref="P:EO.Web.NavigationItem.TargetWindow">TargetWindow</see> property to "_blank".
            See <see cref="P:EO.Web.NavigationItem.TargetWindow">TargetWindow</see> property
            for different windows you can specify to display this URL.
            </p><p>
            In general, when mouse is clicked on an item, client-side events are handled in the following order:
            <list type="number"><item><term><see cref="P:EO.Web.NavigationItem.OnClickScript"></see></term><description>Client side event handler</description></item><item><term><see cref="P:EO.Web.BaseNavigator.ClientSideOnItemClick"></see></term><description>Client side event handler</description></item><item><term><see cref="P:EO.Web.NavigationItem.NavigateUrl"></see></term><description>Redirect to the URL without executing server side event</description></item></list>
            Note server-side event <see cref="E:EO.Web.BaseNavigator.ItemClick">ItemClick</see> will not be fired if <b>NavigateUrl</b> is set.
            </p><p>
            See <see href="Web/MenuCommon/HandlingEvent/client_event.html">handling client side events</see> for more details.
            </p></remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.TargetWindow">
      <summary>
            Gets or sets the target window to display <see cref="P:EO.Web.NavigationItem.NavigateUrl"></see>. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The string value represents the target of the window 
            to open the NavigateUrl when the item is clicked. </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
          <b>TargetWindow</b> specifies in which window the browser should open <b>NavigateUrl</b> when the item is clicked.
            When the user clicks on an item, the navigation control will use <b>window.open</b> to load <b>NavigateUrl</b>. 
            the value of <b>TargetWindow</b> property will be passed as the second parameter to window.open function. 
            </p>		
            The following table from MSDN shows the target name that Internet Explorer supports. Note that some of the names might only
            available in Internet Explorer.
            <list type="table"><listheader><term>Built-in TargetWindow names</term><description>Meaning</description></listheader><item><term>Any name you specify</term><description>The name of the target window </description></item><item><term>_blank</term><description>Load the linked document into a new blank window. This window is not named. </description></item><item><term>_media</term><description>Load the linked document into the HTML content area of the Media Bar. Available in Internet Explorer 6 or later.</description></item><item><term>_parent</term><description>Load the linked document into the immediate parent of the document the link is in. </description></item><item><term>_search</term><description>Load the linked document into the browser search pane. Available in Internet Explorer 5 or later. </description></item><item><term>_self</term><description>Default. Load the linked document into the window in which the link was clicked (the active window). </description></item><item><term>_top</term><description>Load the linked document into the topmost window. </description></item></list>
            For example, if you set an item's NavigateUrl to "http://www.yahoo.com", and want to open a new window when user
            clicks on the item, you can set TargetWindow property to "_blank". 
            <code lang="C#">MyMenuItem.TargetWindow="_blank";</code><code lang="VB">MyMenuItem.TargetWindow="_blank"</code></remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.PageViewID">
      <summary>
            Gets or sets the ID of the <see cref="T:EO.Web.PageView"></see> control to display when this item is selected.
            </summary>
      <remarks>
        <p>
            Navigation controls inherited from <b>BaseNavigator</b> (Menu, SlideMenu, TabStrip etc) can be associated with a
            <see cref="T:EO.Web.MultiPage"></see> control. When associated with a <b>MultiPage</b>
            control, navigation controls can automatically switch 
            the page in the <b>MultiPage</b> control.
            </p>
        <p>
            Use this property to explicitly associate a <b>PageView</b> in the 
            associated <see cref="T:EO.Web.MultiPage"></see> control to this item.
            </p>
        <seealso cref="P:EO.Web.BaseNavigator.MultiPageID" />
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.Shortcut">
      <summary>
            Gets or sets the Shortcut structure that is used to define keyboard shortcut for an item.
            </summary>
      <remarks>
            The short cut can be a single character, number, F1 - F12, ENTER, BACKSPACE, TAB, ESC, INSERT, DELETE, 
            HOME, END and them prefixed with Ctrl, Shift or Alt.
            For example, "Ctrl+A" or "Shift+DELETE". 
            <p>
            Shortcut is not case sensitive.
            </p></remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.AllowRoles">
      <summary>
            Specifies a list of roles that are allowed to access this item.
            </summary>
      <remarks>
        <p>
            Uses this property to specify a list of roles that are allowed to access this item.
            The item will not be displayed if the current user does not belong to any of the roles in
            the list.
            </p>
        <p>
            Role is checked via the standard ASP.NET
            <code>
            System.Security.Principal.IPrincipal.IsInRole()
            </code>
            call. The IPrincipal is taken from Context.User.
            </p>
        <p>
            By default, items that are not allowed to access are disabled.
            If you want to hide the items instead of disabling them, 
            set <see cref="P:EO.Web.BaseNavigator.HideRoleDisabledItems"></see> to <b>True</b>.		
            </p>
        <p>
            Use comma (',') or pipe ('|') to separate multiple roles.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.ItemID">
      <summary>
            Gets or sets the ID for this item. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            This property is used to identify an item. 
            It is also used to construct the item's <see cref="P:EO.Web.NavigationItem.Path">Path</see> property.
            </p>
        <p>
            If you do not set this property, an internal item ID will be generated
            when <see cref="P:EO.Web.NavigationItem.Path">Path</see> property is requested. This internal 
            item ID is guaranteed to be unique within its parent <see cref="T:EO.Web.NavigationItemGroup"></see>.
            </p>
        <p>
            If you do specify this property, make sure it is unique within its 
            parent <see cref="T:EO.Web.NavigationItemGroup"></see>, otherwise server side event will
            not function correctly.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.Path">
      <summary>
            Gets or sets the string of delimited item IDs that form the 
            path from the root item to the current item.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">
          </see>
        </p>
            The string of delimited item IDs that form the path from the root item to the current item.
            This property is read/write.
            </value>
      <remarks>
        <p>This property returns the path of the item. The path is a string of delimited 
            item IDs that form the path from the root item to the current item. 
            Use the <see cref="P:EO.Web.BaseNavigator.PathSeparator"></see> property to specify the delimiting character used 
            to separate the item IDs in the item path.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.Value">
      <summary>
            Gets or sets the value of the item. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>Supplemental data about the item that is not displayed. </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            You can use <b>Value</b> property to store any customized 
            data associated with the item. This value is not displayed 
            in the control and is commonly used to store additional data
            for client side or server side event handlers.
            </p>
        <tip>
            You can call <see href="JSDoc.Public.Web.NavigationItem.getValue.html">MenuItem.getValue</see>
            through <see href="Web/clientapi_howto.html">client side script interface</see>
            to access this property.
            </tip>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItem.DataItem">
      <summary>
            Gets the data item that is bound to this item.
            </summary>
      <value>
        <p>
          <see cref="T:System.Object">System.Object</see>
        </p>
        <p>The data item that is bound to this item.</p>
      </value>
      <remarks>
        <p>
            This property should only be used during data binding. Typically you use this
            property while handling <see cref="E:EO.Web.BaseNavigator.ItemDataBound"></see> event.
            </p>
        <p>
            This following table lists the correspondence between the type of
            <see cref="P:EO.Web.NavigationItemGroup.DataSource"></see> and the type of <b>DataItem</b>:
            <list type="table"><listheader><term>When DataSource is...</term><description>Container.DataItem is...</description></listheader><item><term><see cref="T:System.Data.DataTable"></see> or 
            			<see cref="T:System.Data.DataView"></see></term><description><see cref="T:System.Data.DataRowView"></see></description></item><item><term><see cref="T:System.Data.DataSet"></see>,
            		</term><description><see cref="T:System.Data.DataRow"></see></description></item><item><term><see cref="T:System.Data.IDataReader"></see></term><description><see cref="T:System.Data.IDataRecord"></see></description></item><item><term><see cref="T:System.Collections.IEnumerable"></see></term><description>
            			The element type
            		</description></item></list></p>
      </remarks>
    </member>
    <member name="T:EO.Web.NavigationItemText">
      <summary>
            Represents the main text body of a <see cref="T:EO.Web.NavigationItem"></see> object.
            </summary>
      <remarks>
        <p>
            This class is used by <see cref="T:EO.Web.NavigationItemText">NavigationItem.Text</see> property to control the main content area of an item. 
            Use <see cref="P:EO.Web.NavigationItemText.Html">NavigationItem.Text.Html</see> property to specify the HTML that is displayed on the main content area.	
            The class also allows you to customize horizontal/vertical alignment and paddings of the text.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemText.Html">
      <summary>
            Gets or sets the HTML string that is displayed on main area of the item.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The HTML string that is displayed on main area of the item.</p>
        <p>This property is read/write.</p>
      </value>
      <remarks>
            Use this property to specify the HTML content for an item. Note that ASP.NET
            server control should not be included into this HTML. To nest a ASP.NET server control 
            in your menu item, please drop a <see cref="T:EO.Web.CustomItem">CustomItem</see> control on your 
            Web Page and set the CustomItem's Client ID to the <see cref="P:EO.Web.NavigationItem.CustomItemID">CustomItemID</see> property. 
            See <see href="Web/MenuCommon/ItemsAndGroups/custom_item.html">using custom item</see>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemText.NoWrap">
      <summary>
            Gets or sets a boolean value indicating whether the text appears on the item should continue as one line or wrap into multiple lines. 
            </summary>
      <value>
        <p>
          <see cref="T:System.Boolean">System.Boolean</see>
        </p>
        <p>The Boolean indicating whether or not to wrap the item's text into one line. Default value is true.</p>
        <p>This property is read/write.</p>
      </value>
      <remarks>
        <p>
            Set <b>NoWrap</b> property to <b>false</b> causes the item to wrap the text into multiple lines if the width of the
            group is not wide enough to hold a single line. 
            </p>
        <note>
            Navigation controls can automatically adjust the width of the whole group to fit the longest item
            if the group's <see cref="P:EO.Web.NavigationItemGroup.Width">Width</see> property is not specified. 
            Therefore, in order for Text.NoWrap to take effect, <b>Width</b> property must be specified as well. 
            </note>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemText.Padding">
      <summary>
            Gets the <see cref="T:EO.Web.ElementPaddings"></see>
            object to control the padding of the text on an item. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ElementPaddings">
          </see>
        </p>
            The <b>EelementPaddings</b> object that controls the left, right, top and bottom space between the text and the item's border. 
            <p>This property is read only, however, you can access the properties and methods
            of the object it returns. </p></value>
      <remarks>
            Use <b>ElementPaddings</b> property to specify the right, left, top, bottom paddings for this item's Text. 
            For example, use MenuItem.Text.Padding.Left to specify the space between the left icon and text.
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemText.HorizontalAlign">
      <summary>
            Gets or sets the horizontal alignment of the Text in an item.
            </summary>
      <value>
        <p>
          <see cref="T:System.Web.UI.WebControls.HorizontalAlign">System.Web.UI.WebControls.HorizontalAlign</see>
        </p>
            The HorizontalAlign enumeration specifies how an item's Text should be aligned horizontally.
            <p>This property is read/write. </p></value>
      <remarks>
        <p>
            Use an item's <b>Text.HorizontalAlign</b> property to specify how to align the item's Text horizontally.
            </p>
        <p>
            Value <b>Justify</b> does not apply to an item text.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemText.VerticalAlign">
      <summary>
            Gets or sets the vertical alignment of the text in an item.
            </summary>
      <value>
        <p>
          <see cref="T:System.Web.UI.WebControls.HorizontalAlign">System.Web.UI.WebControls.VerticalAlign</see>
        </p>
        <p>The VerticalAlign enumeration specifies an item's Text should align to the top, bottom or middle.
            Default value is "VerticalAlign.NotSet".</p>
        <p>This property is read / write. </p>
      </value>
      <remarks>
            Use an item's <b>Text.VerticalAlign</b> property to specify how to align the item's text vertically.
            </remarks>
    </member>
    <member name="T:EO.Web.NavigationItemImages">
      <summary>
            Represents images displayed on an item when item is in different states. 
            </summary>
      <remarks>
            Each <b>NavigationItemImages</b> contains a set of URLs for different states, for example, you can use
            <b>Url</b> property to specify the image to be displayed when an 
            item is in "Normal" state, and use <b>HoverUrl</b> property
            to specify the image to be displayed when the item is in "Hover" state. Use 
            these properties to specify images for different states: 
            <list type="bullet"><item><term><see cref="P:EO.Web.NavigationItemImages.Url"></see></term><description>Image URL for "Normal" state.</description></item><item><term><see cref="P:EO.Web.NavigationItemImages.HoverUrl"></see></term><description>Image URL for "Hover" state.</description></item><item><term><see cref="P:EO.Web.NavigationItemImages.ExpandedUrl"></see></term><description>Image URL for "Expanded" state.</description></item><item><term><see cref="P:EO.Web.NavigationItemImages.SelectedUrl"></see></term><description>Image URL for "Selected" state.</description></item><item><term><see cref="P:EO.Web.NavigationItemImages.SelectedHoverUrl"></see></term><description>Image URL for "SelectedHover" state.</description></item><item><term><see cref="P:EO.Web.NavigationItemImages.SelectedExpandedUrl"></see></term><description>Image URL for "SelectedExpanded" state.</description></item><item><term><see cref="P:EO.Web.NavigationItemImages.DisabledUrl"></see></term><description>Image URL for "Disabled" state.</description></item></list><tip>
            You do not need to provide all of the above URLs. Navigation control automatically
            determines which URL in a state to use if the corresponding URL is not defined.
            For example, <b>URL</b> property will be used for all states by default.
            For more information about states and how navigation control switches appearance between different states,
            see <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see>.
            </tip>
            In addition to image URLs, you can also specify padding settings on <b>NavigationItemImages</b> object
            through <see cref="P:EO.Web.NavigationItemImages.Padding">Padding</see> property.
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemImages.Padding">
      <summary>
            Gets the <see cref="T:EO.Web.ElementPaddings"></see> which defines paddings around this item.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ElementPaddings">
          </see>
        </p>
        <p>
        </p>
            This property is read only, however, you can access the properties and methods
            of the object it returns.
            </value>
      <remarks>
            Use the <b>Padding</b> property to specify the left, right, top, bottom or all paddings.
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemImages.Width">
      <summary>
            Gets or sets the pixel for the image's width.
            </summary>
    </member>
    <member name="P:EO.Web.NavigationItemImages.Height">
      <summary>
            Gets or sets the pixel for the image's width.
            </summary>
    </member>
    <member name="P:EO.Web.NavigationItemImages.Url">
      <summary>
            Gets or sets the Url of the image to be displayed. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The string specifies the image's Url. </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Use <b>Url</b> property to specify the image to be displayed in "Normal" state. 
            </p>
        <p>
            Each item has several different states, such as "Hover", "Disabled", "Selected", etc.
            You can specify different Urls for different states. For example, you can use
            <see cref="P:EO.Web.NavigationItemImages.Url">Url</see> to specify an image for "Normal" state,
            and use <see cref="P:EO.Web.NavigationItemImages.HoverUrl">HoverUrl</see> to specify a different image 
            for "Hover" state.
            </p>
        <tip>
            You do not need to provide all of the above URLs unless you do want the item to display different images
            in different states. Usually you just need to provide <b>Url</b> property and it will be used for all states.
            For more information about states and how navigation control switches appearance between different states,
            see <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see>.
            </tip>
        <p>
            If the value of this property is a relative path, 
            <see cref="P:EO.Web.WebControl.ImageBaseDirectory"></see> property could be used as base path, then
            the final result will be ImageBaseDirectory and this property combined together. 
            Note, you can use "~/" to specify a root relative path in all EO.Web URL properties.
            Once the value starts with "~/", ImageBaseDirectory will not be used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemImages.HoverUrl">
      <summary>
            Gets or sets the image URL when mouse is positioned over the item. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The string specifies the image's Url. </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Use <b>HoverUrl</b> property to specify the image when the mouse 
            is positioned over the item.	
            </p>
        <p>
            Each item has several different states, such as "Hover", "Disabled", "Selected", etc.
            You can specify different Urls for different states. For example, you can use
            <see cref="P:EO.Web.NavigationItemImages.Url">Url</see> to specify an image for "Normal" state,
            and use <see cref="P:EO.Web.NavigationItemImages.HoverUrl">HoverUrl</see> to specify a different image 
            for "Hover" state.
            </p>
        <tip>
            You do not need to provide all of the above URLs unless you do want the item to display different images
            in different states. Usually you just need to provide <b>Url</b> property and it will be used for all states.
            For more information about states and how navigation control switches appearance between different states,
            see <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see>.
            </tip>
        <p>
            If the value of this property is a relative path, 
            <see cref="P:EO.Web.WebControl.ImageBaseDirectory"></see> property could be used as base path, then
            the final result will be ImageBaseDirectory and this property combined together. 
            Note, you can use "~/" to specify a root relative path in all EO.Web URL properties.
            Once the value starts with "~/", ImageBaseDirectory will not be used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemImages.ExpandedUrl">
      <summary>
            Gets or sets the image URL when the sub group of this item is expanded.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The string specifies the image's Url. </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Use <b>ExpandedUrl</b> property to specify the image when the sub group of this item is expanded.		
            </p>
        <p>
            Each item has several different states, such as "Hover", "Disabled", "Selected", etc.
            You can specify different Urls for different states. For example, you can use
            <see cref="P:EO.Web.NavigationItemImages.Url">Url</see> to specify an image for "Normal" state,
            and use <see cref="P:EO.Web.NavigationItemImages.HoverUrl">HoverUrl</see> to specify a different image 
            for "Hover" state.
            </p>
        <tip>
            You do not need to provide all of the above URLs unless you do want the item to display different images
            in different states. Usually you just need to provide <b>Url</b> property and it will be used for all states.
            For more information about states and how navigation control switches appearance between different states,
            see <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see>.
            </tip>
        <p>
            If the value of this property is a relative path, 
            <see cref="P:EO.Web.WebControl.ImageBaseDirectory"></see> property could be used as base path, then
            the final result will be ImageBaseDirectory and this property combined together. 
            Note, you can use "~/" to specify a root relative path in all EO.Web URL properties.
            Once the value starts with "~/", ImageBaseDirectory will not be used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemImages.SelectedUrl">
      <summary>
            Gets or sets the image URL when an item's "Selected" property is true. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The string specifies the image's Url. </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Use <b>SelectedUrl</b> property to specify the image when an item
            is in selected state. 
            </p>
        <p>
            Each item has several different states, such as "Hover", "Disabled", "Selected", etc.
            You can specify different Urls for different states. For example, you can use
            <see cref="P:EO.Web.NavigationItemImages.Url">Url</see> to specify an image for "Normal" state,
            and use <see cref="P:EO.Web.NavigationItemImages.HoverUrl">HoverUrl</see> to specify a different image 
            for "Hover" state.
            </p>
        <tip>
            You do not need to provide all of the above URLs unless you do want the item to display different images
            in different states. Usually you just need to provide <b>Url</b> property and it will be used for all states.
            For more information about states and how navigation control switches appearance between different states,
            see <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see>.
            </tip>
        <p>
            If the value of this property is a relative path, 
            <see cref="P:EO.Web.WebControl.ImageBaseDirectory"></see> property could be used as base path, then
            the final result will be ImageBaseDirectory and this property combined together. 
            Note, you can use "~/" to specify a root relative path in all EO.Web URL properties.
            Once the value starts with "~/", ImageBaseDirectory will not be used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemImages.SelectedHoverUrl">
      <summary>
            Gets or sets the image URL when an item's "Selected" property is true and 
            mouse is positioned over the item. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The string specifies the image's Url. </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Use <b>SelectedHoverUrl</b> property to specify the image when an item
            is in selected state and mouse is positioned over the item. 
            </p>
        <p>
            Each item has several different states, such as "Hover", "Disabled", "Selected", etc.
            You can specify different Urls for different states. For example, you can use
            <see cref="P:EO.Web.NavigationItemImages.Url">Url</see> to specify an image for "Normal" state,
            and use <see cref="P:EO.Web.NavigationItemImages.HoverUrl">HoverUrl</see> to specify a different image 
            for "Hover" state.
            </p>
        <tip>
            You do not need to provide all of the above URLs unless you do want the item to display different images
            in different states. Usually you just need to provide <b>Url</b> property and it will be used for all states.
            For more information about states and how navigation control switches appearance between different states,
            see <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see>.
            </tip>
        <p>
            If the value of this property is a relative path, 
            <see cref="P:EO.Web.WebControl.ImageBaseDirectory"></see> property could be used as base path, then
            the final result will be ImageBaseDirectory and this property combined together. 
            Note, you can use "~/" to specify a root relative path in all EO.Web URL properties.
            Once the value starts with "~/", ImageBaseDirectory will not be used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemImages.SelectedExpandedUrl">
      <summary>
            Gets or sets the image URL when an item's "Selected" property is true and 
            the sub group of this item is expanded. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The string specifies the image's Url. </p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Use <b>SelectedExpandedUrl</b> property to specify the image when an item
            is in selected state and the sub group of this item is expanded. 
            </p>
        <p>
            Each item has several different states, such as "Hover", "Disabled", "Selected", etc.
            You can specify different Urls for different states. For example, you can use
            <see cref="P:EO.Web.NavigationItemImages.Url">Url</see> to specify an image for "Normal" state,
            and use <see cref="P:EO.Web.NavigationItemImages.HoverUrl">HoverUrl</see> to specify a different image 
            for "Hover" state.
            </p>
        <tip>
            You do not need to provide all of the above URLs unless you do want the item to display different images
            in different states. Usually you just need to provide <b>Url</b> property and it will be used for all states.
            For more information about states and how navigation control switches appearance between different states,
            see <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see>.
            </tip>
        <p>
            If the value of this property is a relative path, 
            <see cref="P:EO.Web.WebControl.ImageBaseDirectory"></see> property could be used as base path, then
            the final result will be ImageBaseDirectory and this property combined together. 
            Note, you can use "~/" to specify a root relative path in all EO.Web URL properties.
            Once the value starts with "~/", ImageBaseDirectory will not be used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemImages.DisabledUrl">
      <summary>
            Gets or sets the image URL when an item's <see cref="P:EO.Web.NavigationItem.Disabled"></see> property is true.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
        <p>The string specifies the image's Url. </p>
            This property is read/write.
            </value>
      <remarks>
            Use <b>DisabledUrl</b> property to specify the Url of the image when the item
            is in "Disabled" state. 
            <p>
            Each item has several different states, such as "Hover", "Disabled", "Selected", etc.
            You can specify different Urls for different states. For example, you can use
            <see cref="P:EO.Web.NavigationItemImages.Url">Url</see> to specify an image for "Normal" state,
            and use <see cref="P:EO.Web.NavigationItemImages.HoverUrl">HoverUrl</see> to specify a different image 
            for "Hover" state.
            </p><tip>
            You do not need to provide all of the above URLs unless you do want the item to display different images
            in different states. Usually you just need to provide <b>Url</b> property and it will be used for all states.
            For more information about states and how navigation control switches appearance between different states,
            see <see href="Web/MenuCommon/StyleAndAppearance/item_state.html">item states</see>.
            </tip><p>
            If the value of this property is a relative path, 
            <see cref="P:EO.Web.WebControl.ImageBaseDirectory"></see> property could be used as base path, then
            the final result will be ImageBaseDirectory and this property combined together. 
            Note, you can use "~/" to specify a root relative path in all EO.Web URL properties.
            Once the value starts with "~/", ImageBaseDirectory will not be used.
            </p></remarks>
    </member>
    <member name="T:EO.Web.NavigationItemCollection">
      <summary>
            NavigationItemCollection class is a collection of <see cref="T:EO.Web.NavigationItem"></see> objects. 
            </summary>
      <remarks>
        <p>
            You can programmatically manage a NavigationItemCollection object by 
            adding and removing <b>NavigationItem</b>. 
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.NavigationItemCollection.GetEnumerator">
      <summary>
            This class implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="P:EO.Web.NavigationItemCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read only. Always return <b>false</b>.		
            </summary>
    </member>
    <member name="M:EO.Web.NavigationItemCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to be removed. 
            </param>
    </member>
    <member name="M:EO.Web.NavigationItemCollection.Clear">
      <summary>
            Removes all items from the collection. 
            </summary>
    </member>
    <member name="P:EO.Web.NavigationItemCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            Always return <b>false</b>.
            </summary>
    </member>
    <member name="P:EO.Web.NavigationItemCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the MenuItemCollection is synchronized (thread-safe).
            Always returns <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.NavigationItemCollection.Count">
      <summary>
            Gets the number of elements contained in the collection.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of elements in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of elements contained in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.NavigationItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the collection. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.NavigationItemCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:EO.Web.NavigationItemCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the collection.
            </summary>
      <param name="c">The collection to be added. </param>
    </member>
    <member name="M:EO.Web.NavigationItemCollection.CreateSeparator">
      <summary>
            Creates a separator item.
            </summary>
      <returns>
            The newly created separator item.
            </returns>
      <remarks>
        <p>
            This function creates an item, sets the item's 
            <see cref="P:EO.Web.NavigationItem.IsSeparator"></see> to <b>true</b>, and then
            return newly created the item.
            </p>
        <p>
            Separator is a special item whose solely purpose is to divide regular items. Hence, 		
            some of the properties specific to a normal item are ignored in a separator. 
            </p>
        <p>
            Separator does not response to mouse event, only the 
            <see cref="P:EO.Web.NavigationItem.NormalStyle"></see> is rendered, all other styles,
            including 
            <see cref="P:EO.Web.NavigationItem.SelectedStyle"></see> and 
            <see cref="P:EO.Web.NavigationItem.DisabledStyle"></see> are ignored.
            </p>
      </remarks>
      <seealso cref="P:EO.Web.NavigationItem.IsSeparator">
      </seealso>
    </member>
    <member name="M:EO.Web.NavigationItemCollection.AddSeparator">
      <summary>
            Creates a separator and adds it into the collection.  
            </summary>
      <returns>The newly created separator item.</returns>
    </member>
    <member name="T:EO.Web.Orientation">
      <summary>
            Specifies the orientation of the item group.
            </summary>
      <remarks>
        <b>Orientation</b> property is used by Menu. 
            You can specify the menu to be rendered horizontally or vertically.
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:EO.Web.BaseNavigator.Orientation"></see></term><description>The orientation for the top level menu</description></item><item><term><see cref="P:EO.Web.BaseMenuItemGroup.Orientation"></see></term><description>The orientation for the group of an item.</description></item></list></remarks>
    </member>
    <member name="F:EO.Web.Orientation.Auto">
      <summary>
            Automatically determines the Orientation.
            </summary>
    </member>
    <member name="F:EO.Web.Orientation.Horizontal">
      <summary>
            To render the menu  or group horizontally.
            </summary>
    </member>
    <member name="F:EO.Web.Orientation.Vertical">
      <summary>
            To render the menu or group vertically.
            </summary>
    </member>
    <member name="T:EO.Web.NavigationItemGroup">
      <summary>
            Represents a group of NavigationItems.
            </summary>
    </member>
    <member name="P:EO.Web.NavigationItemGroup.DefaultItemLookID">
      <summary>
            Gets or sets the default look ID that the items of this group will use to apply appearance settings.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The default look ID for items in this group.
            </value>
      <remarks>
        <p>
            This property is used if the child item's LookID is the default value <b>Auto</b>.
            </p>
        <tip>
            Use this property if you want different groups to have different look, but
            all items in the same group to have the same look. 
            </tip>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemGroup.Width">
      <summary>
            Gets and sets the width (in pixel) of the group.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
            The width (in pixel) of the group. By default, this property is adjusted automatically.
            <p>This property is read /write.</p></value>
      <remarks>
        <p>
            Usually you do not need to set this property because by default group width is  
            automatically adjusted to fit the widest item. 
            </p>
        <p>
            This property is ignored for a sliding pane in a slide menu or a tab group in
            a TabStrip, in both cases the width is determined by the container's
            width.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemGroup.Height">
      <summary>
            Gets and sets the height (in pixel) of the group.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
            The height (in pixel) of the group. By default, this property is adjusted automatically.
            <p>This property is read /write.</p></value>
      <remarks>
        <p>
            By default, height is automatically adjusted to fit all items in the group. 
            However, you can explicitly set this property to a value that is less than the total item height
            to enable scrolling if it is supported. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemGroup.ItemSpacing">
      <summary>
            Gets or sets the space (in pixel) between each items in this group.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
            The space (in pixel) between items in the group.
            <p>This property is read/write.</p></value>
      <remarks>
        <p>
            Use <b>ItemSpacing</b> to specify the space between items in this group.
            </p>
        <p>
            The default value is <see cref="F:EO.Web.Consts.IntNotSet"></see>, 
            in which case the group object will try to get the value from the parent item's look item.
            If <b>ItemSpacing</b> for the parent item's look item is also <b>IntNotSet</b>, then the 
            default value 0 is used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemGroup.CausesValidation">
      <summary>
            Gets or sets the default setting of whether clicking an item in this group causes validation to be
            performed on any controls that require validation. 
            </summary>
      <value>
        <see cref="T:EO.Web.NullableBool">
        </see>
      </value>
      <remarks>
        <p>
            Setting this property to <see cref="F:EO.Web.NullableBool.True"></see> causes 
            validation to be performed on any controls that require validation		
            </p>
        <p>
          <b>Value Inheritance</b> section lists generic rules to determine final value during runtime. 
            </p>
      </remarks>
      <inherit type="EO.Web.NullableBool">
      </inherit>
    </member>
    <member name="P:EO.Web.NavigationItemGroup.RaisesServerEvent">
      <summary>
            Gets or sets a value indicating whether the server side event should be raised when an item in this group is clicked.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.NullableBool">
          </see>
        </p>
        <p>A NullableBool indicates whether or not to raise server side postback event when an item in this group is clicked.</p>
            This property is read/write.
            </value>
      <remarks>
        <p>
            Setting this property to <see cref="F:EO.Web.NullableBool.True"></see> causes 
            the page to raise server side <see cref="E:EO.Web.BaseNavigator.ItemClick"></see> postback event 
            when an item in this group is clicked.
            You can handle the event in <b>ItemClick</b> event handler.
            In the event handler, the clicked item can be accessed through 
            <see cref="T:EO.Web.NavigationItemEventArgs"></see>'s properties.
            </p>
        <b>Value Inheritance</b> section lists generic rules to determine final value during runtime, 
            however, there is one exception for <b>slide menu's top level items</b>: 		
            <list type="bullet"><item>For slide menu, a top level item's RaisesServerEvent must be set to true 
            	to raise server event when that item is clicked. Because by default slide menu's 
            	top level items expand sub menu panes when clicked.
            	</item></list></remarks>
      <inherit type="EO.Web.NullableBool">
      </inherit>
      <seealso cref="E:EO.Web.BaseNavigator.ItemClick">ItemClick event</seealso>
    </member>
    <member name="P:EO.Web.NavigationItemGroup.Style">
      <summary>
            Gets the <see cref="T:EO.Web.ElementStyle">ElementStyle</see> object 
            that controls the appearance of the group.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.ElementStyle">
          </see>
        </p>
        <p>An ElementStyle object that controls the appearance settings, such as font, padding, backgroup, CSS class name, etc.</p>
        <p>This property is read only, however, you can access the returned object's properties and methods.</p>
      </value>
      <remarks>
        <p>
          <b>Style</b> property is applied to the entire group. You can use this property to control
            the group's border, color, paddings, cursor, etc.
            </p>
        <p>
            See <see cref="T:EO.Web.ElementStyle">ElementStyle</see> class 
            and <see href="Web/MenuCommon/StyleAndAppearance/menu_group_appearance.html#style">Using NavigationGroup.Style</see> 
            for more information about how to use this property.
            </p>
        <tip>
            This property is usually used to specify the group's border, padding and cursor.
            </tip>
      </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemGroup.Bindings">
      <summary>
            Gets the collection of bindings that map fields or properties of the 
            data source to item properties.
            </summary>
      <remarks>
        <p>
            Use <b>Bindings</b> to define the mappings between data fields and item properties as
            well as the format strings. For example, the following defines a binding to map "WebSite"
            column in data source to "Text-Html" property in menu item:
            </p>
        <code>
            &lt;eo:Menu runat="server" DataFields="Country|State|City"&gt;
                &lt;Bindings&gt;
                    &lt;eo:MenuDataBinding
                        Property="Text-Html"
                        DataField="WebSite"
                        Depth="2"
                &lt;/eo:Bindings&gt;
            &lt;/eo:Menu&gt;
            </code>
        <p>
            You can define data binding for the whole control or only for an individual group.
            To define binding for the whole control, add binding to <see cref="T:EO.Web.BaseNavigator"></see>'s Bindings property;
            to define binding for an individual group, add binding to the <see cref="T:EO.Web.NavigationItemGroup"></see>'s Bindings property. 
            </p>
            
            For more information about data binding, see <see href="Web/MenuCommon/DataBinding/DataBinding_overview.html">data binding</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemGroup.DataSource">
      <summary>
            Gets or sets a data source used to populate items. 
            </summary>
      <value>
            A 
            <see cref="T:System.Data.DataSet">DataSet</see>, 
            <see cref="T:System.Data.DataTable">DataTable</see>, 
            <see cref="T:System.Data.DataView">DataView</see> or any objects that implements 
            <see cref="T:System.Data.IDataReader">IDataReader</see> or
            <see cref="T:System.Collections.IEnumerable">IEnumerable</see>.
            The default value is a null reference (Nothing in Visual Basic).
            </value>
      <remarks>
            Use the <b>DataSource</b> property to specify the source of values to bind to
            a <b>BaseNavigator</b> control. The data source can be an object of one of the following types:
            <list type="bullet"><item><b>DataSet</b></item> - OR - 
            	<item><b>DataTable</b></item> - OR -
            	<item><b>DataView</b></item> - OR -
            	<item><b>IDataReader</b></item> - OR -
            	<item><b>IEnumerable</b></item></list><p>
            Controls inherits from <see cref="T:EO.Web.BaseNavigator"></see> can populate multi-level items from 
            a <b>DataSet</b>, <b>DataTable</b>, <b>DataView</b> or <b>IDataReader</b>.
            When <b>DataSet</b> is used as the <b>DataSource</b>, <see cref="T:System.Data.DataRelation"></see> objects
            defined in the <b>DataSet</b> is used to abstract hierarchical data structure from the <b>DataSet</b>.
            When <b>DataTable</b>, <b>DataView</b> or <b>IDataReader</b> is used, <see cref="P:EO.Web.NavigationItemGroup.DataFields"></see>
            must be set to provide a list of key fields used to abstract hierarchical data structure from the data source.
            </p><p>
            When <b>DataSource</b> is an object that implements <b>IEnumerable</b>, only one level of items
            are populated.
            </p>
            See <see href="Web/MenuCommon/DataBinding/DataBinding_overview.html">data binding</see> for details.
            </remarks>
    </member>
    <member name="P:EO.Web.NavigationItemGroup.DataFields">
      <summary>
            Specifies a list of fields used during data binding 
            when binding to an ADO.NET data object. 
            Use '|' to separate multiple fields. 
            </summary>
      <remarks>
        <p>
            Controls inheriting from BaseNavigator have hierarchical data structure.
            In order to do a successful binding, data in data source must be presented 
            hierarchically. Some data source are not hierarchical, e.g, a single DataTable; and 
            some data source are hierarchical, e.g, several DataTables with relationships in a DataSet. 
            Therefore, DataFields property has different usage under the above two different scenarios:  		
            </p>
        <p>
            When binding to a <see cref="T:System.Data.DataSet">DataSet</see>,
            since DataSet already contains hierarchical data, DataFields specifies a list of field names 
            whose value will be used as item text.
            </p>
        <p>When binding to 
            <see cref="T:System.Data.DataTable"></see>, <see cref="T:System.Data.DataView"></see>
            or an object that implements <see cref="T:System.Data.IDataReader"></see> interface. 
            because their data structures are not hierarchical, 
            <b>DataFields</b> must be provided to abstract hierarchical data structure from those data
            source. For example,
            Data fields "Country|City|ZipCode" abstract hierarchical
            structure from the following <b>DataTable</b> (or <b>DataView</b>, <b>IDataReader</b>):
            <div class="tablediv"><table class="dtTABLE" cellspacing="0"><tr valign="top"><th>Country</th><th>City</th><th>ZipCode</th></tr><tr><td>U.S.A</td><td>New York</td><td>10471</td></tr><tr><td>U.S.A</td><td>New York</td><td>10471</td></tr><tr><td>Canada</td><td>Toronto</td><td>M1W2V6</td></tr><tr><td>U.K</td><td>London</td><td>W114BE</td></tr></table></div></p>
        <p>
            And results the following menu:<br /><img src="images/datafields_demo.gif"></img></p>
        <p>
            You can use a JOIN to easily return such data from a database.
            </p>
        <p>
            By default, values in fields specified in <b>DataFields</b> will also be used to populate 
            <see cref="P:EO.Web.NavigationItemText.Html"></see>, however, you can change this mapping
            by providing your own <see cref="T:EO.Web.DataBinding"></see> object through <see cref="P:EO.Web.BaseNavigator.Bindings">Bindings</see> 
            property.
            </p>
        <p>
          <b>DataFields</b> is not used when bind to an object that implement 
            <see cref="T:System.Collections.IEnumerable">IEnumerable</see>.
            </p>
        <p>
            Refer to <see href="Web/MenuCommon/DataBinding/DataBinding_overview.html">data binding</see> for more details.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.NavigationItemGroup.DataBind">
      <summary>
            Populate items from a data source.
            </summary>
      <remarks>
        <p>
            BaseNavigator controls can populate the whole control or individual group from 
            the following data sources: 
            <see cref="T:System.Data.DataSet">DataSet</see>, 
            <see cref="T:System.Data.DataTable">DataTable</see>, 
            <see cref="T:System.Data.DataView">DataView</see> or any objects that implements 
            <see cref="T:System.Data.IDataReader">IDataReader</see> or
            <see cref="T:System.Collections.IEnumerable">IEnumerable</see>.
            </p>
        <p>
            To populate items from a data source:
            <list type="number"><item><description>Assigning the data source to the <see cref="P:EO.Web.BaseNavigator.DataSource"></see> or 
            	<see cref="P:EO.Web.NavigationItemGroup.DataSource"></see>;</description></item><item><description>
            	If the data source is a <b>DataTable</b>, <b>DataView</b> or <b>IDataReader</b>,
            	you should also provide <see cref="P:EO.Web.BaseNavigator.DataFields"></see> to abstract
            	hierarchical data structure from the data source;
            	</description></item><item><description>
            	Optionally, use <see cref="T:EO.Web.DataBinding"></see> object to define the mappings between data fields and the properties for a <b>NavigationItem</b>.
            	If this step is omitted, fields specifies in <see cref="P:EO.Web.BaseNavigator.DataFields"></see> will be used to fill <see cref="P:EO.Web.NavigationItemText.Html">NavigationItem.Text.Html</see>,
            	this step is mandatory if <b>DataSource</b> is a <b>DataSet</b> object.
            	</description></item><item>
            	Call <b>BaseNavigator.DataBind</b> or <see cref="M:EO.Web.NavigationItemGroup.DataBind"></see> to populate the items.
            </item></list></p>
            See <see href="Web/MenuCommon/DataBinding/DataBinding_overview.html">data binding</see> for more details.
            </remarks>
      <seealso cref="P:EO.Web.BaseNavigator.DataSource">
      </seealso>
    </member>
    <member name="T:EO.Web.ProgressBar">
      <summary>
            A ProgressBar is a graphical component that provides information 
            about the status of a given task.
            </summary>
      <remarks>
        <p>
            A ProgressBar is a graphical component that provides information 
            about the status of a given task. It uses an image or solid color bar
            to indicate progress 
            as a percentage of work completed and, if configured, with a text 
            message at the center. When a website is engaged in a long task, 
            it is useful to use ProgressBar
            to inform user what is going on and how long they will have to wait.	
            </p>
        <p>
            ProgressBar is usually used in conjunction with your client side 
            JavaScript that performs or initiates the tasks. The JavaScript code calls
            <see href="JSDoc.Public.Web.ProgressBar.setValue.html">setValue</see>
            to set the completed percentage value to ProgressBar, which, in 
            turn, moves the indicator image. 
            </p>
        <p>
            A ProgressBar can also be used as a generic purpose 
            "gauge", such as "storage usage", "bandwidth usage", etc. 
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.ProgressBar.#ctor">
      <summary>
            Initializes a new instance of ProgressBar class.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressBar.BackgroundImageLeft">
      <summary>
            Gets or sets the URL of the background image for the left edge of the progess bar.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressBar.BackgroundImage">
      <summary>
            Gets or sets the URL of the background image for the progess bar.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressBar.BackgroundImageRight">
      <summary>
            Gets or sets the URL of the background image for the right edge of the progess bar.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressBar.IndicatorImage">
      <summary>
            Gets or sets the URL of the image for the progess indicator.
            </summary>
      <remarks>
            A progress indicator is a special image used to indicate the current
            position of the ProgressBar. You can move the indicator image by 
            calling 
            <see href="JSDoc.Public.Web.ProgressBar.setValue.html">setValue</see>
            to set
            the ProgressBar's value.
            </remarks>
    </member>
    <member name="P:EO.Web.ProgressBar.IndicatorIncrement">
      <summary>
            Gets or sets the minimum incrementing width (in pixel) of the indicator image
            when the indicator is advancing to a new position.
            </summary>
      <remarks>
            When the ProgressBar's <see cref="P:EO.Web.ProgressBar.Value">Value</see> property
            is changed, the <see cref="P:EO.Web.ProgressBar.IndicatorImage"></see> will  
            advance to the new position. 
            
            This property controls the minimum width the indicator has to advance. If
            the advancing width is less than this minimum width, the indicator image
            will not move.
            </remarks>
    </member>
    <member name="P:EO.Web.ProgressBar.RepeatIndicatorImage">
      <summary>
            Gets or sets whether indicator image should be repeated or moved.
            </summary>
      <remarks>
            When this property is <b>true</b>, <see cref="P:EO.Web.ProgressBar.IndicatorImage"></see>
            will be repeated to fill the space between the left edge and 
            the current position; Otherwise <see cref="P:EO.Web.ProgressBar.IndicatorImage"></see> is
            right-aligned to the current position. This may leave a blank segment
            between the left edge and the indicator image.
            </remarks>
    </member>
    <member name="P:EO.Web.ProgressBar.IndicatorColor">
      <summary>
            Gets or sets the color of the ProgressBar's indicator.
            </summary>
      <remarks>
            Use this property to create a solid color progress bar without using images.
            </remarks>
    </member>
    <member name="P:EO.Web.ProgressBar.Maximum">
      <summary>
            Gets or sets the maximum value of the range of the ProgressBar.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressBar.Minimum">
      <summary>
            Gets or sets the maximum value of the range of the ProgressBar.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressBar.Value">
      <summary>
            Gets or sets the current position of the ProgressBar.
            </summary>
      <remarks>
            The minimum and maximum values of the Value property 
            are specified by the <see cref="P:EO.Web.ProgressBar.Minimum"></see> and 
            <see cref="P:EO.Web.ProgressBar.Maximum"></see> properties. 
            This property enables you to set an initial value on the
            server side. Most of time you would need to call 
            <see href="JSDoc.Public.Web.ProgressBar.setValue.html">setValue</see>
            on the client side to actually "move" the progress bar.
            </remarks>
    </member>
    <member name="P:EO.Web.ProgressBar.ShowPercentage">
      <summary>
            Gets or sets a value indicating whether to display 
            the currently completed percentage text at the center of the 
            ProgressBar.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressBar.CausesValidation">
      <summary>
            Gets or sets a value indicating whether validation is performed when the 
            progress bar triggers <see cref="E:EO.Web.ProgressBar.RunTask"></see> event.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressBar.StartTaskButton">
      <summary>
            Gets or sets the ID of the button that starts a server side task.
            </summary>
      <remarks>
            For more details about how to associated the <b>ProgressBar</b>
            with a server side task, see <a href="Web/ProgressBar/action_server.html">here</a>.
            </remarks>
    </member>
    <member name="P:EO.Web.ProgressBar.StopTaskButton">
      <summary>
            Gets or sets the ID of the button that stops a server side task.
            </summary>
      <remarks>
            For more details about how to associated the <b>ProgressBar</b>
            with a server side task, see <a href="Web/ProgressBar/action_server.html">here</a>.
            </remarks>
    </member>
    <member name="P:EO.Web.ProgressBar.ClientSideOnValueChanged">
      <summary>
            Gets or sets the name of the client side function that is called
            when the ProgressBar's value has changed.
            </summary>
      <remarks>
            The client side <a href="JSDoc.Public.Web.ProgressBar.html"></a> object is
            passed as the first parameter when this handler is called.
            </remarks>
    </member>
    <member name="P:EO.Web.ProgressBar.ClientSideOnTaskDone">
      <summary>
            Gets or sets the name of the client side function that is called
            when a server side task associated with this ProgressBar has finished.
            </summary>
      <remarks>
            The client side <a href="JSDoc.Public.Web.ProgressBar.html"></a> object is
            passed as the first parameter when this handler is called.
            </remarks>
    </member>
    <member name="M:EO.Web.ProgressBar.RegisterTaskNotify(EO.Web.ProgressTaskEventHandler,EO.Web.ProgressTaskEventHandler,EO.Web.ProgressTaskEventHandler)">
      <summary>
            Registers callbacks to be called when a task is created,
            updated, or stopped.
            </summary>
      <param name="taskCreatedHandler">Event handler to be called when a task is created.</param>
      <param name="taskProgressedHandler">Event handler to be called when a task is updated.</param>
      <param name="taskStoppedHandler">Event handler to be called when a task is stopped.</param>
      <remarks>
            All arguments are optional. Pass <b>null</b> (Visual Basic <b>Nothing</b>)
            if you are not interested in a particular event.
            </remarks>
    </member>
    <member name="E:EO.Web.ProgressBar.RunTask">
      <summary>
            Occurs to execute the server side task.
            </summary>
      <remarks>
        <p>
          <b>Note:</b> This is a very special event. You can not 
            update any other UI element other than moving the progress 
            bar inside this event handler. For example, setting a 
            Label's Visible to true will not work. All such calls
            are completely ignored.
            </p>
        <p>
            Please refer to the sample code for possible workarounds
            for this restriction.
            </p>
      </remarks>
    </member>
    <member name="T:EO.Web.ProgressTaskEventArgs">
      <summary>
            Provides data for any events that are related to a server side
            task associated to a <see cref="T:EO.Web.ProgressBar"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressTaskEventArgs.TaskID">
      <summary>
            Gets the unique ID of the task.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressTaskEventArgs.IsStopped">
      <summary>
            Returns a value indicating whether the task has been stopped.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressTaskEventArgs.Value">
      <summary>
            Returns the current value.
            </summary>
    </member>
    <member name="P:EO.Web.ProgressTaskEventArgs.ExtraData">
      <summary>
            Returns the current additional data.
            </summary>
    </member>
    <member name="M:EO.Web.ProgressTaskEventArgs.UpdateProgress(System.Int32,System.String)">
      <summary>
            Updates the progress.
            </summary>
      <param name="newValue">
            The new progress bar value. This value should be between
            <see cref="P:EO.Web.ProgressBar.Minimum"></see> and 
            <see cref="P:EO.Web.ProgressBar.Maximum"></see>.
            </param>
      <param name="extraData">
            Additional data to be sent to the client. This data can
            be retrieved by calling
            <a href="JSDoc.Public.Web.ProgressBar.getExtraData.html"></a>
            on the client side. Usually you would call this method
            inside your client side
            <see cref="P:EO.Web.ProgressBar.ClientSideOnValueChanged"></see>
            handler.
            </param>
      <remarks>
            Call this function frequently inside your 
            <see cref="E:EO.Web.ProgressBar.RunTask"></see> handler
            to update the progress information on the client side.
            In addition to pass the new progress value, you can also
            pass additional information to the client via 
            <i>extraData</i> parameter.
            </remarks>
      <returns>
            Returns <b>false</b> if the <see cref="T:EO.Web.ProgressBar" /> task has already
            been canceled (due to user action on the client side), otherwise <b>true</b>.
            </returns>
    </member>
    <member name="M:EO.Web.ProgressTaskEventArgs.UpdateProgress(System.Int32)">
      <summary>
            Updates the progress.
            </summary>
      <param name="newValue">The new progress value.</param>
    </member>
    <member name="T:EO.Web.ProgressTaskEventHandler">
      <summary>
            Represents the method that will handle any events that are raised 
            during a server side task associated with a <see cref="T:EO.Web.ProgressBar"></see> control.
            </summary>
    </member>
    <member name="T:EO.Web.ScriptManager">
      <summary>
            EO.Web ScriptManager manages client side script for a page that uses one or more EO.Web Controls.
            </summary>
      <remarks>
            It is usually not necessary to use this control in a page because
            any EO.Web control can serve the role of ScriptManager. It is
            only necessary to place an EO.Web ScriptManager in the page when 
            you use ASP.NET AJAX and did not initially render any EO.Web control in the
            page but subsequently wish to render one or more EO.Web control
            after an AJAX call. 
            </remarks>
    </member>
    <member name="M:EO.Web.ScriptManager.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.ScriptManager"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.ScriptManager.CombineJSFiles">
      <summary>
            Gets or sets a value indicating whether all JavaScript files 
            should be combined into one.
            </summary>
      <remarks>
        <p>
            EO.Web Controls can automatically combine all EO.Web JavaScript
            files used by a page to a single JavaScript files. Follow these
            steps to use this feature:
            </p>
        <list type="number">
          <item>Enable physical JavaScript files by following steps
            	outlined <a href="Web/InstallationAndDeployment/deploy.html">here</a>;</item>
          <item>Place a <see cref="T:EO.Web.ScriptManager"></see>
            	control in the page before all other EO.Web controls;
            	</item>
          <item>
            	Set the <see cref="T:EO.Web.ScriptManager"></see>'s
            	<see cref="P:EO.Web.ScriptManager.CombineJSFiles"></see> property to true.
            	</item>
        </list>
        <p>
            At runtime, EO.Web will combine all JavaScript files used
            by the page into a single JavaScript file in the directory
            you specified. 
            </p>
        <p>
          <b>Note:</b> While combining JavaScript files is usually
            considered good for performance, it should only be used
            if you only use one of the controls, or all controls used
            are based on the same page (most likely a master page).
            Otherwise each page can generate a different combined
            JavaScript file, which would considerably deteriorate
            the overall site performance.
            </p>
      </remarks>
    </member>
    <member name="T:EO.Web.Shortcut">
      <summary>
            A structure used to configure the shortcut key.
            </summary>
    </member>
    <member name="F:EO.Web.Shortcut.Empty">
      <summary>
            Represents a null shortcut.
            </summary>
    </member>
    <member name="M:EO.Web.Shortcut.#ctor(System.String)">
      <summary>
            Creates a new instance of Shortcut class.
            </summary>
      <param name="shortcut">The string representation of the shortcut.
            For example, "Ctrl+A" or "Shift+DELETE". 
            </param>
    </member>
    <member name="P:EO.Web.Shortcut.Ctrl">
      <summary>
            Gets or sets the boolean value indicating if the Ctrl key should be held.
            </summary>
    </member>
    <member name="P:EO.Web.Shortcut.Shift">
      <summary>
            Gets or sets the boolean value indicating if the Shift key should be held.
            </summary>
    </member>
    <member name="P:EO.Web.Shortcut.Alt">
      <summary>
            Gets or sets the boolean value indicating if the Alt key should be held.
            </summary>
    </member>
    <member name="P:EO.Web.Shortcut.KeyCode">
      <summary>
            Gets or sets the main key for the shortcut.
            </summary>
    </member>
    <member name="M:EO.Web.Shortcut.op_Equality(EO.Web.Shortcut,EO.Web.Shortcut)">
      <summary>
            Tests whether two specified <see cref="T:EO.Web.Shortcut"></see> structures are equivalent.
            </summary>
      <param name="left">
            The <see cref="T:EO.Web.Shortcut"></see> structure that is to the left of the equality operator. 
            </param>
      <param name="right">
            The <see cref="T:EO.Web.Shortcut"></see> structure that is to the right of the equality operator. 
            </param>
      <returns>
            This operator returns <b>true</b> if the two <see cref="T:EO.Web.Shortcut"></see> 
            structures are equal; otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="M:EO.Web.Shortcut.op_Inequality(EO.Web.Shortcut,EO.Web.Shortcut)">
      <summary>
            Tests whether two specified <see cref="T:EO.Web.Shortcut"></see> structures are different.
            </summary>
      <param name="left">
            The <see cref="T:EO.Web.Shortcut"></see> structure that is to the left of the inequality operator. 
            </param>
      <param name="right">
            The <see cref="T:EO.Web.Shortcut"></see> structure that is to the right of the inequality operator. 
            </param>
      <returns>
            This operator returns <b>true</b> if the two <see cref="T:EO.Web.Shortcut"></see> 
            structures are different; otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="T:EO.Web.Slider">
      <summary>
            Represents a control that lets the user select a single value from a range of values 
            by moving a thumb along a track.
            </summary>
    </member>
    <member name="M:EO.Web.Slider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.Slider"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.Slider.Value">
      <summary>
            Gets or sets the slider value.
            </summary>
    </member>
    <member name="T:EO.Web.SliderTickPosition">
      <summary>
            Specifies slider tick mark or label position.
            </summary>
    </member>
    <member name="F:EO.Web.SliderTickPosition.Auto">
      <summary>
            Automatically determines the target's position.
            </summary>
    </member>
    <member name="F:EO.Web.SliderTickPosition.TopLeft">
      <summary>
            Displays the target on the top or left side of the track bar.
            </summary>
    </member>
    <member name="F:EO.Web.SliderTickPosition.BottomRight">
      <summary>
            Displays the target on the bottom or right side of the track bar.
            </summary>
    </member>
    <member name="F:EO.Web.SliderTickPosition.Both">
      <summary>
            Displays the target on both sides of the track bar.
            </summary>
    </member>
    <member name="F:EO.Web.SliderTickPosition.None">
      <summary>
            Does not display the target.
            </summary>
    </member>
    <member name="T:EO.Web.SliderBase">
      <summary>
        <see cref="T:EO.Web.SliderBase">
        </see> is the base class for both
            <see cref="T:EO.Web.Slider"></see> and <see cref="T:EO.Web.RangeSlider"></see>.
            </summary>
    </member>
    <member name="M:EO.Web.SliderBase.#ctor">
      <summary>
            Initialize a new instance of the <see cref="T:EO.Web.SliderBase"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.IncreaseButton">
      <summary>
            Gets or sets increase button settings.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.DecreaseButton">
      <summary>
            Gets or sets decrease button settings.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.Track">
      <summary>
            Gets or sets track settings.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.SelectedTrack">
      <summary>
            Gets or sets selected track settings.
            </summary>
      <remarks>
            The "selected track" is the portion of the track that is:
            <list type="bullet"><item>
                    From <see cref="P:EO.Web.SliderBase.MinimumValue"></see> to <see cref="P:EO.Web.Slider.Value"></see>
                    for a <see cref="T:EO.Web.Slider"></see> control;
                </item><item>
                    From <see cref="P:EO.Web.RangeSlider.LowValue"></see> to <see cref="P:EO.Web.RangeSlider.HighValue"></see>
                    for a <see cref="T:EO.Web.RangeSlider"></see> control;
                </item></list></remarks>
    </member>
    <member name="P:EO.Web.SliderBase.Thumb">
      <summary>
            Gets or sets the thumb settings.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.SmallTickImage">
      <summary>
            Gets or sets the image for small tick marks.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.LargeTickImage">
      <summary>
            Gets or sets the image for large tick marks.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.LargeTickValueCssClass">
      <summary>
            Gets or sets the CSS class applied to the large tick mark value labels.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.LabelCssClass">
      <summary>
            Gets or sets the CSS class applied to the labels.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.MinimumValue">
      <summary>
            Gets or sets the minimum value of the slider.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.MaximumValue">
      <summary>
            Gets or sets the maximum value of the slider.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.SmallChange">
      <summary>
            Gets or sets the small change amount.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.LargeChange">
      <summary>
            Gets or sets the large change amount.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.SmallTickPosition">
      <summary>
            Gets or sets the position of the tick marks that marks values at <see cref="P:EO.Web.SliderBase.SmallChange"></see> incremental.
            </summary>
      <remarks>
            The slider does not display small tick marks by default.
            </remarks>
    </member>
    <member name="P:EO.Web.SliderBase.LargeTickPosition">
      <summary>
            Gets or sets the position of the tick marks that marks values at <see cref="P:EO.Web.SliderBase.LargeChange"></see> incremental.
            </summary>
      <remarks>
            The slider displays large tick marks on both sides of the track by default.
            </remarks>
    </member>
    <member name="P:EO.Web.SliderBase.LargeTickValuePosition">
      <summary>
            Gets or sets the position of large tick values.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.LabelPosition">
      <summary>
            Gets or sets the position of the labels.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.Orientation">
      <summary>
            Gets or sets the orientation of the slider control.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.Reverse">
      <summary>
            Gets or sets a value indicating whether the slider should be in reverse mode.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.Labels">
      <summary>
            Gets a collection of <see cref="T:EO.Web.SliderLabel"></see> objects
            that represents each slider label.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.AnimationDuration">
      <summary>
            Gets or sets the duration of the animation to be played when slider thumb moves.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.ClientSideOnValueChange">
      <summary>
            Gets or sets the name of the JavaScript function to be called when
            the slider's value changes on the client side.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for details about parameters and return value of this function.
            </remarks>
    </member>
    <member name="P:EO.Web.SliderBase.ShowValueOnThumb">
      <summary>
            Gets or sets a value indicating whether to show the current value on the thumb.
            </summary>
    </member>
    <member name="P:EO.Web.SliderBase.ValueCssClass">
      <summary>
            Gets or sets the CSS class applied to value displayed on the thumb.
            </summary>
    </member>
    <member name="E:EO.Web.SliderBase.Changed">
      <summary>
            Occurs when the value of the slider changes.
            </summary>
    </member>
    <member name="T:EO.Web.SliderLabel">
      <summary>
            Represents a label for a <see cref="T:EO.Web.Slider"></see> or a <see cref="T:EO.Web.RangeSlider"></see> control.
            </summary>
    </member>
    <member name="M:EO.Web.SliderLabel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.SliderLabel"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.SliderLabel.Value">
      <summary>
            Gets or sets the value for which this label is displayed.
            </summary>
    </member>
    <member name="P:EO.Web.SliderLabel.Text">
      <summary>
            Gets or sets the HTML text for this label.
            </summary>
    </member>
    <member name="T:EO.Web.SliderLabelCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Web.SliderLabel"></see> objects.
            </summary>
    </member>
    <member name="P:EO.Web.SliderLabelCollection.Slider">
      <summary>
            Gets the Slider control this labels collection belongs to.
            </summary>
    </member>
    <member name="M:EO.Web.SliderLabelCollection.GetEnumerator">
      <summary>
            This class implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="P:EO.Web.SliderLabelCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read only. Always return <b>false</b>.		
            </summary>
    </member>
    <member name="M:EO.Web.SliderLabelCollection.Add(EO.Web.SliderLabel)">
      <summary>
            Adds a label to the end of the collection.
            </summary>
      <param name="label">The label to be added to the end of the collection.</param>
      <returns>The index at which the new label was added.</returns>.
        </member>
    <member name="M:EO.Web.SliderLabelCollection.IndexOf(EO.Web.SliderLabel)">
      <summary>
            Determines the index of a specific label in the collection.
            </summary>
      <param name="label">The label to locate in the collection.</param>
      <returns>The index of value if found in the colllection; otherwise, -1.</returns>
    </member>
    <member name="M:EO.Web.SliderLabelCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the label at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the label to be removed. 
            </param>
    </member>
    <member name="M:EO.Web.SliderLabelCollection.Insert(System.Int32,EO.Web.SliderLabel)">
      <summary>
            Inserts an label into the collection at the specified position.
            </summary>
      <param name="index">The zero-based index at which the label should be inserted.</param>
      <param name="label">The label to be inserted into the collection.</param>
    </member>
    <member name="M:EO.Web.SliderLabelCollection.Remove(EO.Web.SliderLabel)">
      <summary>
            Removes the first occurrence of the label.
            </summary>
      <param name="label">The label to be removed from the collection.</param>
    </member>
    <member name="M:EO.Web.SliderLabelCollection.Contains(EO.Web.SliderLabel)">
      <summary>
            Determines whether the collection contains the specified label.
            </summary>
      <param name="label">The label to locate in the collection.</param>
      <returns>
        <b>true</b> if the label is found in the collection; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:EO.Web.SliderLabelCollection.Clear">
      <summary>
            Removes all items from the collection. 
            </summary>
    </member>
    <member name="P:EO.Web.SliderLabelCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            Always return <b>false</b>.
            </summary>
    </member>
    <member name="P:EO.Web.SliderLabelCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the SliderLabelCollection is synchronized (thread-safe).
            Always returns <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.SliderLabelCollection.Count">
      <summary>
            Gets the number of labels contained in the collection.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of labels in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of labels contained in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.SliderLabelCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the labels of the collection to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the collection. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.SliderLabelCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:EO.Web.SliderLabelCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the collection.
            </summary>
      <param name="c">The collection to be added. </param>
    </member>
    <member name="P:EO.Web.SliderLabelCollection.Item(System.Int32)">
      <summary>
            Gets a label in the collection at specific index. 
            </summary>
      <remarks>
            Index is the zero-based. 
            In C#, this property is the indexer of <see cref="T:EO.Web.SliderLabelCollection">SliderLabelCollection</see> class. 
            </remarks>
    </member>
    <member name="T:EO.Web.Slide">
      <summary>
            Creates a slide show like UI.
            </summary>
    </member>
    <member name="M:EO.Web.Slide.#ctor">
      <summary>
            Initializes a new object of the <see cref="T:EO.Web.Slide"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.VisibleSmallItemCount">
      <summary>
            Gets or sets the number of visible small items.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.SmallItemWidth">
      <summary>
            Gets or sets the width of the small items in pixel.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.SmallItemHeight">
      <summary>
            Gets or sets the height of the small item in pixel.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.BigItemWidth">
      <summary>
            Gets or sets the width of the big item in pixel.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.BigItemHeight">
      <summary>
            Gets or sets the height of the big item in pixel.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.BigItemTemplate">
      <summary>
            Gets or sets the big item template.
            </summary>
      <remarks>
            See <a href="Web/Slide/templated_slide.html">here</a> for more information
            on how to use template with slide.
            </remarks>
    </member>
    <member name="P:EO.Web.Slide.SmallItemTemplate">
      <summary>
            Gets or sets the small item template.
            </summary>
      <remarks>
            See <a href="Web/Slide/templated_slide.html">here</a> for more information
            on how to use template with slide.
            </remarks>
    </member>
    <member name="P:EO.Web.Slide.SmallItemStyle">
      <summary>
            Gets or sets the style for small items.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.SmallItemHoverStyle">
      <summary>
            Gets or sets the style for small items when mouse is over the item.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.BigItemPanelStyle">
      <summary>
            Gets or sets the style for the big item section.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.SmallItemPanelStyle">
      <summary>
            Gets or sets the style for the small item section.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.NavPanelStyle">
      <summary>
            Gets or sets the style for the navigation panel.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.ItemNumberFormat">
      <summary>
            Gets or sets the text format if only one item is visible. 
            </summary>
      <remarks>
            The default value is: <code>{cur_item} of {total_items}</code>
            At runtime, <code>{cur_item}</code>
            is being replaced by the current item index (1 based) and 
            <code>{total_items}</code> is being replaced by the total 
            number of items. For example, if the total number
            of item is 5 and the current item is 2 and you wish it 
            to be displayed as:
            <code>Total Items: 5, Current Item: 2</code>
            Then you can set this property to:
            <code>Total Items: {total_items}, Current Item: {cur_item}</code></remarks>
    </member>
    <member name="P:EO.Web.Slide.ItemNumberRangeFormat">
      <summary>
            Gets or sets the text format if multiple items are visible. 
            </summary>
      <remarks>
            The default value is: <code>{cur_first_item} - {cur_last_item} of {total_items}</code>
            At runtime, <code>{cur_first_item}</code> is being replaced by the first
            visible item (1 based), <code>{cur_last_item}</code> is being replaced
            by the last visible item (1 based) and <code>{total_items}</code> is
            being replaced by the total number of items. For example, if the total 
            number of item is 10 and the current visible items are from 5 to 8 
            and you wish it to be displayed as:
            <code>Total Items: 10, First Item: 5, Last Item: 8</code>
            Then you can set this property to:
            <code>Total Items: {total_items}, First Item: {cur_first_item}, Last Item: {cur_last_item}</code></remarks>
    </member>
    <member name="P:EO.Web.Slide.ItemNumberStyle">
      <summary>
            Gets or sets the style for item number text.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.ScrollLeftImageUrl">
      <summary>
            Gets or sets the image Url for the left button.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.ScrollRightImageUrl">
      <summary>
            Gets or sets the image Url for the right button.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.IEEffect">
      <summary>
            Gets or sets the IEEffect filter string that is applied during slide.
            </summary>
      <remarks>
        <p>
            The following value plays fade effect when the Slide switches items:
            <code>progid:DXImageTransform.Microsoft.Fade(duration=1.0,overlap=1.0)</code></p>
        <p>
            Note that this feature is IE only.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Slide.AutoStart">
      <summary>
            Gets or sets a value indicating whether to automatically start the Slide as soon as page loads.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.AutoLoop">
      <summary>
            Gets or sets a value indicating whether the Slide control automatically loops back to the first item
            after it has reached the last item.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.Slide.AutoStart"></see> is set to true.
            </remarks>
    </member>
    <member name="P:EO.Web.Slide.Interval">
      <summary>
            Gets or sets the auto-slide interval in milliseconds.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.Slide.AutoStart"></see> is set to true.
            </remarks>
    </member>
    <member name="P:EO.Web.Slide.FirstItemIndex">
      <summary>
            Gets or sets the first visible item index.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.AutoPostBack">
      <summary>
            Gets or sets a value that indicates whether an automatic postback to the server occurs when the Slide control slides to a new item.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.NavPanelOnTop">
      <summary>
            Gets or sets a value indicating whether the navigation panel should be displayed at the top.
            </summary>
      <remarks>
            By default, the navigation panel is displayed at the bottom of the control.
            Set this property to <b>true</b> to move it to the top.
            </remarks>
    </member>
    <member name="P:EO.Web.Slide.ClientSideOnScroll">
      <summary>
            Gets or sets the name of client side JavaScript function which is called when the Slide switches to another item.
            </summary>
    </member>
    <member name="P:EO.Web.Slide.Items">
      <summary>
            Gets the <see cref="T:EO.Web.SlideItemCollection"></see> object that contains all <see cref="T:EO.Web.SlideItem"></see> objects.
            </summary>
    </member>
    <member name="E:EO.Web.Slide.ItemDataBound">
      <summary>
            Occurs after an item in the Slide control is data-bound but before it is rendered on the page.
            </summary>
    </member>
    <member name="E:EO.Web.Slide.Scroll">
      <summary>
            Occurs after the Slide control slide from one item to another item.
            </summary>
      <remarks>
            This event is only fired when a post back occurs. You can set
            <see cref="P:EO.Web.Slide.AutoPostBack"></see> so that a post back automatically
            occurs immediately after the Slide control slides to a new item.
            </remarks>
    </member>
    <member name="T:EO.Web.SlideItem">
      <summary>
            Represents an item in a <see cref="T:EO.Web.Slide"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.SlideItem.ItemIndex">
      <summary>
            Gets the item index.
            </summary>
    </member>
    <member name="P:EO.Web.SlideItem.DataItem">
      <summary>
            Gets the data item.
            </summary>
    </member>
    <member name="P:EO.Web.SlideItem.BigItem">
      <summary>
            Gets the control created based on <see cref="P:EO.Web.Slide.BigItemTemplate"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.SlideItem.SmallItem">
      <summary>
            Gets the control created based on <see cref="P:EO.Web.Slide.SmallItemTemplate"></see>.
            </summary>
    </member>
    <member name="T:EO.Web.SlideItemCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Web.SlideItem"></see> control.
            </summary>
    </member>
    <member name="M:EO.Web.SlideItemCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            This method implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="M:EO.Web.SlideItemCollection.Add(EO.Web.SlideItem)">
      <summary>
            Add a new <see cref="T:EO.Web.SlideItem"></see> into the collection.
            </summary>
      <param name="item">The new item to be added.</param>
      <returns>Zero based item index.</returns>
    </member>
    <member name="M:EO.Web.SlideItemCollection.Clear">
      <summary>
            Clears all items in the collection.
            </summary>
    </member>
    <member name="M:EO.Web.SlideItemCollection.Insert(System.Int32,EO.Web.SlideItem)">
      <summary>
            Inserts a <see cref="T:EO.Web.SlideItem">SlideItem</see> into the collection at the specified position.
            </summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The <see cref="T:EO.Web.SlideItem">SlideItem</see> to insert into the collection.</param>
    </member>
    <member name="M:EO.Web.SlideItemCollection.Remove(EO.Web.SlideItem)">
      <summary>
            Removes the <see cref="T:EO.Web.SlideItem"></see> object from the collection.
            </summary>
      <param name="item">The <see cref="T:EO.Web.SlideItem"></see> object to be removed.</param>
    </member>
    <member name="M:EO.Web.SlideItemCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to be removed. 
            </param>
    </member>
    <member name="P:EO.Web.SlideItemCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:EO.Web.SlideItem"></see> object in the collection at specific index. 
            </summary>
      <remarks>
            Index is the zero-based. 
            In C#, this property is the indexer of the <see cref="T:EO.Web.SlideItemCollection">SlideItemCollection</see> class. 
            </remarks>
    </member>
    <member name="P:EO.Web.SlideItemCollection.Count">
      <summary>
            Gets the number of elements contained in the collection.
            </summary>
    </member>
    <member name="T:EO.Web.SlideItemEventHandler">
      <summary>
            Represents the method that handles event that references to a slide item.
            </summary>
    </member>
    <member name="T:EO.Web.SlideItemEventArgs">
      <summary>
            Provides data for <see cref="E:EO.Web.Slide.ItemDataBound"></see> events.
            </summary>
    </member>
    <member name="P:EO.Web.SlideItemEventArgs.Item">
      <summary>
            Gets the slide item.
            </summary>
    </member>
    <member name="T:EO.Web.SpellChecker">
      <summary>
            Represents a spell checker control.
            </summary>
    </member>
    <member name="M:EO.Web.SpellChecker.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.SpellChecker"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.SpellChecker.Language">
      <summary>
            Gets or sets the language of the contents to be checked. 
            </summary>
      <remarks>
        <p>
            The value of this property follows the .NET culture name convention. For
            example, <i>en-US</i> for U.S. English, <i>de-DE</i> for Germany.
            List of locale names can be found 
            <a href="http://msdn.microsoft.com/en-us/goglobal/bb896001.aspx">here</a>
            on MSDN.
            </p>
        <p>
            Set this property to <b>null</b> (Visual Basic <b>Nothing</b>)
            to use the page locale.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.SpellChecker.ControlToCheck">
      <summary>
            Gets or sets the ID of the control to check.
            </summary>
      <remarks>
            This can be the ID of a server control or the ID of a client side DHTML element. 
            </remarks>
    </member>
    <member name="P:EO.Web.SpellChecker.ContextMenuID">
      <summary>
            Gets or sets the ID of the <see cref="T:EO.Web.ContextMenu"></see> to be used by this spell checker.
            </summary>
      <remarks>
        <p>
            When content to be checked is static HTML, the spell checker
            can highlight the errors and displays a context menu when user
            clicks on the error. The context menu contains various suggestion 
            options. 
            </p>
        <p>
            Note context menu only works for static HTML contents. For example,
            it does not work with <i>textarea</i>.
            </p>
            See <a href="Web/SpellChecker/menu.html">using context menu with spell checker</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.SpellChecker.DialogID">
      <summary>
            Gets or sets the ID of the <see cref="T:EO.Web.SpellCheckerDialog"></see> to be used by this spell checker.
            </summary>
      <remarks>
        <p>
            Spell checker can display a dialog that that highlights all spell errors
            and list suggestions for each error. This is especially useful for certain
            DHTML elements, such as <i>textarea</i> element, for which context menu can
            not be used.
            </p>
        <p>
            See <see href="Web/SpellChecker/dialog.html">using dialog with spell checker</see>
            for more details.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.SpellChecker.StartButton">
      <summary>
            Gets or sets the ID of button that starts spell checking.
            </summary>
    </member>
    <member name="P:EO.Web.SpellChecker.ErrorStyle">
      <summary>
            Specifies the style for highlighting spell errors.
            </summary>
    </member>
    <member name="P:EO.Web.SpellChecker.EnableSoundsLike">
      <summary>
            Gets or sets a value indicating whether suggestions list
            includes words that sound like the misspelled one.
            </summary>
    </member>
    <member name="P:EO.Web.SpellChecker.IgnoreAllCapital">
      <summary>
            Gets or sets a value indicating whether word with all capital letters 
            should always be considered valid.
            </summary>
    </member>
    <member name="P:EO.Web.SpellChecker.IgnoreNonAlpha">
      <summary>
            Gets or sets a value indicating whether word that contains
            non alpha characters should always be considered valid.
            </summary>
    </member>
    <member name="P:EO.Web.SpellChecker.IgnoreWebAddress">
      <summary>
            Gets or sets a value indicating whether web address should always be considered valid.
            </summary>
    </member>
    <member name="P:EO.Web.SpellChecker.AutoMatchCase">
      <summary>
            Gets or sets a value indicating whether the spell checker automatically matches 
            case of the original word when making corrections.
            </summary>
    </member>
    <member name="P:EO.Web.SpellChecker.MaxSuggestions">
      <summary>
            Gets or sets the maximum number of suggestions returned by the spell checker for each misspelled word.
            </summary>
    </member>
    <member name="P:EO.Web.SpellChecker.IgnoreOnceMenuItemText">
      <summary>
            Gets or sets the menu item text for the 'Ignore Once' menu item.
            </summary>
      <remarks>
            See <a href="Web/SpellChecker/menu.html">using context menu with spell checker</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.SpellChecker.IgnoreAllMenuItemText">
      <summary>
            Gets or sets the menu item text for the 'Ignore All' menu item.
            </summary>
      <remarks>
            See <a href="Web/SpellChecker/menu.html">using context menu with spell checker</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.SpellChecker.NoSuggestionMenuItemText">
      <summary>
            Gets or sets the menu item text for the 'No Suggestion' menu item.
            </summary>
      <remarks>
            See <a href="Web/SpellChecker/menu.html">using context menu with spell checker</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.SpellChecker.AddCustomMenuItemText">
      <summary>
            Gets or sets the menu item text for the 'Add Custom' menu item.
            </summary>
      <remarks>
            See <a href="Web/SpellChecker/menu.html">using context menu with spell checker</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.SpellChecker.EndCheckerMenuItemText">
      <summary>
            Gets or sets the menu item text for the 'Stop' menu item.
            </summary>
      <remarks>
            See <a href="Web/SpellChecker/menu.html">using context menu with spell checker</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.SpellChecker.ClientSideOnCorrectError">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called when when the spell checker corrects a word.
            </summary>
      <remarks>
        <p>
            This property takes a function name, not a function call. 
            See <a href="JSDoc.Public.Web.Handlers.spellchecker_correct_error_handler.html">here</a>
            for details about arguments for this function.
            </p>
        <p>
            This event only occurs the target of the SpellChecker is not
            a text box or text area.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.SpellChecker.AddCustomWord(System.String,System.String,System.Boolean)">
      <summary>
            Add a custom word.
            </summary>
      <param name="lang">
        <para>
            The language of the custom word. See <see cref="P:EO.Web.SpellChecker.Language"></see>
            property for all possible values.
            </para>
        <para>
            To add a language independent custom word, use <b>null</b>
            for this argument. A language independent custom word is
            considered valid in all languages.
            </para>
      </param>
      <param name="word">The custom word.</param>
      <param name="global">
        <b>true</b> if this is a global custom word, <b>false</b>
            if this is a local custom word. A local custom word applies
            to the current session only. A global custom word applies
            to all sessions.
            </param>
    </member>
    <member name="M:EO.Web.SpellChecker.AddCustomWord(System.String)">
      <summary>
            Add a local custom word.
            </summary>
      <param name="word">The custom word.</param>
      <remarks>
            This function adds a local custom word.
            </remarks>
    </member>
    <member name="M:EO.Web.SpellChecker.AddCustomWord(System.String,System.Boolean)">
      <summary>
            Add a local or global custom word.
            </summary>
      <param name="word">The custom word.</param>
      <param name="global">
      </param>
      <remarks>
            This function adds a local custom word for the language specified by 
            <see cref="P:EO.Web.SpellChecker.Language"></see> property.
            </remarks>
    </member>
    <member name="E:EO.Web.SpellChecker.CustomWord">
      <summary>
            Fires when user added a custom word.
            </summary>
      <remarks>
        <para>
            This event is fired when user adds a custom word. You
            can handle this event to save the custom word, then
            call <see cref="M:EO.Web.SpellChecker.AddCustomWord(System.String,System.String,System.Boolean)"></see> when your application
            restarts.
            </para>
        <para>
            You must also call <see cref="M:EO.Web.SpellChecker.AddCustomWord(System.String,System.String,System.Boolean)"></see>
            in order for the custom word to be used for any
            subsequent spell checking request.
            </para>
      </remarks>
    </member>
    <member name="T:EO.Web.SpellCheckerEventArgs">
      <summary>
            Provides event data for a <see cref="T:EO.Web.SpellChecker"></see> event.
            </summary>
    </member>
    <member name="P:EO.Web.SpellCheckerEventArgs.CustomWord">
      <summary>
            Gets the custom word.
            </summary>
    </member>
    <member name="T:EO.Web.SpellCheckerEventHandler">
      <summary>
            Represents the method that will handle the
            <see cref="T:EO.Web.SpellChecker"></see>'s
            <see cref="E:EO.Web.SpellChecker.CustomWord"></see> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:EO.Web.SpellCheckerEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:EO.Web.SpellCheckerDialog">
      <summary>
            Represents a dialog used by a <see cref="T:EO.Web.SpellChecker"></see> control
            to display suggestions.
            </summary>
    </member>
    <member name="M:EO.Web.SpellCheckerDialog.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.SpellCheckerDialog"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.SpellCheckerDialog.SuggestionItemStyle">
      <summary>
            Specifies the style for each suggestion item.
            </summary>
    </member>
    <member name="P:EO.Web.SpellCheckerDialog.SuggestionItemHoverStyle">
      <summary>
            Specifies the style for a suggestion item when mouse hovers over the item.
            </summary>
    </member>
    <member name="P:EO.Web.SpellCheckerDialog.SuggestionItemSelectedStyle">
      <summary>
            Specifies the style for a suggestion item when the item is selected.
            </summary>
    </member>
    <member name="P:EO.Web.SpellCheckerDialog.WaitMessage">
      <summary>
            Gets or sets the message to be displayed while the dialog is waiting result from the server.
            </summary>
    </member>
    <member name="T:EO.Web.Splitter">
      <summary>
            Represents a splitter control that hosts resizable
            <see cref="T:EO.Web.SplitterPane"></see> control.
            </summary>
    </member>
    <member name="M:EO.Web.Splitter.#ctor">
      <summary>
            Create a new instance of the <see cref="T:EO.Web.Splitter"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.Splitter.ClientSideOnResized">
      <summary>
            Gets or sets the name of the client side JavaScript function to be called when user has resized the splitter pane.
            </summary>
      <remarks>
            Event handler for this event takes form of
            <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>.
            </remarks>
    </member>
    <member name="P:EO.Web.Splitter.DividerSize">
      <summary>
            Gets or sets the width or height of the divider.
            </summary>
    </member>
    <member name="P:EO.Web.Splitter.DividerImage">
      <summary>
            Gets or sets the image of the divider bar background.
            </summary>
    </member>
    <member name="P:EO.Web.Splitter.DividerCenterImage">
      <summary>
            Gets or sets the image to be displayed at the center of the divider.
            </summary>
      <remarks>
            When this property is set, Expand/Collpase buttons will not be
            displayed.
            </remarks>
    </member>
    <member name="P:EO.Web.Splitter.CollapseButtonImage">
      <summary>
            Gets or sets the image of the collapse button.
            </summary>
      <remarks>
            Expand/Collapse button will not be displayed when
            <see cref="P:EO.Web.Splitter.DividerCenterImage"></see> is set.
            </remarks>
    </member>
    <member name="P:EO.Web.Splitter.ExpandButtonImage">
      <summary>
            Gets or sets the image of the expand button.
            </summary>
      <remarks>
            Expand/Collapse button will not be displayed when
            <see cref="P:EO.Web.Splitter.DividerCenterImage"></see> is set.
            </remarks>
    </member>
    <member name="P:EO.Web.Splitter.CollapseButtonHoverImage">
      <summary>
            Gets or sets the image of the collapse button when mouse hovers over the button.
            </summary>
      <remarks>
            Expand/Collapse button will not be displayed when
            <see cref="P:EO.Web.Splitter.DividerCenterImage"></see> is set.
            </remarks>
    </member>
    <member name="P:EO.Web.Splitter.ExpandButtonHoverImage">
      <summary>
            Gets or sets the image of the expand button when mouse hovers the button.
            </summary>
      <remarks>
            Expand/Collapse button will not be displayed when
            <see cref="P:EO.Web.Splitter.DividerCenterImage"></see> is set.
            </remarks>
    </member>
    <member name="P:EO.Web.Splitter.ExpandCollapseButtonAlign">
      <summary>
            Gets or sets the position alignment of the collapse/expand button.
            </summary>
      <remarks>
            Expand/Collapse button will not be displayed when
            <see cref="P:EO.Web.Splitter.DividerCenterImage"></see> is set.
            </remarks>
    </member>
    <member name="P:EO.Web.Splitter.LeftPane">
      <summary>
            Returns a <see cref="T:EO.Web.SplitterPane"></see> object that
            represents the left or top pane of the splitter.
            </summary>
    </member>
    <member name="P:EO.Web.Splitter.RightPane">
      <summary>
            Returns a <see cref="T:EO.Web.SplitterPane"></see> object that
            represents the right or bottom pane of the splitter.
            </summary>
    </member>
    <member name="P:EO.Web.Splitter.Orientation">
      <summary>
            Gets or sets the orientation of the splitter.
            </summary>
    </member>
    <member name="P:EO.Web.Splitter.CollapseLeft">
      <summary>
            Gets or sets a value indicating whether clicking the collapse button would collapse the top/left pane or the right/bottom pane.
            </summary>
    </member>
    <member name="P:EO.Web.Splitter.AutoFillWindow">
      <summary>
            Gets or sets a value indicating whether the splitter should automatically fills the browser window.
            </summary>
    </member>
    <member name="P:EO.Web.Splitter.WidthMargin">
      <summary>
            Gets or sets the extra width margin to consider when automatically resize the splitter.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.Splitter.AutoFillWindow" /> is set to true. By default,
            Setting <see cref="P:EO.Web.Splitter.AutoFillWindow" /> to true automatically stretch the <see cref="T:EO.Web.Splitter" />
            to fill the window on both X and Y direction. Set this property to -1 to auto fill only on 
            the Y direction (disable the X direction).
            </remarks>
    </member>
    <member name="P:EO.Web.Splitter.HeightMargin">
      <summary>
            Gets or sets the extra height margin to consider when automatically resize the splitter.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.Splitter.AutoFillWindow" /> is set to true. By default,
            Setting <see cref="P:EO.Web.Splitter.AutoFillWindow" /> to true automatically stretch the <see cref="T:EO.Web.Splitter" />
            to fill the window on both X and Y direction. Set this property to -1 to auto fill only on 
            the X direction (disable the Y direction).
            </remarks>
    </member>
    <member name="T:EO.Web.SplitterButtonAlignment">
      <summary>
            Specifies splitter button alignments.
            </summary>
    </member>
    <member name="F:EO.Web.SplitterButtonAlignment.Auto">
      <summary>
            Aligns splitter button automatically.
            </summary>
    </member>
    <member name="F:EO.Web.SplitterButtonAlignment.LeftOrTop">
      <summary>
            Splitter button should be aligned to the left if the
            splitter is horizontal, or to the top if the splitter
            is vertical.
            </summary>
    </member>
    <member name="F:EO.Web.SplitterButtonAlignment.Center">
      <summary>
            Splitter button should be aligned to the center.
            </summary>
    </member>
    <member name="F:EO.Web.SplitterButtonAlignment.RightOrBottom">
      <summary>
            Splitter button should be aligned to the right if
            the splitter is horizontal, or to the right if the
            splitter is vertical.
            </summary>
    </member>
    <member name="T:EO.Web.SplitterPane">
      <summary>
            Represents a resizable pane in a <see cref="P:EO.Web.SplitterPane.Splitter"></see> control.
            </summary>
    </member>
    <member name="M:EO.Web.SplitterPane.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.SplitterPane"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.SplitterPane.MinWidth">
      <summary>
            Gets or sets the minimum width of the panel.
            </summary>
    </member>
    <member name="P:EO.Web.SplitterPane.MinHeight">
      <summary>
            Gets or sets the minimum width of the panel.
            </summary>
    </member>
    <member name="P:EO.Web.SplitterPane.MaxWidth">
      <summary>
            Gets or sets the maximum width of the panel.
            </summary>
    </member>
    <member name="P:EO.Web.SplitterPane.MaxHeight">
      <summary>
            Gets or sets the maximum width of the panel.
            </summary>
    </member>
    <member name="P:EO.Web.SplitterPane.InitialSize">
      <summary>
            Gets or sets the initial width or height of the pane.
            </summary>
      <remarks>
            Set this property to a value other than 0 to force the splitter to 
            resize this pane to the given width/height once it finishes loading. 
            The default value is 0, at which case the splitter will not resize 
            the pane upon load.
            </remarks>
    </member>
    <member name="P:EO.Web.SplitterPane.State">
      <summary>
            Gets or sets the initial state of the pane.
            </summary>
      <remarks>
            This property can be set to 
            <see cref="F:EO.Web.SplitterPaneState.Collapsed"></see> or
            <see cref="F:EO.Web.SplitterPaneState.Hidden"></see> only
            when this pane is the splitter's collapsible pane.
            Only one of the splitter's two panes is collapsible,
            which usually is the left/top pane; or the right/bottom
            pane if the right/bottom pane's
            <see cref="P:EO.Web.SplitterPane.InitialSize"></see> is set.
            </remarks>
    </member>
    <member name="P:EO.Web.SplitterPane.PersistScrollPosition">
      <summary>
            Gets or sets a value indicating whether to persit scroll position over postbacks.
            </summary>
    </member>
    <member name="P:EO.Web.SplitterPane.ScrollBars">
      <summary>
            Gets or sets the type of scroll bars to display for the splitter pane.
            </summary>
    </member>
    <member name="P:EO.Web.SplitterPane.Splitter">
      <summary>
            Gets the splitter control for this splitter pane.
            </summary>
    </member>
    <member name="T:EO.Web.SplitterPaneState">
      <summary>
            Represents splitter pane state.
            </summary>
    </member>
    <member name="F:EO.Web.SplitterPaneState.Visible">
      <summary>
            The splitter pane is visible.
            </summary>
    </member>
    <member name="F:EO.Web.SplitterPaneState.Collapsed">
      <summary>
            The splitter pane is collapsed.
            </summary>
    </member>
    <member name="F:EO.Web.SplitterPaneState.Hidden">
      <summary>
            The splitter pane is hidden.
            </summary>
    </member>
    <member name="T:EO.Web.MultiPageEventArgs">
      <summary>
            Provides data for the <see cref="E:EO.Web.MultiPage.PageSelected"></see> and
            <see cref="E:EO.Web.MultiPage.PageDeselected"></see> event.
            </summary>
    </member>
    <member name="P:EO.Web.MultiPageEventArgs.Page">
      <summary>
            Returns a reference to the <see cref="T:EO.Web.PageView"></see> control associated with this event.
            </summary>
    </member>
    <member name="T:EO.Web.MultiPageEventHandler">
      <summary>
            Represents the method that handles the <see cref="E:EO.Web.MultiPage.PageSelected"></see> and
            <see cref="E:EO.Web.MultiPage.PageDeselected"></see> events.
            </summary>
    </member>
    <member name="T:EO.Web.MultiPage">
      <summary>
            Represents the functionality of a MultiPage control which maintains a collection of <see cref="T:EO.Web.PageView"></see> controls.
            </summary>
      <remarks>
        <p>
            MultiPage control maintains a collection of <see cref="T:EO.Web.PageView"></see> controls
            and provides functionality to switch active page on both server and client side.
            </p>
        <p>
            For more information on how to use <b>MultiPage control</b>, 
            see <see href="Web/MultiPage/using_MultiPage.html">Using EO.Web MultiPage</see>.
            </p>
      </remarks>
    </member>
    <member name="F:EO.Web.MultiPage.NextPageCommandName">
      <summary>
            Represents the value that commands MultiPage
            to display the next <see cref="T:EO.Web.PageView"></see>. This field is read-only.
            </summary>
      <remarks>
        <p>
            MultiPage is invoked when one of the child control "bubbles" up a <b>Command</b> event. 
            Then the MultiPage evaluates the event's <see cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandName">CommandEventArgs.CommandName</see>
            property to response to different requests. 
            </p>
        <p> 
            If the CommandName is the same as
            this field, MultiPage will switch current active <see cref="T:EO.Web.PageView"></see>
            to the next PageView.
            </p>
        <p>
            Several ASP.NET built-in controls (Button, ImageButton etc) 
            support <b>CommandName</b> property, those controls can automatically 
            bubble up a Command event in its postback handler. 
            </p>
        <p>
            You can leverage this functionality by simply put such control(Button, ImageButton etc) inside MultiPage and set its <b>CommandName</b>
            property to this value.
            </p>
        <p>
            For example, you can simply set a Button's <see cref="P:System.Web.UI.WebControls.Button.CommandName">CommandName</see>
            property to this value and put the Button inside a MultiPage. 
            Then the MultiPage will be able to response to different commands.
            </p>
      </remarks>
    </member>
    <member name="F:EO.Web.MultiPage.PreviousPageCommandName">
      <summary>
            Represents the value that commands MultiPage
            to display the previous <see cref="T:EO.Web.PageView"></see>. This field is read-only.
            </summary>
      <remarks>
        <p>
            MultiPage is invoked when one of the child control "bubbles" up a <b>Command</b> event. 
            Then the MultiPage evaluates the event's <see cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandName">CommandEventArgs.CommandName</see>
            property to response to different requests. 
            </p>
        <p> 
            If the CommandName is the same as
            this field, MultiPage will switch current active <see cref="T:EO.Web.PageView"></see>
            to the previous PageView.
            </p>
        <p>
            Several ASP.NET built-in controls (Button, ImageButton etc) 
            support <b>CommandName</b> property, those controls can automatically 
            bubble up a Command event in its postback handler. 
            </p>
        <p>
            You can leverage this functionality by simply put such control(Button, ImageButton etc) inside MultiPage and set its <b>CommandName</b>
            property to this value.
            </p>
        <p>
            For example, you can simply set a Button's <see cref="P:System.Web.UI.WebControls.Button.CommandName">CommandName</see>
            property to this value and put the Button inside a MultiPage. 
            Then the MultiPage will be able to response to different commands.
            </p>
      </remarks>
    </member>
    <member name="F:EO.Web.MultiPage.SelectPageByIDCommandName">
      <summary>
            Represents the value that commands MultiPage
            to display a <see cref="T:EO.Web.PageView"></see> based on the PageView's ID.
            </summary>
      <remarks>
        <p>
            MultiPage is invoked when one of the child control "bubbles" up a <b>Command</b> event. 
            Then the MultiPage evaluates the event's <see cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandName">CommandEventArgs.CommandName</see>
            property to response to different requests. 
            </p>
        <p> 
            If the CommandName is the same as
            this field, MultiPage will retrieve the target PageView'ID from 
            the Command event's <see cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandArgument">CommandEventArgs.CommandArgument</see>
            property and switch current active <see cref="T:EO.Web.PageView"></see>
            to the specified PageView.
            </p>
        <p>
            Several ASP.NET built-in controls (Button, ImageButton etc) 
            support <b>CommandName</b> and <b>CommandArgument</b> properties, these controls automatically 
            bubble up a Command event in its postback handler. 
            </p>
        <p>
            You can leverage this functionality by simply put such control(Button, ImageButton etc) inside MultiPage and set its 
            <b>CommandName</b> property to this value and <b>CommandArgument</b> property to
            the ID of the target PageView.
            </p>
        <p>
            For example, you can simply set a Button's <see cref="P:System.Web.UI.WebControls.Button.CommandName">CommandName</see>
            property to this value and <see cref="P:System.Web.UI.WebControls.Button.CommandArgument">CommandArgument</see> 
            to a PageView's ID. Then put the Button inside a MultiPage.  
            The MultiPage will be able to response to this command.
            </p>
      </remarks>
    </member>
    <member name="F:EO.Web.MultiPage.SelectPageByIndexCommandName">
      <summary>
            Represents the value that commands MultiPage
            to display a <see cref="T:EO.Web.PageView"></see> based on the PageView's index.
            </summary>
      <remarks>
        <p>
            MultiPage is invoked when one of the child control "bubbles" up a <b>Command</b> event. 
            Then the MultiPage evaluates the event's <see cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandName">CommandEventArgs.CommandName</see>
            property to response to different requests. 
            </p>
        <p> 
            If the CommandName is the same as
            this field, MultiPage will retrieve the target PageView'index from 
            the Command event's <see cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandArgument">CommandEventArgs.CommandArgument</see>
            property and switch current active <see cref="T:EO.Web.PageView"></see>
            to the specified PageView.
            </p>
        <p>
            Several ASP.NET built-in controls (Button, ImageButton etc) 
            support <b>CommandName</b> and <b>CommandArgument</b> properties, these controls automatically 
            bubble up a Command event in its postback handler. 
            </p>
        <p>
            You can leverage this functionality by simply put such control(Button, ImageButton etc) inside MultiPage and set its 
            <b>CommandName</b> property to this value and <b>CommandArgument</b> property to
            the index of the target PageView.
            </p>
        <p>
            For example, you can simply set a Button's <see cref="P:System.Web.UI.WebControls.Button.CommandName">CommandName</see>
            property to this value and <see cref="P:System.Web.UI.WebControls.Button.CommandArgument">CommandArgument</see> 
            to a PageView's index. Then put the Button inside a MultiPage.  
            The MultiPage will be able to response to this command.
            </p>
      </remarks>
    </member>
    <member name="E:EO.Web.MultiPage.PageSelected">
      <summary>
            Occurs when a <see cref="T:EO.Web.PageView"></see> control in a <see cref="T:EO.Web.MultiPage"></see> control is selected.
            </summary>
    </member>
    <member name="E:EO.Web.MultiPage.PageDeselected">
      <summary>
            Occurs when a <see cref="T:EO.Web.PageView"></see> control in a <see cref="T:EO.Web.MultiPage"></see> control is deselected.
            </summary>
    </member>
    <member name="M:EO.Web.MultiPage.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Web.MultiPage"></see> control.
            </summary>
    </member>
    <member name="P:EO.Web.MultiPage.PageViews">
      <summary>
            Returns a collection of all <see cref="T:EO.Web.PageView"></see> controls in this <b>MultiPage</b>.
            </summary>
    </member>
    <member name="P:EO.Web.MultiPage.SelectedIndex">
      <summary>
            Gets or sets the index of the current selected PageView.
            </summary>
      <remarks>
            A value of -1 represents no page is selected.
            </remarks>
    </member>
    <member name="M:EO.Web.MultiPage.SelectFirst">
      <summary>
            Navigates to the first <see cref="T:EO.Web.PageView"></see> control.
            </summary>
    </member>
    <member name="M:EO.Web.MultiPage.SelectLast">
      <summary>
            Navigates to the last <see cref="T:EO.Web.PageView"></see> control.
            </summary>
    </member>
    <member name="M:EO.Web.MultiPage.SelectNext">
      <summary>
            Navigates to the next <see cref="T:EO.Web.PageView"></see> control.
            </summary>
      <remarks>
            If the current selected <see cref="T:EO.Web.PageView"></see> control is
            already the last page, the function returns without changing 
            the current selected page.
            </remarks>
    </member>
    <member name="M:EO.Web.MultiPage.SelectPrevious">
      <summary>
            Navigates to the previous <see cref="T:EO.Web.PageView"></see> control.
            </summary>
      <remarks>
            If the current selected <see cref="T:EO.Web.PageView"></see> control is
            already the first page, the function returns without changing 
            the current selected page.
            </remarks>
    </member>
    <member name="M:EO.Web.MultiPage.SelectPageByID(System.String)">
      <summary>
            Selects a page by ID.
            </summary>
      <param name="id">The ID of the <see cref="T:EO.Web.PageView"></see> object to select.</param>
    </member>
    <member name="P:EO.Web.MultiPage.SelectedPage">
      <summary>
            Returns a reference to the selected <see cref="T:EO.Web.PageView"></see> control,
            or <b>null</b> if no page is selected.
            </summary>
    </member>
    <member name="T:EO.Web.PageView">
      <summary>
            Represents a page in a <see cref="T:EO.Web.MultiPage"></see> control.
            </summary>
    </member>
    <member name="M:EO.Web.PageView.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.PageView"></see> class.
            </summary>
    </member>
    <member name="T:EO.Web.PageViewCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Web.PageView"></see> controls.
            </summary>
    </member>
    <member name="P:EO.Web.PageViewCollection.Item(System.Int32)">
      <summary>
            Gets a reference to the <see cref="T:EO.Web.PageView"></see> control at the specified index location
            of a <b>PageViewCollection</b> object.
            </summary>
      <remarks>
        <i>index</i> is the zero-based index of the <b>PageView</b> control to get. 
            </remarks>
    </member>
    <member name="T:EO.Web.TabItem">
      <summary>
            Represents a tab item in a TabStrip control.
            </summary>
      <remarks>
        <p>
            A TabStrip control is made up of a hierarchy of tab items 
            represented by <b>TabItem</b> objects. A group of tab items that have the same parent item 
            forms a TabItemGroup and is represented by <see cref="T:EO.Web.TabItemGroup"></see>
            object. The group can be accessed
            by <see cref="P:EO.Web.TabItem.SubGroup"></see> property.
            You can access parent item of the subgroup by using  
            <see cref="P:EO.Web.TabItemGroup.ParentItem">TabItemGroup.ParentItem</see> property. 
            </p>
        <p>
            Each subgroup maintains a collection of child <b>TabItem</b> objects.
            You can access this child item collection through:
            <list type="bullet"><item><see cref="P:EO.Web.TabItem.SubItems">TabItem.SubItems</see></item><item><see cref="P:EO.Web.TabItemGroup.Items">TabItem.SubGroup.Items</see></item></list>
            Both properties access the same <see cref="T:EO.Web.TabItemCollection"></see> object.
            </p>
        <p>
            To customized a tab item's appearance and contents:
            <list type="table"><listheader><term>To...</term><description>Use...</description></listheader><item><term>Specifies the tab item text</term><description>Use <see cref="P:EO.Web.NavigationItemText.Html">TabItem.Text.Html</see></description></item><item><term>Specifies the tab item icons</term><description>
            use <see cref="P:EO.Web.BaseMenuItem.LeftIcon"></see> and 
            <see cref="P:EO.Web.BaseMenuItem.RightIcon"></see> property.
            		</description></item><item><term>Specifies tab item styles</term><description>Use 
            		<see cref="P:EO.Web.NavigationItem.NormalStyle"></see>,
            		<see cref="P:EO.Web.NavigationItem.HoverStyle"></see>,
            		<see cref="P:EO.Web.NavigationItem.ExpandedStyle"></see>,
            		<see cref="P:EO.Web.NavigationItem.SelectedStyle"></see>,
            		<see cref="P:EO.Web.NavigationItem.SelectedHoverStyle"></see>,
            		<see cref="P:EO.Web.NavigationItem.SelectedExpandedStyle"></see>,
            		<see cref="P:EO.Web.NavigationItem.DisabledStyle"></see>
            		property</description></item><item><term>Navigate pages</term><description>Use <see cref="P:EO.Web.NavigationItem.NavigateUrl"></see> property</description></item></list></p>
        <p> Tab item inherits from <see cref="T:EO.Web.BaseMenuItem"></see>, 
            see <see href="Web/MenuCommon/ItemsAndGroups/menu_item.html">Navigation Item</see> topic for more details.
            </p>
      </remarks>
      <seealso cref="T:EO.Web.TabItemGroup">
      </seealso>
      <seealso cref="T:EO.Web.TabStrip">
      </seealso>
    </member>
    <member name="M:EO.Web.TabItem.#ctor(System.String)">
      <summary>
            Creates an instance of TabItem.
            </summary>
      <param name="html">The html text of the tab item.</param>
    </member>
    <member name="M:EO.Web.TabItem.#ctor">
      <summary>
            Creates an instance of TabItem.
            </summary>
    </member>
    <member name="P:EO.Web.TabItem.ParentItem">
      <summary>
            Gets the parent <see cref="T:EO.Web.TabItem"></see>.		
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TabItem">
          </see>
        </p>
            The parent menu item. 
            </value>
      <seealso cref="T:EO.Web.TabStrip">
      </seealso>
      <seealso cref="T:EO.Web.TabItem">
      </seealso>
      <seealso cref="T:EO.Web.TabItemGroup">
      </seealso>
    </member>
    <member name="P:EO.Web.TabItem.SubGroup">
      <summary>
            Gets subgroup of a tab item.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TabItemGroup">
          </see>
        </p>
        <p>The subgroup of a tab item.</p>
            The property is read only, however, you can access the properties and methods
            of the object it returns.
            </value>
      <remarks>
            Use this property to control the appearance, behavior and contents 
            of the subgroup. For example, the shadow color of the entire group, 
            the space between each item in the group etc.		
            </remarks>
    </member>
    <member name="P:EO.Web.TabItem.SubItems">
      <summary>
            Returns a collection of sub tab items.
            </summary>
      <remarks>
            This property returns the same collection as <see cref="P:EO.Web.TabItemGroup.Items">TabItem.SubGroup.Items</see>.
            </remarks>
    </member>
    <member name="T:EO.Web.TabItemCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Web.TabItem"></see> objects. 
            </summary>
      <remarks>
        <p>
            This class is used to store and manage a 
            collection of TabItem objects. <see cref="T:EO.Web.TabStrip"></see> uses  
            it to store top level tab items in <see cref="P:EO.Web.TabStrip.Items">TabStrip.Items</see> property. 
            <see cref="T:EO.Web.TabItemGroup"></see> object uses it to store sub items in 
            <see cref="P:EO.Web.TabItemGroup.Items">TabItemGroup.Items</see> property.
            </p>
        <p>
            You can programmatically manage a TabItemCollection object by 
            adding and removing <b>TabItem</b> objects. To add TabItem to the 
            collection, use the <see cref="M:EO.Web.TabItemCollection.Add(EO.Web.TabItem)"></see> method. To remove nodes 
            from the collection, use the 
            <see cref="M:EO.Web.TabItemCollection.Remove(EO.Web.TabItem)"></see>, the 
            <see cref="M:EO.Web.NavigationItemCollection.RemoveAt(System.Int32)"></see>, or the 
            <see cref="M:EO.Web.NavigationItemCollection.Clear"></see> method.
            </p>
        <note>
          <see cref="M:EO.Web.NavigationItemGroup.DataBind">
          </see> method clears 
            the TabItemGroup's Items collection.
            </note>
      </remarks>
    </member>
    <member name="P:EO.Web.TabItemCollection.Item(System.Int32)">
      <summary>
            Gets or sets a tab item in the collection at specific index. 
            </summary>
      <remarks>
            Index is the zero-based index of the tab item to get. 
            In C#, this property is the indexer of <see cref="T:EO.Web.TabItemCollection"></see> class. 
            </remarks>
    </member>
    <member name="M:EO.Web.TabItemCollection.Insert(System.Int32,EO.Web.TabItem)">
      <summary>
            Inserts a <see cref="T:EO.Web.TabItem"></see> into the <see cref="T:EO.Web.TabItemCollection"></see> at the specified position.
            </summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The <see cref="T:EO.Web.TabItem"></see> to insert into the <see cref="T:EO.Web.TabItemCollection"></see>. </param>
    </member>
    <member name="M:EO.Web.TabItemCollection.Remove(EO.Web.TabItem)">
      <summary>
            Removes the first occurrence of a  <see cref="T:EO.Web.TabItem"></see> from the <see cref="T:EO.Web.TabItemCollection"></see>.
            </summary>
      <param name="value">The <see cref="T:EO.Web.TabItem"></see> to remove from the <see cref="T:EO.Web.TabItemCollection"></see>.</param>
    </member>
    <member name="M:EO.Web.TabItemCollection.Contains(EO.Web.TabItem)">
      <summary>
            Determines whether the <see cref="T:EO.Web.TabItemCollection"></see> contains the specific <see cref="T:EO.Web.TabItem"></see>.
            </summary>
      <param name="value">The <see cref="T:EO.Web.TabItem"></see> to locate in the <see cref="T:EO.Web.TabItemCollection"></see>.</param>
      <returns>
        <b>true</b> if the <see cref="T:EO.Web.TabItem"></see> is found in the <see cref="T:EO.Web.TabItemCollection"></see>; otherwise, <b>false</b></returns>
    </member>
    <member name="M:EO.Web.TabItemCollection.IndexOf(EO.Web.TabItem)">
      <summary>
            Determines the index of a specific <see cref="T:EO.Web.TabItem"></see> in the <see cref="T:EO.Web.TabItemCollection"></see>.
            </summary>
      <param name="value">The <see cref="T:EO.Web.TabItem"></see> to locate in the <see cref="T:EO.Web.TabItemCollection"></see>.</param>
      <returns>The index of value if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:EO.Web.TabItemCollection.Add(EO.Web.TabItem)">
      <summary>
            Adds a <see cref="T:EO.Web.TabItem"></see> to the <see cref="T:EO.Web.TabItemCollection"></see>.
            </summary>
      <param name="item">The <see cref="T:EO.Web.TabItem"></see> to add in the <see cref="T:EO.Web.TabItemCollection"></see>.</param>
      <returns>The index at which the new <see cref="T:EO.Web.TabItem"></see> was inserted</returns>.
        </member>
    <member name="M:EO.Web.TabItemCollection.Add(System.String)">
      <summary>
            Adds a <see cref="T:EO.Web.TabItem"></see> to the <see cref="T:EO.Web.TabItemCollection"></see>.
            </summary>
      <param name="itemHtml">
        <see cref="P:EO.Web.NavigationItemText.Html">Text.Html</see> of the new TabItem. </param>
      <returns>The newly created <see cref="T:EO.Web.TabItem"></see> object.</returns>
    </member>
    <member name="M:EO.Web.TabItemCollection.Add(System.String,System.String)">
      <summary>
            Adds a <see cref="T:EO.Web.TabItem"></see> to the <see cref="T:EO.Web.TabItemCollection"></see> and also set the look id.
            </summary>
      <param name="lookId">The look Id of the new item. Pass <b>null</b> or <b>SpecialLookIDs.Auto</b> to use default value.</param>
      <param name="itemHtml">
        <see cref="P:EO.Web.NavigationItemText.Html">Text.Html</see> of the new TabItem. </param>
      <returns>The newly created <see cref="T:EO.Web.TabItem"></see> object.</returns>
    </member>
    <member name="M:EO.Web.TabItemCollection.Add(System.String,System.String,System.String)">
      <summary>
            Adds a <see cref="T:EO.Web.TabItem"></see> to the <see cref="T:EO.Web.TabItemCollection"></see> and 
            also set the look id and left icon URL.
            </summary>
      <param name="itemHtml">
        <see cref="P:EO.Web.NavigationItemText.Html">Text.Html</see> of the new TabItem. </param>
      <param name="lookId">The look Id of the new item. Pass <b>null</b> or <b>SpecialLookIDs.Auto</b> to use default value.</param>
      <param name="leftIconUrl">The left icon URL of the added TabItem.</param>
      <returns>The newly created <see cref="T:EO.Web.TabItem"></see> object.</returns>
    </member>
    <member name="T:EO.Web.OverlapDirection">
      <summary>
            Specifies the overlapping direction  
            when adjacent icons in two neighbor items overlap with each other.
            </summary>
    </member>
    <member name="F:EO.Web.OverlapDirection.NotSet">
      <summary>
            The direction is not set. The runtime will try to use value 
            from the look item, if none is available, <b>Forward</b> is used.
            </summary>
    </member>
    <member name="F:EO.Web.OverlapDirection.Forward">
      <summary>
            For overlapping region, the items on the left are always on top of the items on the right. 
            </summary>
    </member>
    <member name="F:EO.Web.OverlapDirection.Backward">
      <summary>
            For overlapping region, the items on the right are alsways on top of the items on the left. 
            </summary>
    </member>
    <member name="T:EO.Web.OverlapAlign">
      <summary>
            Specifies the alignment of the adjacent icons in two neighbor items when they overlap with each other.
            </summary>
    </member>
    <member name="F:EO.Web.OverlapAlign.NotSet">
      <summary>
            The alignment is not set. The runtime will try to use value 
            from the look item, if none is available, <b>Bottom</b> is used.
            </summary>
    </member>
    <member name="F:EO.Web.OverlapAlign.Top">
      <summary>
            Align to the top.
            </summary>
    </member>
    <member name="F:EO.Web.OverlapAlign.Bottom">
      <summary>
            Align to the bottom.
            </summary>
    </member>
    <member name="T:EO.Web.TabItemGroup">
      <summary>
            Represents a group of TabItems.
            </summary>
    </member>
    <member name="P:EO.Web.TabItemGroup.ParentItem">
      <summary>
            Represents the parent item of this TabItem.
            </summary>
    </member>
    <member name="P:EO.Web.TabItemGroup.TemplateItem">
      <summary>
            Gets or sets an item that is used as a template to generate data bound items.
            </summary>
      <remarks>
        <p>
            During data binding, items are automatically created for each data record in the data source. 
            If <b>TemplateItem</b> is set, the newly created item will apply the same setting specified in TemplateItem. 
            </p>
        <p>
            Specify the common setting in <b>TemplateItem</b> to simplify the code. 
            </p>
        <tip>
            You can embed group inside a <b>TemplateItem</b>. The embedded group settings will apply to the newly created item's group.
            </tip>
        <p>
          <see href="Web/MenuCommon/DataBinding/binding_template.html">using item template</see> for details.</p>
      </remarks>
    </member>
    <member name="P:EO.Web.TabItemGroup.Items">
      <summary>
            Specifies the collection of child TabItems.
            </summary>
    </member>
    <member name="P:EO.Web.TabItemGroup.OverlapDirection">
      <summary>
            Specifies the overlapping direction 
            when adjacent icons in two neighbor items overlap with each other.
            </summary>
      <remarks>
        <p>
            If <see cref="P:EO.Web.TabItemGroup.OverlapDepth"></see> is set, runtime automatically
            generates the images of adjacent icons in two neighbor items overlap with each other.
            </p>
        <p>
            Use this property to specify how the adjacent icons 
            overlap with each other - left icon on top, or right icon on top.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TabItemGroup.OverlapDepth">
      <summary>
            Specifies the overlapping depth when adjacent icons in two neighbor items overlap with each other.
            </summary>
      <remarks>
        <p>
            EO.Web TabStrip automatically generates tons of images representing different states
            when adjacent icons in two neighbor items overlap with each other. 
            </p>
        <p>
            You can adjust this value and preview the result immediately to 
            design and create a professional-look TabStrip.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TabItemGroup.OverlapAlign">
      <summary>
            Specifies the alignment of the adjacent icons in two neighbor items when they overlap with each other.
            </summary>
      <remarks>
            If <see cref="P:EO.Web.TabItemGroup.OverlapDepth"></see> is set, runtime automatically
            generates the image of adjacent icons in two neighbor items overlap with each other.
            If two ajacent icons has different sizes, this property is used to align 
            the icons and generate the final result. 
            </remarks>
    </member>
    <member name="T:EO.Web.TabLookItemCollection">
      <summary>
            Represents a collection of TabStrip's "Look" items.
            </summary>
    </member>
    <member name="P:EO.Web.TabLookItemCollection.Default">
      <summary>
            Gets the Default look item object.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TabItem">
          </see>
        </p>
        <p>The tab item object that is used as a look item. </p>
            This property is read only, however, you can access the properties and methods of the object
            it returns.
            </value>
      <remarks>
            Represents the common appearance setting of item that do not belong to top level group. 
            For detailed information on how this look item is used, see <see cref="F:EO.Web.SpecialLookIDs.Auto">SpecialLookIDs.Auto</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TabLookItemCollection.TopLevelItem">
      <summary>
            Gets the TopLevelItem look item object.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TabItem">
          </see>
        </p>
        <p>The tab item object that is used as a look item. </p>
            This property is read only, however, you can access the properties and methods of the object
            it returns.
            </value>
      <remarks>
            Represents the common appearance setting of the top level items.  
            For detailed information on how this look item is used, see <see cref="F:EO.Web.SpecialLookIDs.Auto">SpecialLookIDs.Auto</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TabLookItemCollection.TopGroup">
      <summary>
            Gets the TopGroup look item object.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TabItem">
          </see>
        </p>
        <p>The menu item object that is used as a look item. </p>
            This property is read only, however, you can access the properties and methods of the object
            it returns.
            </value>
      <remarks>
            Represents the common appearance setting of the top level group. 
            For detailed information on how this look item is used, see <see cref="F:EO.Web.SpecialLookIDs.Auto">SpecialLookIDs.Auto</see>.
            </remarks>
    </member>
    <member name="T:EO.Web.TabStrip">
      <summary>
            EO.Web TabStrip offers multi-tab functionality to navigate ASP.NET Web pages.
            </summary>
      <remarks>
        <p>
            TabStrip offers rich tab-based navigation with a variety of built-in 
            skins to jump start your design. The control features automatic overlapping items, 
            full server-side and client-side interface, extensive data binding support 
            and a powerful TabStrip Builder to simplify design-time effort. 
            </p>
        <p>
            TabStrip is derived from <see cref="T:EO.Web.BaseNavigator"></see>, it shares
            the same architecture, concepts and many functionality with Menu.
            On client side, TabStrip and Menu uses almost the same set of client-side API.
            </p>
        <p>
            For more information on how to use TabStrip control, see 
            <see href="Web/TabStrip/overview.html">TabStrip Documentation</see>.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.TabStrip.#ctor">
      <summary>
            Creates an instance of TabStrip.
            </summary>
    </member>
    <member name="P:EO.Web.TabStrip.LookItems">
      <summary>
            Returns a collection of "Look" items. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TabLookItemCollection">
          </see>
        </p>
            A collection of "Look" which defines tab item's appearance settings. "Look" is also a
            <b>TabItem</b> object. 
            <p> This property is read only. However, you can access the properties and methods of the 
            object it returns.</p></value>
      <remarks>
        <p>
            TabStrip maintains a collection of "Looks" which can be applied to each tab item. 
            You can change a specific "Look" to control the common appearance of the tab items
            that use this "Look". Each "Look" in the collection is also a <b>TabItem</b> object. 
            Apply "Look" to a tab item by using the <b>TabItem</b>'s <see cref="P:EO.Web.NavigationItem.LookID">LookID</see> property.
            </p>
        <p>		
            When designing a TabStrip's appearance, you should put common appearance setting into "Look" item,
            such as an item's border, padding, font etc. For individual item that has specific appearance, 
            such as LeftIcon, you can set the appearance setting on that item. During run time, a tab item 
            will merge its own appearance setting and its "Look" item's appearance setting together. 
            </p>
            See <a href="Web/MenuCommon/LookSkinAndTheme/looks.html">Navigation Item Look</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.TabStrip.TopGroup">
      <summary>
            Gets the top level group. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TabItemGroup">
          </see>
        </p>
            The top level group object. 
            <p> This property is read only. However, you can set the properties 
            of the <see cref="T:EO.Web.TabItemGroup"></see> object it returns.</p></value>
      <remarks>
            Use <b>TopGroup</b> to control the appearance, behavior and content of 
            the top level items.
            </remarks>
    </member>
    <member name="P:EO.Web.TabStrip.Items">
      <summary>
            Returns a collection of top level items. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TabItemCollection">
          </see> class</p>
            A collection of top level items. 
            <p> This property is read only. However, you can access the properties and methods of the 
            object it returns.</p></value>
      <remarks>
            This property is a collection of top level items. 
            You can also access the top level items via <see cref="P:EO.Web.TabItemGroup.Items">TabStrip.TopGroup.Items</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TabStrip.SelectedIndex">
      <summary>
            Gets or sets the index of a Selected item for top level tab items only.
            </summary>
      <remarks>
            This property only returns (or sets) selected index for top level tab items only.
            </remarks>
    </member>
    <member name="P:EO.Web.TabStrip.MultiRow">
      <summary>
            Gets or sets a value indicating whether this TabStrip is a multi-row TabStrip.
            </summary>
      <remarks>
        <p>
            When this property is set to <b>true</b>, the TabStrip automatically wraps
            tab items into multiple rows. The following properties are important for a 
            multi-row TabStrip, some of them are mandatory:
            </p>
        <list type="number">
          <item>
            <see cref="P:System.Web.UI.WebControls.WebControl.Width">
            </see>. Width property must be set on a multi-row
            	TabStrip. The TabStrip relies on the set total width to decide when
            	to wrap to a new row;
            	</item>
          <item>
            <see cref="P:EO.Web.TabStrip.RowSpacing">
            </see>. This property take a positive or negative
            	integer. A positive value moves rows apart, a negative number causes rows to
            	overlap with each other.
            	</item>
          <item>
            <see cref="P:EO.Web.NavigationItem.Width">TabItem.Width</see>, 
            	<see cref="P:EO.Web.NavigationItem.Height">TabItem.Height</see>, 
            	<see cref="P:EO.Web.BaseMenuItemGroup.LeftIconCellWidth">TabGroup.LeftIconCellWidth</see> and
            	<see cref="P:EO.Web.BaseMenuItemGroup.RightIconCellWidth">TabGroup.RightIconCellWidth</see>.
            	These properties provides suggestive values to help the browser to determine
            	the tab item's size. Since TabStrip also uses the tab item's size to decide
            	the layout of the rows, these values helps TabStrip to render consistently
            	across browsers;
            	</item>
        </list>
        <p>
          <b>MultiRow</b> and <see cref="P:EO.Web.BaseNavigator.EnableScrolling"></see> can not be set to <b>true</b>
            at the same time.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TabStrip.RowSpacing">
      <summary>
            Gets or sets the spacing in pixel between rows for multi-row TabStrip.
            </summary>
      <remarks>
            This property can take both positive and negative numbers. A positive value moves
            rows apart; a negative number causes the rows to overlap.
            </remarks>
    </member>
    <member name="M:EO.Web.TabStrip.LoadTabStrip(System.String)">
      <summary>
            Loads a TabStrip from the specified location.
            </summary>
      <param name="virtualPath">
            The virtual path of the TabStrip file. 
            You can use '~' to represent the Web application root. 
            For example, you can use "~/tabstrip1.EOWeb.ascx" to 
            load "tabstrip1.EOWeb.ascx" in the Web application root directory. 
            </param>
      <returns>A TabStrip.</returns>
    </member>
    <member name="M:EO.Web.TabStrip.LoadTabStripSkin(System.String,System.String)">
      <summary>
            Loads a TabStrip skin from the specified location.
            </summary>
      <param name="virtualPath">The virtual path of the TabStrip file. 
            You can use '~' to represent the Web application root. 
            For example, you can use "~/tabstrip1.EOWeb.ascx" to 
            load "tabstrip1.EOWeb.ascx" in the Web application root directory. 
            </param>
      <param name="customSkinId">The ID of the custom skin. 
            You can set this ID to other TabStrip to apply this Skin to the TabStrip.
            </param>
    </member>
    <member name="T:EO.Web.ToolBar">
      <summary>
            Represents a tool bar control.
            </summary>
      <remarks>
        <see cref="T:EO.Web.ToolBar">
        </see> control contains a list of 
            <see cref="T:EO.Web.ToolBarItem"></see> that can render as standard
            image button, a separator, a drop down menu or any custom
            HTML.
            </remarks>
    </member>
    <member name="M:EO.Web.ToolBar.#ctor">
      <summary>
            Initializes a new <see cref="T:EO.Web.ToolBar"></see> object.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.Items">
      <summary>
            Gets the collection of <see cref="T:EO.Web.ToolBarItem"></see>
            objects that are assigned to this toolbar control.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.ItemTemplates">
      <summary>
            Gets the collection of <see cref="T:EO.Web.ToolBarItem"></see> objects
            that are used as templates for regular tool bar items in the
            <see cref="P:EO.Web.ToolBar.Items"></see> collection.
            </summary>
      <remarks>
        <p>
            Different type of tool bar items usually have different style
            settings. Instead of configuring every tool bar item in the
            tool bar's <see cref="P:EO.Web.ToolBar.Items"></see> collection, you can configure
            one for each type of <see cref="T:EO.Web.ToolBarItem"></see> and place
            them in the <see cref="P:EO.Web.ToolBar.ItemTemplates"></see> collection.
            </p>
        <p>
            At runtime, the <see cref="T:EO.Web.ToolBar"></see> tries to locate a 
            template item for each tool bar item 
            by searching a tool bar item with the same 
            <see cref="P:EO.Web.ToolBarItem.Type"></see> value in its 
            <see cref="P:EO.Web.ToolBar.ItemTemplates"></see> collection. The template item's style
            setting is then used unless overriden on the target item.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.ToolBar.BackgroundImageLeft">
      <summary>
            Gets or sets the URL of the background image for the left edge of the tool bar.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.BackgroundImage">
      <summary>
            Gets or sets the URL of the background image for the tool bar.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.SeparatorImage">
      <summary>
            Gets or sets the URL of the image for a separator.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.BackgroundImageRight">
      <summary>
            Gets or sets the URL of the background image for the right edge of the tool bar.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.NormalStyle">
      <summary>
            Gets or sets the style used by a tool bar item when it is not highlighted. 
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.HoverStyle">
      <summary>
            Gets or sets the style used by a tool bar item when it is highlighted. 
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.DownStyle">
      <summary>
            Gets or sets the style used by a tool bar item when it is pressed down. 
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.DisabledStyle">
      <summary>
            Gets or sets the style used by a tool bar item when it is disabled. 
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.TextAlign">
      <summary>
            Gets or sets the alignment of the text for tool bar items.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.ClientSideOnItemClick">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            when a tool bar item is clicked. 
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.toolbar_event_handler.html">toolbar_event_handler</a>
            for details about this event. 
            </remarks>
    </member>
    <member name="P:EO.Web.ToolBar.ClientSideBeforeSubMenuExpand">
      <summary>
            Specifies the name of the client side JavaScript function to be executed 
            before a drop down menu is to be expanded (displayed). 
            </summary>
      <remarks>
            Use this client side event to modify the sub menu before it is displayed.
            See <a href="JSDoc.Public.Web.Handlers.toolbar_event_handler.html">toolbar_event_handler</a>
            for details about this event. 
            </remarks>
    </member>
    <member name="P:EO.Web.ToolBar.AutoPostBack">
      <summary>
            Gets or sets a value specifying whether clicking a tool bar item
            automatically posts back to the server.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBar.CausesValidation">
      <summary>
            Gets or sets a value indicating whether validation is performed when the 
            toolbar triggers a server event.
            </summary>
    </member>
    <member name="M:EO.Web.ToolBar.FindItem(System.String)">
      <summary>
            Searches for a <see cref="T:EO.Web.ToolBarItem"></see> with the specified command name.
            </summary>
      <param name="commandName">The command name for the <see cref="T:EO.Web.ToolBarItem"></see>
            as specified by <see cref="P:EO.Web.ToolBarItem.CommandName"></see> property.</param>
      <returns>
            Returns the specified tool bar item, or <b>null</b> (Visual Basic <b>Nothing</b>)
            if none is found.
            </returns>
    </member>
    <member name="E:EO.Web.ToolBar.ItemClick">
      <summary>
            Occurs when a <see cref="T:EO.Web.ToolBarItem"></see> is clicked.
            </summary>
      <remarks>
        <see cref="P:EO.Web.ToolBar.AutoPostBack">
        </see> must be set to <b>true</b> in order
            to trigger this event.
            </remarks>
    </member>
    <member name="T:EO.Web.ToolBarEventArgs">
      <summary>
            Provides data for the <see cref="E:EO.Web.ToolBar.ItemClick"></see> event.
            </summary>
    </member>
    <member name="M:EO.Web.ToolBarEventArgs.#ctor(EO.Web.ToolBarItem)">
      <summary>
            Creates a new instance of the ToolBarItemEventArgs class.
            </summary>
      <param name="item">The toolbar item that caused the event.</param>
    </member>
    <member name="P:EO.Web.ToolBarEventArgs.Item">
      <summary>
            Returns the tool bar item that is associated to this event.
            </summary>
    </member>
    <member name="T:EO.Web.ToolBarEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:EO.Web.ToolBar.ItemClick"></see> event.
            </summary>
    </member>
    <member name="T:EO.Web.ToolBarItemType">
      <summary>
            Specifies the type of the tool bar item.
            </summary>
    </member>
    <member name="F:EO.Web.ToolBarItemType.Button">
      <summary>
            A regular image button. The images are specified by the
            tool bar item's <see cref="P:EO.Web.ToolBarItem.ImageUrl"></see>,
            <see cref="P:EO.Web.ToolBarItem.HoverImageUrl"></see>,
            <see cref="P:EO.Web.ToolBarItem.DownImageUrl"></see>,
            <see cref="P:EO.Web.ToolBarItem.DisabledImageUrl"></see> property.
            </summary>
    </member>
    <member name="F:EO.Web.ToolBarItemType.Separator">
      <summary>
            A separator item. The separator image is specified by the
            tool bar's <see cref="P:EO.Web.ToolBar.SeparatorImage"></see> image.
            </summary>
    </member>
    <member name="F:EO.Web.ToolBarItemType.DropDownMenu">
      <summary>
            A drop down menu. The menu is specified by the tool bar item's
            <see cref="P:EO.Web.ToolBarItem.DropDownMenuID"></see> property. A tool
            bar item of this type itself also a button.
            </summary>
    </member>
    <member name="F:EO.Web.ToolBarItemType.Custom">
      <summary>
            A custom tool bar item. The button content is specified by
            the tool bar item's <see cref="P:EO.Web.ToolBarItem.CustomItem"></see>
            template.
            </summary>
    </member>
    <member name="T:EO.Web.ToolBarItemTextAlign">
      <summary>
            Specifies how tool bar item text are aligned.
            </summary>
    </member>
    <member name="F:EO.Web.ToolBarItemTextAlign.NotSet">
      <summary>
            Not specified.
            </summary>
    </member>
    <member name="F:EO.Web.ToolBarItemTextAlign.Right">
      <summary>
            The text is aligned to the right of the toolbar button image.
            </summary>
    </member>
    <member name="F:EO.Web.ToolBarItemTextAlign.Underneath">
      <summary>
            The text is aligned underneath the toolbar button image.
            </summary>
    </member>
    <member name="T:EO.Web.ToolBarItem">
      <summary>
            Represents a tool bar item.
            </summary>
    </member>
    <member name="M:EO.Web.ToolBarItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.ToolBarItem"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.Type">
      <summary>
            Gets or sets the type of the tool bar item.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.CustomItem">
      <summary>
            Gets or sets the template for a custom tool bar item.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.CustomItemInstance">
      <summary>
            Gets an instance of the custom item.
            </summary>
      <remarks>
            You can call <see cref="M:System.Web.UI.Control.FindControl(System.String)"></see>
            on the returned control to locate certain controls in the custom
            item.
            </remarks>
    </member>
    <member name="P:EO.Web.ToolBarItem.ImageUrl">
      <summary>
            Gets or set the URL of the image for the item.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.HoverImageUrl">
      <summary>
            Gets or set the URL of the image for the item when mouse hovers over the item.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.DownImageUrl">
      <summary>
            Gets or set the URL of the image for the item when the item is pressed down.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.DisabledImageUrl">
      <summary>
            Gets or set the URL of the image for the item when the item is disabled.
            </summary>
      <remarks>
        <b>Note</b>: EO.Web ToolBar is able to automatically generate
            a grayscale image based on <see cref="P:EO.Web.ToolBarItem.ImageUrl"></see> if this
            property is not set. Thus usually you do not need to set this 
            property. 
            </remarks>
    </member>
    <member name="P:EO.Web.ToolBarItem.Text">
      <summary>
            Gets or sets the text of the item.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.ToolTip">
      <summary>
            Gets or sets the tool tip of the item.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.GroupName">
      <summary>
            Gets or sets a group name for this item.
            </summary>
      <remarks>
            Only one item in the same group can be in <b>Pushed</b> state.
            </remarks>
    </member>
    <member name="P:EO.Web.ToolBarItem.Disabled">
      <summary>
            Gets or sets a value indicating whether the tool bar item is disabled.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.Visible">
      <summary>
            Gets or sets a value indicating whether the tool bar item is visible.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.AutoCheck">
      <summary>
            Gets or sets a value indicating whether the tool bar item automatically toggles between normal state and pushed state when clicked.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.Pushed">
      <summary>
            Gets or sets a value indicating whether the tool bar item is pushed.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.CommandName">
      <summary>
            Gets or sets the command name of the item.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.CommandArgument">
      <summary>
            Gets or sets the command argument of the item.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.NormalStyle">
      <summary>
            Gets or sets the style for the tool bar item in normal state.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.HoverStyle">
      <summary>
            Gets or sets the style for the tool bar item in hover state.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.DownStyle">
      <summary>
            Gets or sets the style for the tool bar item in down state.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.DisabledStyle">
      <summary>
            Gets or sets the style for the tool bar item in disabled state.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItem.DropDownMenuID">
      <summary>
            Gets or sets the ID of the drop down menu for this button. 
            </summary>
      <remarks>
        <p>
            You can specify a menu ID or a Menu ID and a sub menu ID with this
            property. To specify a menu ID and a sub menu ID, set this property
            to <i>menu_id</i>:<i>sub_menu_id</i>, where <i>menu_id</i> is the
            ID of the menu and <i>sub_menu_id</i> is the value of the
            <see cref="P:EO.Web.NavigationItem.ItemID"></see> of the parent item of the
            sub menu you want to associate with the tool bar item. Supporting
            sub menu ID allows you to only place one menu in the page and 
            associate different sub menus to different tool bar item.
            </p>
        <p>
            The menu used would usually be a <see cref="T:EO.Web.ContextMenu"></see>
            object because a context menu not visible by default.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.ToolBarItem.DropDownButtonWidth">
      <summary>
            Gets or sets the width of the drop down button.
            </summary>
      <remarks>
            Use this property to specify the width of the drop down button in
            pixel when the item's <see cref="P:EO.Web.ToolBarItem.Type"></see> is set to 
            <see cref="F:EO.Web.ToolBarItemType.DropDownMenu"></see>. The default value 
            is 12.
            </remarks>
    </member>
    <member name="T:EO.Web.ToolBarItemCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Web.ToolBarItem"></see> objects. 
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItemCollection.Item(System.Int32)">
      <summary>
            Gets a toolbar item in the collection at specific index. 
            </summary>
      <remarks>
            Index is the zero-based index of the menu item to get. 
            In C#, this property is the indexer of <see cref="T:EO.Web.ToolBarItemCollection">ToolBarItemCollection</see> class. 
            </remarks>
    </member>
    <member name="P:EO.Web.ToolBarItemCollection.Item(System.String)">
      <summary>
            Gets a toolbar item in the collection with the given <see cref="P:EO.Web.ToolBarItem.CommandName"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItemCollection.ToolBar">
      <summary>
            Gets the ToolBar control this toolbar item belongs to.
            </summary>
    </member>
    <member name="M:EO.Web.ToolBarItemCollection.GetEnumerator">
      <summary>
            This class implements <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface. 
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface that you can use to manipulate the collection.
            Please refer to MSDN for details about <see cref="T:System.Collections.IEnumerator">IEnumerator</see> interface.
            </returns>
    </member>
    <member name="P:EO.Web.ToolBarItemCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read only. Always return <b>false</b>.		
            </summary>
    </member>
    <member name="M:EO.Web.ToolBarItemCollection.Add(EO.Web.ToolBarItem)">
      <summary>
            Adds a toolbar item to the end of the collection.
            </summary>
      <param name="item">The item to be added to the end of the collection.</param>
      <returns>The index at which the new item was added.</returns>.
        </member>
    <member name="M:EO.Web.ToolBarItemCollection.IndexOf(EO.Web.ToolBarItem)">
      <summary>
            Determines the index of a specific item in the collection.
            </summary>
      <param name="item">The item to locate in the collection.</param>
      <returns>The index of item if found in the colllection; otherwise, -1.</returns>
    </member>
    <member name="M:EO.Web.ToolBarItemCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to be removed. 
            </param>
    </member>
    <member name="M:EO.Web.ToolBarItemCollection.Insert(System.Int32,EO.Web.ToolBarItem)">
      <summary>
            Inserts an item into the collection at the specified position.
            </summary>
      <param name="index">The zero-based index at which the item should be inserted.</param>
      <param name="item">The item to be inserted into the collection.</param>
    </member>
    <member name="M:EO.Web.ToolBarItemCollection.Remove(EO.Web.ToolBarItem)">
      <summary>
            Removes the first occurrence of the item.
            </summary>
      <param name="item">The item to be removed from the collection.</param>
    </member>
    <member name="M:EO.Web.ToolBarItemCollection.Contains(EO.Web.ToolBarItem)">
      <summary>
            Determines whether the collection contains the specified item.
            </summary>
      <param name="item">The item to locate in the collection.</param>
      <returns>
        <b>true</b> if the item is found in the collection; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:EO.Web.ToolBarItemCollection.Clear">
      <summary>
            Removes all items from the collection. 
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItemCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            Always return <b>false</b>.
            </summary>
    </member>
    <member name="P:EO.Web.ToolBarItemCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the ToolBarItemCollection is synchronized (thread-safe).
            Always returns <b>false</b>.
            </summary>
      <seealso cref="P:System.Collections.ICollection.IsSynchronized">ICollection.IsSynchronized</seealso>
    </member>
    <member name="P:EO.Web.ToolBarItemCollection.Count">
      <summary>
            Gets the number of items contained in the collection.
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
        <p>The integer indicating the number of items in this collection.</p>
            This property is read only.
            </value>
      <remarks>
            Use <b>Count</b> to get the number of items contained in this collection.
            </remarks>
    </member>
    <member name="M:EO.Web.ToolBarItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the items of the collection to an Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the collection. The Array must have zero-based indexing. </param>
      <param name="index">The zero-based index in <see cref="T:System.Array">Array</see> at which copying begins.</param>
    </member>
    <member name="P:EO.Web.ToolBarItemCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:EO.Web.ToolBarItemCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the collection.
            </summary>
      <param name="c">The collection to be added. </param>
    </member>
    <member name="T:EO.Web.ToolTip">
      <summary>
            Creates a tooltip.
            </summary>
    </member>
    <member name="M:EO.Web.ToolTip.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.ToolTip"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.BackColor">
      <summary>
            Gets or sets the background color.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.BorderColor">
      <summary>
            Gets or sets the border color.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.BorderStyle">
      <summary>
            Gets or sets the borders style.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.BorderWidth">
      <summary>
            Gets or sets the border width.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.ForeColor">
      <summary>
            Gets or sets the foreground color.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.CssClass">
      <summary>
            Gets or sets the CSS class name of the control.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.PopupStyle">
      <summary>
            Gets or sets the style properties for the entire tooltip.
            </summary>
      <remarks>
            This property is usually used to configure the tooltip border, background color and paddings.
            </remarks>
    </member>
    <member name="P:EO.Web.ToolTip.HeaderStyle">
      <summary>
            Gets or sets the style properties for the header text.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.BodyStyle">
      <summary>
            Gets or sets the style properties for the content text.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.HeaderHtml">
      <summary>
            Gets or sets the header HTML.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.BodyHtml">
      <summary>
            Gets or sets the tooltip body HTML.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.ShowDelay">
      <summary>
            Gets or sets the tooltip show delay in milliseconds.
            </summary>
      <remarks>
            The default value is 500.
            </remarks>
    </member>
    <member name="P:EO.Web.ToolTip.CloseDelay">
      <summary>
            Gets or sets the tooltip close delay in milliseconds.
            </summary>
      <remarks>
            The default value is 300.
            </remarks>
    </member>
    <member name="P:EO.Web.ToolTip.Opacity">
      <summary>
            Gets or sets the tooltip opacity ranging from 1 to 100.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.ShadowColor">
      <summary>
            Gets or sets the color of the shadow of the tooltip.
            </summary>
      <remarks>
            Shadow is disabled if <see cref="P:EO.Web.ToolTip.Animation"></see> is set to a value
            other than <see cref="F:EO.Web.ToolTipAnimation.None"></see>, or when 
            <see cref="P:EO.Web.ToolTip.Opacity"></see> is set to a value other than 100.
            </remarks>
    </member>
    <member name="P:EO.Web.ToolTip.ShadowDepth">
      <summary>
            Gets or sets the depth (in pixel) of the shadow of the tooltip.
            </summary>
      <remarks>
            Shadow is disabled if <see cref="P:EO.Web.ToolTip.Animation"></see> is set to a value
            other than <see cref="F:EO.Web.ToolTipAnimation.None"></see>, or when 
            <see cref="P:EO.Web.ToolTip.Opacity"></see> is set to a value other than 100.
            </remarks>
    </member>
    <member name="P:EO.Web.ToolTip.Animation">
      <summary>
            Gets or sets the tooltip animation.
            </summary>
    </member>
    <member name="P:EO.Web.ToolTip.AnimationDuration">
      <summary>
            Gets or sets the animation duration in milliseconds.
            </summary>
    </member>
    <member name="T:EO.Web.ToolTipAnimation">
      <summary>
            Specifies tooltip animation.
            </summary>
    </member>
    <member name="F:EO.Web.ToolTipAnimation.None">
      <summary>
            No animation.
            </summary>
    </member>
    <member name="F:EO.Web.ToolTipAnimation.Fade">
      <summary>
            Fade animation.
            </summary>
    </member>
    <member name="F:EO.Web.ToolTipAnimation.GlideTopToBottom">
      <summary>
            Glides the tooltip from top the bottom.
            </summary>
    </member>
    <member name="F:EO.Web.ToolTipAnimation.GlideBottomToTop">
      <summary>
            Glides the tooltip from bottom to top.
            </summary>
    </member>
    <member name="F:EO.Web.ToolTipAnimation.GlideLeftToRight">
      <summary>
            Glides the tooltip from left to right.
            </summary>
    </member>
    <member name="F:EO.Web.ToolTipAnimation.GlideRightToLeft">
      <summary>
            Glide the tooltip from right to left.
            </summary>
    </member>
    <member name="T:EO.Web.TreeViewCheckBoxImages">
      <summary>
            Represents images displayed on a <see cref="T:EO.Web.TreeNode"></see> when the TreeNode is in different <see cref="P:EO.Web.TreeNode.CheckState"></see>s.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewCheckBoxImages.Visible">
      <summary>
            Gets or sets a value indicating whether the specified image is visible. 
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewCheckBoxImages.Width">
      <summary>
            Gets or sets the width (in pixel) of checkbox images.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewCheckBoxImages.Height">
      <summary>
            Gets or sets the height (in pixel) of checkbox images.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewCheckBoxImages.UncheckedUrl">
      <summary>
            Gets or sets the URL for the image to display when a TreeNode's 
            <see cref="P:EO.Web.TreeNode.CheckState"></see> 
            is <see cref="F:EO.Web.CheckState.Unchecked"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewCheckBoxImages.CheckedUrl">
      <summary>
            Gets or sets the URL for the image to display when a TreeNode's 
            <see cref="P:EO.Web.TreeNode.CheckState"></see> is 
            <see cref="F:EO.Web.CheckState.Checked"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewCheckBoxImages.IndeterminateUrl">
      <summary>
            Gets or sets the URL for the image to display when a TreeNode's 
            <see cref="P:EO.Web.TreeNode.CheckState"></see> is 
            <see cref="F:EO.Web.CheckState.Indeterminate"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewCheckBoxImages.DisabledUncheckedUrl">
      <summary>
            Gets or sets the URL for the image to display when a 
            TreeNode's  <see cref="P:EO.Web.TreeNode.CheckState"></see> 
            is <see cref="F:EO.Web.CheckState.Unchecked"></see> and
            <see cref="P:EO.Web.NavigationItem.Disabled"></see> property is <b>true</b>.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewCheckBoxImages.DisabledCheckedUrl">
      <summary>
            Gets or sets the URL for the image to display when a 
            TreeNode's  <see cref="P:EO.Web.TreeNode.CheckState"></see> 
            is <see cref="F:EO.Web.CheckState.Checked"></see> and
            <see cref="P:EO.Web.NavigationItem.Disabled"></see> property is <b>true</b>.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewCheckBoxImages.DisabledIndeterminateUrl">
      <summary>
            Gets or sets the URL for the image to display when a 
            TreeNode's  <see cref="P:EO.Web.TreeNode.CheckState"></see> 
            is <see cref="F:EO.Web.CheckState.Indeterminate"></see> and
            <see cref="P:EO.Web.NavigationItem.Disabled"></see> property is <b>true</b>.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewCheckBoxImages.Margin">
      <summary>
            Specifies the space on the left of this checkbox image.
            </summary>
    </member>
    <member name="T:EO.Web.TreeLookNodeCollection">
      <summary>
            Represents a collection of TreeView's "Look" nodes.
            </summary>
    </member>
    <member name="P:EO.Web.TreeLookNodeCollection.Default">
      <summary>
            Gets the Default TreeNode look object.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeNode">
          </see>
        </p>
        <p>The TreeNode object that is used as a look item. </p>
            This property is read only, however, you can access the properties and methods of the object
            it returns.
            </value>
      <remarks>
            Represents the common appearance setting of nodes that do not belong to top level group. 
            For detailed information on how this look item is used, see <see cref="F:EO.Web.SpecialLookIDs.Auto">SpecialLookIDs.Auto</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeLookNodeCollection.TopGroup">
      <summary>
            Gets the TopGroup TreeNode look object.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeNode">
          </see>
        </p>
        <p>The TreeNode object that is used as a look item. </p>
            This property is read only, however, you can access the properties and methods of the object
            it returns.
            </value>
      <remarks>
            Represents the appearance setting of the entire top group nodes. 
            Individual tree nodes that belongs to top group may use 
            <see cref="P:EO.Web.TreeLookNodeCollection.TopLevelItem"></see> look.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeLookNodeCollection.TopLevelItem">
      <summary>
            Gets the TopGroup TreeNode look object.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeNode">
          </see>
        </p>
        <p>The TreeNode object that is used as a look item. </p>
            This property is read only, however, you can access the properties and methods of the object
            it returns.
            </value>
      <remarks>
            Represents the common appearance setting of the entire top group nodes.
            </remarks>
    </member>
    <member name="T:EO.Web.CheckState">
      <summary>
            Specifies the check state of a control, e.g, a <see cref="T:EO.Web.TreeNode"></see>.
            </summary>
    </member>
    <member name="F:EO.Web.CheckState.Unchecked">
      <summary>
            The control is unchecked. 
            </summary>
    </member>
    <member name="F:EO.Web.CheckState.Checked">
      <summary>
            The control is checked. 
            </summary>
    </member>
    <member name="F:EO.Web.CheckState.Indeterminate">
      <summary>
            The control is indeterminate. 
            This state is normally used when the control's state should 
            not be checked or unchecked, e.g, an inapplicable option. 
            An indeterminate control generally has a shaded appearance to 
            indicate that the control cannot be checked/unchecked. 
            </summary>
    </member>
    <member name="T:EO.Web.TreeNode">
      <summary>
            Represents a tree node in a TreeView control. 
            </summary>
      <remarks>
        <p>
            A TreeView control is made up of a hierarchy of tree nodes
            represented by <b>TreeNode</b> objects. A group of tree nodes that have the same parent node 
            forms <b>SubGroup</b> of the tree node, and is represented by the <see cref="T:EO.Web.TreeNodeGroup"></see>
            object. The group can be accessed
            by <see cref="P:EO.Web.TreeNode.SubGroup">TreeNode.SubGroup</see> property.
            You can access the parent tree node of the subgroup by using  
            <see cref="P:EO.Web.TreeNodeGroup.ParentNode">TreeNodeGroup.ParentNode</see> property. 
            </p>
        <p>
            Each subgroup maintains a collection of child <b>TreeNode</b> objects.
            You can access this child tree node collection through:
            <list type="bullet"><item><see cref="P:EO.Web.TreeNode.ChildNodes">TreeNode.SubNodes</see></item><item><see cref="P:EO.Web.TreeNodeGroup.Nodes">TreeNode.SubGroup.Nodes</see></item></list>
            Both properties access the same <see cref="T:EO.Web.TreeNodeCollection"></see> object.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.TreeNode.#ctor(System.String)">
      <summary>
            Creates an instance of TreeNode.
            </summary>
      <param name="html">The text of the TreeNode.</param>
    </member>
    <member name="M:EO.Web.TreeNode.#ctor">
      <summary>
            Creates an instance of TreeNode.
            </summary>
    </member>
    <member name="P:EO.Web.TreeNode.Checked">
      <summary>
            Specifies if the TreeNode is checked or unchecked. 
            </summary>
    </member>
    <member name="P:EO.Web.TreeNode.AllowEdit">
      <summary>
            Gets or sets a value indicating whether user can edit the tree node text.
            </summary>
      <remarks>
            This property overrides <see cref="P:EO.Web.TreeNodeGroup.AllowEdit"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNode.AllowDrag">
      <summary>
            Gets or sets a value indicating whether user can drag this node.
            </summary>
      <remarks>
            This property overrides <see cref="P:EO.Web.TreeNodeGroup.AllowDrag"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNode.AllowDrop">
      <summary>
            Gets or sets a value indicating whether user can drop another node on to this node.
            </summary>
      <remarks>
            This property overrides <see cref="P:EO.Web.TreeNodeGroup.AllowDrop"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNode.ParentNode">
      <summary>
            Gets the parent <see cref="T:EO.Web.TreeNode"></see> that contains this TreeNode.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeNode">
          </see>
        </p>
            The parent TreeNode. 
            </value>
      <seealso cref="T:EO.Web.TreeView">
      </seealso>
      <seealso cref="T:EO.Web.TreeNode">
      </seealso>
      <seealso cref="T:EO.Web.TreeNodeGroup">
      </seealso>
    </member>
    <member name="P:EO.Web.TreeNode.SubGroup">
      <summary>
            Gets subgroup of a TreeNode.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeNodeGroup">
          </see>
        </p>
        <p>The subgroup of a tree node.</p>
            The property is read only, however, you can access the properties and methods
            of the object it returns.
            </value>
      <remarks>
            Use this property to control the appearance, behavior and contents 
            of the subgroup. 
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNode.ChildNodes">
      <summary>
            Returns a collection of sub tree nodes.
            </summary>
      <remarks>
            This property returns the same collection as <see cref="P:EO.Web.TreeNodeGroup.Nodes">TreeNode.SubGroup.Nodes</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNode.ShowCheckBox">
      <summary>
            Gets or sets a value indicating whether or not to display appropriate checkbox when <see cref="P:EO.Web.TreeNode.CheckState"></see> changes.
            </summary>
      <remarks>
        <p>
            Setting this property to <see cref="F:EO.Web.NullableBool.True"></see> causes 
            the tree node to display appropriate image specified in <see cref="P:EO.Web.TreeView.CheckBoxImages">TreeView.CheckBoxImages</see> property.
            If <see cref="P:EO.Web.TreeView.CheckBoxImages"></see> is not defined, default image for a Checkbox will be displayed. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeNode.MarginImageUrl">
      <summary>
            Specifies the URL of an image associated with this TreeNode.
            The image will be displayed on the left margin of the TreeView whenever the tree node is visible. 		
            </summary>
      <remarks>
            You can specify an image associated with the TreeNode. This image
            will be displayed on the left margin of the TreeView whenever the tree node is visible. 
            For example, when a tree is expanded, TreeView will display any images that associate 
            with any visible node on the left margin.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNode.ImageUrl">
      <summary>
            Specifies the URL of an image associated with this TreeNode.
            The image will be displayed to the left of TreeNode's Text. 		
            </summary>
    </member>
    <member name="P:EO.Web.TreeNode.ExpandedImageUrl">
      <summary>
            Specifies the URL of an image associated with this TreeNode when the tree node is expanded.
            The image will be displayed to the left of TreeNode's Text. 		
            </summary>
    </member>
    <member name="P:EO.Web.TreeNode.CollapsedImageUrl">
      <summary>
            Specifies the URL of an image associated with this TreeNode when the tree node is collapsed.
            The image will be displayed to the left of TreeNode's Text. 		
            </summary>
    </member>
    <member name="P:EO.Web.TreeNode.LineImageUrl">
      <summary>
            Specifies the URL used to override the default line image for this tree node.
            </summary>
      <remarks>
            Use this image to override the default line image. 
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNode.CheckState">
      <summary>
            Specifies the value indicating if a tree node is in a <see cref="F:EO.Web.CheckState.Checked"></see>, <see cref="F:EO.Web.CheckState.Unchecked"></see> or <see cref="F:EO.Web.CheckState.Indeterminate"></see> state. 
            </summary>
      <remarks>
        <p>
            By default, you can switch <see cref="F:EO.Web.CheckState.Checked"></see> and 
            <see cref="F:EO.Web.CheckState.Unchecked"></see> state by clicking on the tree node. 
            The tree node switches states without affecting parent or child nodes's <b>CheckState</b>.
            The tree node will never enter <see cref="F:EO.Web.CheckState.Indeterminate"></see> state.
            </p>
        <p>
            You can specify EO.Web TreeView to automatically switch parent or child nodes <b>CheckState</b>
            by using <see cref="P:EO.Web.TreeView.AutoCheckParent"></see>, <see cref="P:EO.Web.TreeView.AutoCheckChildren"></see>
            and <see cref="P:EO.Web.TreeView.AutoUncheckChildren"></see> properties. 
            The above properties allows you to create a friendly user interface for selecting/deselecting a group of options.
            </p>
        <p>
            By specifying the above three "Auto" properties, clicking on a tree node will affect parent or child nodes's 
            <b>CheckState</b> and parent node might enter 
            <see cref="F:EO.Web.CheckState.Indeterminate"></see>
            state if not all of its child nodes are in the same state.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeNode.PopulateOnDemand">
      <summary>
            Populates a group of tree nodes only when the parent node is expanded.
            </summary>
      <remarks>
        <p>
            By default, this property is <b>false</b>.
            </p>
        <p>
            This property improves user experience when there is a large amount of nodes need to be populated.
            TreeView displays top level nodes and populates child nodes whenever its parent is expanded.
            </p>
        <note>
            The viewstate of the populated tree node is not always retained. If you need to use 
            viewstate, please turn off this feature.
            </note>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeNode.Text">
      <summary>
            Specifies the HTML text of this TreeNode.
            </summary>
    </member>
    <member name="P:EO.Web.TreeNode.TextMargin">
      <summary>
            Specifies the left margin of the text. Use this property to adjust the space left to the Text.
            </summary>
    </member>
    <member name="P:EO.Web.TreeNode.IsLeafNode">
      <summary>
            Returns whether this node is a leaf node.
            </summary>
      <remarks>
            Returns <b>true</b> if this is a leaf node, otherwise <b>false</b>.
            </remarks>
    </member>
    <member name="M:EO.Web.TreeNode.EnsureVisible">
      <summary>
            Scrolls the TreeView so that this node is visible.
            </summary>
      <remarks>
            Calling this method on multiple <see cref="T:EO.Web.TreeNode"></see> objects is 
            allowed, however the <see cref="T:EO.Web.TreeView"></see> only remembers the last 
            called node and sets scroll to ensures that node is visible.
            </remarks>
    </member>
    <member name="M:EO.Web.TreeNode.ExpandAll">
      <summary>
            Expands this node and all child nodes.
            </summary>
    </member>
    <member name="M:EO.Web.TreeNode.ExpandPath">
      <summary>
            Expands all the parent nodes of this node.
            </summary>
    </member>
    <member name="T:EO.Web.TreeNodeGroup">
      <summary>
            Represents a group of <see cref="T:EO.Web.TreeNode"></see>s.
            </summary>
    </member>
    <member name="P:EO.Web.TreeNodeGroup.ParentNode">
      <summary>
            Gets the parent node of this TreeNodeGroup.
            </summary>
    </member>
    <member name="P:EO.Web.TreeNodeGroup.TemplateItem">
      <summary>
            Gets or sets an item that is used as a template to generate data bound items.
            </summary>
      <remarks>
        <p>
            During data binding, items are automatically created for each data record in the data source. 
            If <b>TemplateItem</b> is set, the newly created item will apply the same setting specified in TemplateItem. 
            </p>
        <p>
            Specify the common setting in <b>TemplateItem</b> to simplify the code. 
            </p>
        <tip>
            You can embed group inside a <b>TemplateItem</b>. The embedded group settings will apply to the newly created item's group.
            </tip>
        <p>
          <see href="Web/MenuCommon/DataBinding/binding_template.html">using item template</see> for details.</p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeNodeGroup.ShowCheckBox">
      <summary>
            Gets or sets a value indicating whether or not to display appropriate checkbox for nodes in this group when the node's <see cref="P:EO.Web.TreeNode.CheckState"></see> changes.
            </summary>
      <remarks>
        <p>
            Setting this property to <see cref="F:EO.Web.NullableBool.True"></see> causes 
            tree nodes in this group to display appropriate image specified in <see cref="P:EO.Web.TreeView.CheckBoxImages">TreeView.CheckBoxImages</see> property.
            If <see cref="P:EO.Web.TreeView.CheckBoxImages"></see> is not defined, default image for a Checkbox will be displayed. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeNodeGroup.IconCellWidth">
      <summary>
            Specifies the width reserved for a TreeNode's 
            <see cref="P:EO.Web.TreeNode.ImageUrl"></see> cell during runtime. 
            </summary>
      <value>
        <p>
          <see cref="T:System.Int32">System.Int32</see>
        </p>
            The width reserved for TreeNode's Icon cell during runtime. 
            </value>
      <remarks>
        <p>
            If a tree node has <see cref="P:EO.Web.TreeNode.ImageUrl"></see> property specified, 
            the image will be displayed in front of the main content; 
            if icon is not specified, main content will be displayed.
            </p>
        <p>
            If a group of TreeNodes have different <see cref="P:EO.Web.TreeNode.ImageUrl"></see>
            settings, for example, some has Icon, and some doesn't have, 
            the TreeNodes will be out of alignment.
            </p>
        <p>
            Specify this property to researve space for tree nodes
            without Icon specified so that they can be alighed with those
            has Icon Specified.
            </p>
        <p>
            By default, tree node group automatically adjusts icon cell
            width to make sure the text of nodes in a vertical group 
            are aligned. EO.Web controls determines the maximum width of 
            icon cell and apply it to all icon cells. This logic does 
            not apply to nodes that have no Icon. You need to use this property
            to reserve space for such nodes.
            </p>
        <tip>
            If you do not want to reserve space for nodes, 
            set this property to 0 to disable automatic icon alignment. 
            </tip>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeNodeGroup.AllowEdit">
      <summary>
            Gets or sets a value indicating whether user can edit the tree node text.
            </summary>
      <remarks>
            This property sets the default value for a <see cref="T:EO.Web.TreeNodeGroup"></see>.
            It overrides <see cref="P:EO.Web.TreeView.AllowEdit"></see> and can also be overriden
            by <see cref="P:EO.Web.TreeNode.AllowEdit"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNodeGroup.AllowDrag">
      <summary>
            Gets or sets a value indicating whether user can drag this node.
            </summary>
      <remarks>
            This property sets the default value for a <see cref="T:EO.Web.TreeNodeGroup"></see>.
            It overrides <see cref="P:EO.Web.TreeView.AllowDragDrop"></see> and can also be overriden
            by <see cref="P:EO.Web.TreeNode.AllowDrag"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNodeGroup.AllowDrop">
      <summary>
            Gets or sets a value indicating whether user can drop another node onto this node.
            </summary>
      <remarks>
            This property sets the default value for a <see cref="T:EO.Web.TreeNodeGroup"></see>.
            It overrides <see cref="P:EO.Web.TreeView.AllowDragDrop"></see> and can also be overriden
            by <see cref="P:EO.Web.TreeNode.AllowDrop"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNodeGroup.Nodes">
      <summary>
            Gets a collection of tree nodes in this group. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeNodeCollection">
          </see>
        </p>
        <p>A collection of tree nodes.</p>
        <p>This property is read only, however, you can access the properties and methods of the object it returns.</p>
      </value>
      <remarks>
            Use this property to access the child nodes displayed in this TreeNodeGroup. 
            <note>
            There are two ways to access the child nodes of a TreeNode:
            <list type="bullet"><item><see cref="P:EO.Web.TreeNode.ChildNodes">TreeNode.ChildNodes</see></item><item><see cref="P:EO.Web.TreeNodeGroup.Nodes">TreeNode.SubGroup.Nodes</see></item></list>
            Both properties access the same <see cref="T:EO.Web.TreeNodeCollection"></see>. 
            </note></remarks>
    </member>
    <member name="T:EO.Web.TreeNodeCollection">
      <summary>
            TreeNodeCollection class is a collection of <see cref="T:EO.Web.TreeNode"></see> objects. 
            </summary>
      <remarks>
        <p>
            The <b>TreeNodeCollection</b> class is used to store and manage a 
            collection of TreeNode objects. <see cref="T:EO.Web.TreeView"></see> object uses  
            it to store top level tree nodes in the <see cref="P:EO.Web.TreeView.Nodes"></see> property. 
            <see cref="T:EO.Web.TreeNodeGroup"></see> object uses it to store the child tree nodes in 
            <see cref="P:EO.Web.TreeNodeGroup.Nodes"></see> property.
            </p>
        <p>
            You can programmatically manage a TreeNodeCollection object by 
            adding and removing <b>TreeNode</b> objects. To add TreeNode to the 
            collection, use the <see cref="M:EO.Web.TreeNodeCollection.Add(EO.Web.TreeNode)"></see> method. To remove nodes 
            from the collection, use the 
            <see cref="M:EO.Web.TreeNodeCollection.Remove(EO.Web.TreeNode)"></see>, the 
            <see cref="M:EO.Web.NavigationItemCollection.RemoveAt(System.Int32)"></see>, or the 
            <see cref="M:EO.Web.NavigationItemCollection.Clear"></see> method.
            </p>
        <p>
          <b>Note:</b>
          <br>
          </br>
          <see cref="M:EO.Web.NavigationItemGroup.DataBind">
          </see> clears the group's TreeNodes collection.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.TreeNodeCollection.Add(EO.Web.TreeNode)">
      <summary>
            Adds a <see cref="T:EO.Web.TreeNode"></see> into the collection.
            </summary>
      <param name="node">The <see cref="T:EO.Web.TreeNode"></see> to be added into the collection.</param>
    </member>
    <member name="M:EO.Web.TreeNodeCollection.Add(System.String)">
      <summary>
            Adds a <see cref="T:EO.Web.TreeNode"></see> with specified HTML text into the collection.
            </summary>
      <param name="itemHtml">The HTML text of the newly added TreeNode.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EO.Web.TreeNodeCollection.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:EO.Web.TreeNode"></see> in the collection at specific index. 
            </summary>
      <remarks>
            Index is zero-based. 
            In C#, this property is the indexer of <see cref="T:EO.Web.TreeNodeCollection"></see> class. 
            </remarks>
    </member>
    <member name="M:EO.Web.TreeNodeCollection.Insert(System.Int32,EO.Web.TreeNode)">
      <summary>
            Inserts a <see cref="T:EO.Web.TreeNode"></see> into the <see cref="T:EO.Web.TreeNodeCollection"></see> at the specified position.
            </summary>
      <param name="index">The zero-based index at which the TreeNode should be inserted.</param>
      <param name="value">The <see cref="T:EO.Web.TreeNode"></see> to be inserted into the <see cref="T:EO.Web.TreeNodeCollection"></see>. </param>
    </member>
    <member name="M:EO.Web.TreeNodeCollection.Remove(EO.Web.TreeNode)">
      <summary>
            Removes the first occurrence of a  <see cref="T:EO.Web.TreeNode"></see> from the <see cref="T:EO.Web.TreeNodeCollection"></see>.
            </summary>
      <param name="value">The <see cref="T:EO.Web.TreeNode"></see> to be removed from the <see cref="T:EO.Web.TreeNodeCollection"></see>.</param>
    </member>
    <member name="M:EO.Web.TreeNodeCollection.Contains(EO.Web.TreeNode)">
      <summary>
            Determines whether the <see cref="T:EO.Web.TreeNodeCollection"></see> contains the specific <see cref="T:EO.Web.TreeNode"></see>.
            </summary>
      <param name="value">The <see cref="T:EO.Web.TreeNode"></see> to locate in the <see cref="T:EO.Web.TreeNodeCollection"></see> .</param>
      <returns>
        <b>true</b> if the <see cref="T:EO.Web.TreeNode"></see> is found in the <see cref="T:EO.Web.TreeNodeCollection"></see> ; otherwise, <b>false</b></returns>
    </member>
    <member name="M:EO.Web.TreeNodeCollection.IndexOf(EO.Web.TreeNode)">
      <summary>
            Determines the index of a specific <see cref="T:EO.Web.TreeNode"></see> in the <see cref="T:EO.Web.TreeNodeCollection"></see>.
            </summary>
      <param name="value">The <see cref="T:EO.Web.TreeNode"></see> to locate in the <see cref="T:EO.Web.TreeNodeCollection"></see>.</param>
      <returns>The index of value if found in the list; otherwise, -1.</returns>
    </member>
    <member name="T:EO.Web.TreeView">
      <summary>
            Represents hierarchical data in a tree structure.
            </summary>
    </member>
    <member name="M:EO.Web.TreeView.#ctor">
      <summary>
            Creates an instance of a TreeView.
            </summary>
    </member>
    <member name="P:EO.Web.TreeView.Nodes">
      <summary>
            Represents a collection of TreeNodes.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeNodeCollection">
          </see> class</p>
            A collection of TreeNodes. 
            <p> This property is read only. However, you can access the properties and methods of the 
            object it returns.</p></value>
      <remarks>
            This property is a collection of top level tree nodes. 
            You can also access the top level tree nodes via <see cref="P:EO.Web.TreeNodeGroup.Nodes">TreeView.TopGroup.Nodes</see>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.TopGroup">
      <summary>
            Gets the top level group. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeNodeGroup">
          </see>
        </p>
            The top level group object. 
            <p> This property is read only. However, you can set the properties 
            of the <see cref="T:EO.Web.TreeNodeGroup"></see> object it returns.</p></value>
      <remarks>
            Use <b>TopGroup</b> to control the appearance, behavior and content of 
            the top level tree nodes.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.LookNodes">
      <summary>
            Returns a collection of "Look" nodes. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeLookNodeCollection">
          </see>
        </p>
            A collection of "Look" which defines tree nodes' appearance settings. "Look" is also a
            <b>TreeNode</b> object. 
            <p> This property is read only. However, you can access the properties and methods of the 
            object it returns.</p></value>
      <remarks>
        <p>
            TreeView maintains a collection of "Looks" which can be applied to each tree node. 
            You can change a specific "Look" to control the common appearance of the tree nodes
            that use this "Look". Each "Look" in the collection is also a <b>TreeNode</b> object. 
            Apply "Look" to a tree node by using the <b>TreeNode</b>'s <see cref="P:EO.Web.NavigationItem.LookID"></see> property.
            </p>
            See <a href="Web/MenuCommon/LookSkinAndTheme/looks.html">Navigation Item Look</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.AutoScroll">
      <summary>
            Specifies whether to apply scroll bars if a TreeView's content
            grows larger than the TreeView frame's dimension. Applying 
            scroll bar will keep the TreeView dimension fixed.  
            </summary>
      <remarks>
        <p>
            By default, the value is true. 
            </p>
            Scroll bar appears automatically if a TreeView's content
            grows larger than the TreeView frame's dimension. If this value is false, 
            TreeView frame's actual dimension will adjust if the content grows lager than the specified dimension.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.AllowDragReordering">
      <summary>
            Specifies whether user can use drag and drop to reordering nodes.
            </summary>
      <remarks>
            When this property is set to <b>true</b>, user will be able to drop a node in between
            nodes to reorder nodes.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.AllowMultiSelect">
      <summary>
            Specifies whether multiple nodes can be selected.
            </summary>
      <remarks>
        <p>
            Set this property to <b>true</b> to allow multiple nodes to be selected, the default
            value is <b>false</b>, in which case only one node can be selected at any given time.
            </p>
        <p>
            User must hold down Ctrl key in order to select more than one nodes. All the selected
            nodes must belong to the same parent node.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeView.AutoCheckParent">
      <summary>
            Specifies if change a TreeNode's <see cref="P:EO.Web.TreeNode.CheckState"></see> automatically changes its parent node's CheckState.
            </summary>
      <remarks>
        <p>
            By default, this property is false - means changing a tree node's <see cref="P:EO.Web.TreeNode.CheckState"></see>
            has no effect on the <see cref="P:EO.Web.TreeNode.CheckState"></see> of its parent node.
            </p>
        <p>
            By setting this property to true, changing a tree node's <see cref="P:EO.Web.TreeNode.CheckState"></see> causes
            TreeView to change parent node's <see cref="P:EO.Web.TreeNode.CheckState"></see> according to the following rule:
            <list type="table"><listheader><term>Parent node's <see cref="P:EO.Web.TreeNode.CheckState"></see> is...</term><description>When...</description></listheader><item><term><see cref="F:EO.Web.CheckState.Checked"></see></term><description>All child nodes' <see cref="P:EO.Web.TreeNode.CheckState"></see> is <b>Checked</b>.</description></item><item><term><see cref="F:EO.Web.CheckState.Unchecked"></see></term><description>All child nodes' <see cref="P:EO.Web.TreeNode.CheckState"></see> is <b>Unchecked</b>.</description></item><item><term><see cref="F:EO.Web.CheckState.Indeterminate"></see></term><description>Child nodes have different states</description></item></list></p>
        <seealso cref="P:EO.Web.TreeView.AutoCheckChildren" />
        <seealso cref="P:EO.Web.TreeView.AutoUncheckChildren" />
      </remarks>
    </member>
    <member name="P:EO.Web.TreeView.AutoCheckChildren">
      <summary>
            Specifies if changing a TreeNode's <see cref="P:EO.Web.TreeNode.CheckState"></see> property to <see cref="F:EO.Web.CheckState.Checked"></see> automatically changes all of its child nodes' CheckState property to <b>Checked</b>.
            </summary>
      <remarks>
        <p>
            By default, this property is <b>false</b> - means changing a TreeNode's 
            <see cref="P:EO.Web.TreeNode.CheckState"></see>
            to <see cref="F:EO.Web.CheckState.Checked"></see> does NOT have
            any effects on its child nodes. 
            </p>
        <p>
            By setting this property to <b>true</b>, if a TreeNode's <see cref="P:EO.Web.TreeNode.CheckState"></see> 
            is changed to <see cref="F:EO.Web.CheckState.Checked"></see>, 
            all of its child node's <see cref="P:EO.Web.TreeNode.CheckState"></see> will be changed to <see cref="F:EO.Web.CheckState.Checked"></see>.
            </p>
        <seealso cref="P:EO.Web.TreeView.AutoCheckParent" />
        <seealso cref="P:EO.Web.TreeView.AutoUncheckChildren" />
      </remarks>
    </member>
    <member name="P:EO.Web.TreeView.AutoUncheckChildren">
      <summary>
            Specifies if changing a TreeNode's <see cref="P:EO.Web.TreeNode.CheckState"></see> property to <see cref="F:EO.Web.CheckState.Unchecked"></see> automatically changes all of its child nodes' CheckState property to <b>Unchecked</b>.
            </summary>
      <remarks>
        <p>
            By default, this property is <b>false</b> - means changing a TreeNode's 
            <see cref="P:EO.Web.TreeNode.CheckState"></see>
            to <see cref="F:EO.Web.CheckState.Unchecked"></see> does NOT have
            any effects on its child nodes. 
            </p>
        <p>
            By setting this property to <b>true</b>, if a TreeNode's <see cref="P:EO.Web.TreeNode.CheckState"></see> 
            is changed to <see cref="F:EO.Web.CheckState.Unchecked"></see>, 
            all of its child node's <see cref="P:EO.Web.TreeNode.CheckState"></see> will be changed to <see cref="F:EO.Web.CheckState.Unchecked"></see>.
            </p>
        <seealso cref="P:EO.Web.TreeView.AutoCheckParent" />
        <seealso cref="P:EO.Web.TreeView.AutoCheckChildren" />
      </remarks>
    </member>
    <member name="P:EO.Web.TreeView.AutoCollapseOnClick">
      <summary>
            Specifies whether clicking an expanded TreeNode should automatically collapse the node or not.
            </summary>
    </member>
    <member name="P:EO.Web.TreeView.AutoExpandOnClick">
      <summary>
            Specifies whether clicking an collapsed TreeNode should automatically expand the node or not.
            </summary>
    </member>
    <member name="P:EO.Web.TreeView.LoadingLookID">
      <summary>
            When a TreeNode's <see cref="P:EO.Web.TreeNode.PopulateOnDemand"></see> is set to true, 
            use this property to control the appearance 
            when the TreeNode is being loaded. 
            </summary>
      <remarks>
        <p>
            When a TreeNode's <see cref="P:EO.Web.TreeNode.PopulateOnDemand"></see> is set to true, 
            the tree node will contact the server to populate its sub nodes. During 
            this loading period, the TreeNode will display a temporary child node which
            will use the appearance specified by this property.
            </p>
        <p>
            You will need to create a tree node look, then set this property to the tree node look's ID.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeView.AutoWrap">
      <summary>
            Gets or sets a value indicating whether tree node should occupy full-width and automatically wrap tree node text if necessary.
            </summary>
      <remarks>
            Consider setting <see cref="P:EO.Web.TreeView.LineImages"></see>'s <see cref="P:EO.Web.TreeViewLineImages.Visible"></see> 
            to false or <see cref="P:EO.Web.TreeViewLineImages.PlusMinusOnly"></see> to true if
            this property is set to true. Because TreeView line images are 
            created with image files, the lines does not automatically stretch
            and would subsequently creates gaps when a tree node's height 
            increases due to automatically wrapping
            text to multiple lines.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.Margin">
      <summary>
            Gets a <see cref="T:EO.Web.TreeViewMargin"></see> object that controls image to
            be displayed on the left margin of a <see cref="T:EO.Web.TreeView"></see>.
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeViewMargin">
          </see>
        </p>
            An object that controls the image to be displayed on a TreeView's left margin.
            <p> This property is read only. However, you can access the properties and methods of the 
            object it returns.</p></value>
      <remarks>
            Image specified in this property will be displayed in the space between the left most border
            of the TreeView and top level nodes.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.TextBoxStyle">
      <summary>
            Gets or sets style properties of the text box used to edit a tree node.
            </summary>
    </member>
    <member name="P:EO.Web.TreeView.LineImages">
      <summary>
            Gets a <see cref="T:EO.Web.TreeViewLineImages"></see> object that controls images to
            be displayed on all level tree nodes' indent space. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeViewLineImages">
          </see>
        </p>
            An object that controls images to be displayed on all level tree nodes' indent space.
            <p> This property is read only. However, you can access the properties and methods of the 
            object it returns.</p></value>
      <remarks>
            You can specifies images to be displayed on indent space for TreeNodes in different locations.
            For example, different images might be used for tree nodes that are on the top, middle or bottom of the group.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.CheckBoxImages">
      <summary>
            Gets a <see cref="T:EO.Web.TreeViewCheckBoxImages"></see> object that controls images to
            be displayed to indicate the <see cref="P:EO.Web.TreeNode.CheckState"></see> of a tree node. 
            </summary>
      <value>
        <p>
          <see cref="T:EO.Web.TreeViewCheckBoxImages">
          </see>
        </p>
            An object that controls images to be displayed to indicate the <see cref="P:EO.Web.TreeNode.CheckState"></see> of a tree node. 
            <p> This property is read only. However, you can access the properties and methods of the 
            object it returns.</p></value>
      <remarks>
            Each item has three <see cref="P:EO.Web.TreeNode.CheckState"></see>s. Use this property
            to specify images to be displayed to indicate different <b>CheckStates</b>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.NodeImageUrl">
      <summary>
            Shortcut to Default look's ImageUrl property.
            </summary>
    </member>
    <member name="P:EO.Web.TreeView.ExpandedNodeImageUrl">
      <summary>
            Shortcut to Default look's <see cref="P:EO.Web.TreeNode.ExpandedImageUrl"></see> property.
            </summary>
    </member>
    <member name="P:EO.Web.TreeView.CollapsedNodeImageUrl">
      <summary>
            Shortcut to Default look's <see cref="P:EO.Web.TreeNode.CollapsedImageUrl"></see> property.
            </summary>
    </member>
    <member name="P:EO.Web.TreeView.AllowEdit">
      <summary>
            Gets or sets a value indicating whether user can edit the tree node text.
            </summary>
      <remarks>
        <p>
            This property sets the default value of whether user can edit the tree node text.
            <see cref="P:EO.Web.TreeNodeGroup.AllowEdit">TreeNodeGroup.AllowEdit</see> and
            <see cref="P:EO.Web.TreeNode.AllowEdit">TreeNode.Edit</see> can be used to override
            this value.
            </p>
        <p>
            When edit is enabled, user can slowly click a tree node twice to edit
            the tree node text. The edit triggers <see cref="E:EO.Web.TreeView.ItemRenamed"></see> event
            on the server side.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeView.AllowDragDrop">
      <summary>
            Gets or sets a value indicating whether user can use drag and drop to move a node.
            </summary>
      <remarks>
        <p>
            This property sets the default value of whether user can use drag 
            and drop to move a node. The behavior can be overriden by
            <see cref="P:EO.Web.TreeNodeGroup.AllowDrag">TreeNodeGroup.AllowDrag</see>,
            <see cref="P:EO.Web.TreeNodeGroup.AllowDrop">TreeNodeGroup.AllowDrop</see>,
            <see cref="P:EO.Web.TreeNode.AllowDrag">TreeNode.AllowDrag</see> and
            <see cref="P:EO.Web.TreeNode.AllowDrop">TreeNode.AllowDrop</see>
            on the <see cref="T:EO.Web.TreeNodeGroup"></see> level or 
            <see cref="T:EO.Web.TreeNode"></see> level respectively.
            </p>
        <p>
            When the page posts back, server side event <see cref="E:EO.Web.TreeView.ItemMoved"></see> 
            is triggered for a client side drag and drop operation. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeView.DragDropScope">
      <summary>
            Gets or sets the drag drop scope.
            </summary>
      <remarks>
            Set this property to <see cref="F:EO.Web.DragDropScope.Global"></see>
            to enable drag and drop between the <see cref="T:EO.Web.TreeView"></see>
            and other controls. You must create a drag target object with
            JavaScript to handle the drag drop event on the target element.
            See Live Demo -&gt; TreeView -&gt; Programming -&gt; Drag Drop to Grid
            for more details on how to implement a drag target object.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.SingleExpandMode">
      <summary>
            Specifies the single expand mode.
            </summary>
      <remarks>
            Setting this property to <see cref="F:EO.Web.TreeViewSingleExpandMode.TopLevelOnly"></see> indicating
            that only one top level item should be expanded. Setting it to
            <see cref="F:EO.Web.TreeViewSingleExpandMode.AllLevels"></see> indicating that only one
            item should be expanded at all levels.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.ClientSideOnDragBegin">
      <summary>
            Gets or sets the name of the client side function to be called when user starts to drag a node.
            </summary>
      <remarks>
            Return <b>false</b> from this handler to cancel the drag and drop operation.
            See <a href="JSDoc.Public.Web.Handlers.treeview_dragdrop_handler.html">treeview_dragdrop_handler</a>
            for more information.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.ClientSideOnDragOver">
      <summary>
            Gets or sets the name of the client side function to be called when user drags
            a node over another node.
            </summary>
      <remarks>
            Return <b>false</b> from this handler to indicate that the node below
            the dragging node can not be a drop target.
            See <a href="JSDoc.Public.Web.Handlers.treeview_dragdrop_handler.html">treeview_dragdrop_handler</a>
            for more information.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.ClientSideOnDragDrop">
      <summary>
            Gets or sets the name of the client side function to be called when user drops
            a node on another node.
            </summary>
      <remarks>
            Return <b>false</b> from this handler to cancel the drag and drop operation.
            See <a href="JSDoc.Public.Web.Handlers.treeview_dragdrop_handler.html">treeview_dragdrop_handler</a>
            for more information.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.ClientSideOnNodeRenaming">
      <summary>
            Gets or sets the name of the client side function to be called when
            user is about to edit the tree node text.
            </summary>
      <remarks>
            Return <b>false</b> from this handler to cancel the edit.
            See <a href="JSDoc.Public.Web.Handlers.treeview_rename_handler.html">treeview_rename_handler</a>
            for more information.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.ClientSideOnNodeRename">
      <summary>
            Gets or sets the name of the client side function to be called after
            user has edited the tree node text.
            </summary>
      <remarks>
            Return <b>false</b> from this handler to cancel the edit.
            See <a href="JSDoc.Public.Web.Handlers.treeview_rename_handler.html">treeview_rename_handler</a>
            for more information.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.ClientSideOnContextMenu">
      <summary>
            Gets or sets the name of the client side function to be called to display a context menu when a node is right-clicked.
            </summary>
      <remarks>
            Use this client side event handler to display a context menu when user right click on a node.
            See <a href="JSDoc.Public.Web.Handlers.contextmenu_handler.html">treeview_contextmenu_handler</a>
            for more information.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.ClientSideOnCheckStateChanging">
      <summary>
            Gets or sets the name of the client side function to be called when a node's check state is about to change.
            </summary>
      <remarks>
            Use this client side event handler to be notified when a <see cref="T:EO.Web.TreeNode"></see>'s check state
            is about to change. 
            See <a href="JSDoc.Public.Web.Handlers.treeview_checkstatechanging_handler.html">treeview_checkstatechanging_handler</a>
            for more information.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.ClientSideAfterPopulate">
      <summary>
            Gets or sets the name of the client side function to be called after populating on demand.
            </summary>
      <remarks>
            Use this function to perform actions after a node has finished populating on demand.
            See <a href="JSDoc.Public.Web.Handlers.treeview_afterpopulate_handler.html">treeview_afterpopulate_handler</a>
            for more information.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeView.Indent">
      <summary>
            Specifies a tree node's indent (in pixel) to its parent level nodes.
            </summary>
      <remarks>
        <p>
            If <see cref="P:EO.Web.TreeView.LineImages"></see> is defined and 
            <see cref="P:EO.Web.TreeViewLineImages.PlusMinusOnly"></see> is false,
            then <see cref="P:EO.Web.TreeViewLineImages.ImageWidth"></see> overrides
            this property.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeView.Height">
      <summary>
            Specifies the height of the TreeView.
            </summary>
    </member>
    <member name="E:EO.Web.TreeView.ItemPopulate">
      <summary>
            Occurs when a tree node is to be populated.
            </summary>
    </member>
    <member name="E:EO.Web.TreeView.ItemRenamed">
      <summary>
            Occurs when user has edited the tree node text.
            </summary>
    </member>
    <member name="E:EO.Web.TreeView.ItemMoved">
      <summary>
            Occurs when user has moved a tree node.
            </summary>
    </member>
    <member name="E:EO.Web.TreeView.ItemCheckStateChanged">
      <summary>
            Occurs when a tree node's check state has changed.
            </summary>
    </member>
    <member name="P:EO.Web.TreeView.SelectedNode">
      <summary>
            Returns the current selected node.
            </summary>
    </member>
    <member name="P:EO.Web.TreeView.SelectedNodes">
      <summary>
            Returns all selected nodes.
            </summary>
    </member>
    <member name="P:EO.Web.TreeView.ContextNode">
      <summary>
            Returns a <see cref="T:EO.Web.TreeNode"></see> object that has
            displayed a context menu and subsequently the context menu
            triggered a server event.
            </summary>
      <remarks>
            When you use <see cref="P:EO.Web.TreeView.ClientSideOnContextMenu"></see> to
            display a context menu for a tree node and the context menu's
            <see cref="P:EO.Web.BaseNavigator.RaisesServerEvent"></see> is set to
            <b>true</b>, it is often desired to know which tree node was
            the node that the context menu acted upon when you handle
            the context menu's <see cref="E:EO.Web.BaseNavigator.ItemClick"></see> 
            event on the server side. Use this property to get that
            tree node.
            </remarks>
    </member>
    <member name="M:EO.Web.TreeView.LoadTreeView(System.String)">
      <summary>
            Loads a TreeView from the specified location.
            </summary>
      <param name="virtualPath">
            The virtual path of the TreeView file. You can use '~' to represent the Web application root. For example,
            you can use "~/treeview1.EOWeb.ascx" to load "treeview1.EOWeb.ascx" in the Web application root directory. 
            </param>
      <returns>
            Returns the loaded TreeView.
            </returns>
      <remarks>
        <p>
            Uses this static method to load a TreeView from a file that is previously saved. 
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.TreeView.LoadTreeViewSkin(System.String,System.String)">
      <summary>
            Loads a TreeView skin from the specified location.
            </summary>
      <param name="virtualPath">
            The virtual path of the external skin file. You can use '~' to represent the Web application root. For example,
            you can use "~/skin/treeview1.EOWeb.ascx" to load "treeview1.EOWeb.ascx" in the skin directory. 
            </param>
      <param name="customSkinId">
            The ID of the custom skin. You can set this ID to other TreeViews to apply this Skin to the TreeViews.
            </param>
      <remarks>
        <p>		
            This function must be called first to load a saved skin from disk into memory. 
            As the function only needs to be called once, you can place it in <b>Application_Start</b> event handler.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.TreeView.GetCheckedNodes">
      <summary>
            Returns all checked nodes in the TreeView control.
            </summary>
      <remarks>
            Nodes returned by this function includes nodes that have
            a CheckState value of Indeterminate as well.
            </remarks>
    </member>
    <member name="M:EO.Web.TreeView.GetCheckedNodes(EO.Web.TreeNode)">
      <summary>
            Returns all checked nodes in the TreeView under one root node.
            </summary>
      <param name="root">
            The root of the branch to start with.
            </param>
      <remarks>
            Nodes returned by this function includes nodes that have
            a CheckState value of Indeterminate as well.
            </remarks>
    </member>
    <member name="M:EO.Web.TreeView.ExpandAll">
      <summary>
            Expands every node in the tree.
            </summary>
    </member>
    <member name="T:EO.Web.TreeNodeRenamedEventHandler">
      <summary>
            Represents the method that will handle any events that are raised 
            after a user has edited the text of a tree node.
            </summary>
    </member>
    <member name="T:EO.Web.TreeNodeMovedEventHandler">
      <summary>
            Represents the method that will handle any events that are raised 
            after a user has moved a tree node.
            </summary>
    </member>
    <member name="T:EO.Web.TreeNodeRenameEventArgs">
      <summary>
            Provides data for any events that occur when a user has edited the text of a tree node.
            </summary>
    </member>
    <member name="M:EO.Web.TreeNodeRenameEventArgs.#ctor(EO.Web.TreeNode,System.String)">
      <summary>
            Initialize a new <see cref="T:EO.Web.TreeNodeRenameEventArgs"></see> object.
            </summary>
      <param name="node">The node whose text has been changed.</param>
      <param name="oldText">The original text before the change.</param>
    </member>
    <member name="P:EO.Web.TreeNodeRenameEventArgs.Node">
      <summary>
            Gets the node whose text has been changed.
            </summary>
    </member>
    <member name="P:EO.Web.TreeNodeRenameEventArgs.OldText">
      <summary>
            Gets the original text before the change.
            </summary>
    </member>
    <member name="T:EO.Web.TreeNodeMovedEventArgs">
      <summary>
            Provides data for any events that occur when a user has moved a node.
            </summary>
    </member>
    <member name="M:EO.Web.TreeNodeMovedEventArgs.#ctor(EO.Web.TreeNode,EO.Web.TreeNode,EO.Web.TreeNode,EO.Web.TreeNode)">
      <summary>
            Initialize a new <see cref="T:EO.Web.TreeNodeMovedEventArgs"></see> object.
            </summary>
      <param name="node">The node that has been moved.</param>
      <param name="oldParent">The original parent node of the moved node.</param>
      <param name="previousNode">The previous node after the node was moved.</param>
      <param name="nextNode">The next node after the node was moved.</param>
      <remarks>
            See <see cref="P:EO.Web.TreeNodeMovedEventArgs.PreviousNode"></see> for more details about
            <i>previousNode</i> and <i>nextNode</i>.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeNodeMovedEventArgs.Node">
      <summary>
            Gets the node that has been moved.
            </summary>
    </member>
    <member name="P:EO.Web.TreeNodeMovedEventArgs.OldParent">
      <summary>
            Gets the original parent node of the moved node.
            </summary>
    </member>
    <member name="P:EO.Web.TreeNodeMovedEventArgs.PreviousNode">
      <summary>
            Gets the previous sibling node at the moment after the node was moved.
            </summary>
      <remarks>
        <p>
            Because <see cref="E:EO.Web.TreeView.ItemMoved"></see> event is fired after all changes
            have already been applied, the TreeView is in the most current
            state when the event handler is called. the previous (sibling) 
            node in the current TreeView may not be the same as the previous 
            (sibling) node at the moment after the node was moved. Use this property
            to get the previous node at the moment after the node was moved.
            </p>
        <p>
            For example, if user moves node A to between B 
            and C, then move it again to between D and F, then <see cref="E:EO.Web.TreeView.ItemMoved"></see> 
            event will be fired twice. When the event is fired for the first time, 
            <b>PreviousNode</b> is B, <b>NextNode</b> is C; when the event is 
            fired for the second time, <b>PreviousNode</b> is D, <b>NextNode 
            is F</b>. During both events, the previous sibling node in the 
            current TreeView is D.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeNodeMovedEventArgs.NextNode">
      <summary>
            Gets the next node at the moment after the node was moved.
            </summary>
      <remarks>
            See <see cref="P:EO.Web.TreeNodeMovedEventArgs.PreviousNode"></see> for more details about this property.
            </remarks>
    </member>
    <member name="T:EO.Web.TreeNodeCheckStateChangedEventArgs">
      <summary>
            Provides data for <see cref="E:EO.Web.TreeView.ItemCheckStateChanged"></see> event.
            </summary>
    </member>
    <member name="M:EO.Web.TreeNodeCheckStateChangedEventArgs.#ctor(EO.Web.TreeNode,EO.Web.CheckState)">
      <summary>
            Creates a new instance of <see cref="T:EO.Web.TreeNodeCheckStateChangedEventArgs"></see>.
            </summary>
      <param name="node">The <see cref="T:EO.Web.TreeNode"></see> object whose check state has been changed.</param>
      <param name="oldCheckState">The state before the change.</param>
    </member>
    <member name="P:EO.Web.TreeNodeCheckStateChangedEventArgs.Node">
      <summary>
            The <see cref="T:EO.Web.TreeNode"></see> object whose check state has been changed.
            </summary>
    </member>
    <member name="P:EO.Web.TreeNodeCheckStateChangedEventArgs.OldCheckState">
      <summary>
            The state before the change.
            </summary>
    </member>
    <member name="T:EO.Web.TreeNodeCheckStateChangedEventHandler">
      <summary>
            Represents the method that will handle any events that are raised 
            after a user has edited the text of a tree node.
            </summary>
    </member>
    <member name="T:EO.Web.TreeViewSingleExpandMode">
      <summary>
            Specifies the single expand mode for a <see cref="T:EO.Web.TreeView"></see>.
            </summary>
    </member>
    <member name="F:EO.Web.TreeViewSingleExpandMode.NotSet">
      <summary>
            The single expand mode is not set. 
            </summary>
    </member>
    <member name="F:EO.Web.TreeViewSingleExpandMode.TopLevelOnly">
      <summary>
            Only one top level item should be expanded at any given time.
            </summary>
    </member>
    <member name="F:EO.Web.TreeViewSingleExpandMode.AllLevels">
      <summary>
            Only one item should be expanded at any given level.
            </summary>
    </member>
    <member name="T:EO.Web.DragDropScope">
      <summary>
            Specifies the drag drop scope.
            </summary>
    </member>
    <member name="F:EO.Web.DragDropScope.Local">
      <summary>
            Drag drop occurs within the control.
            </summary>
    </member>
    <member name="F:EO.Web.DragDropScope.Global">
      <summary>
            Drag drop occurs between a drag source and a drag target,
            which can be the same control or two different controls.
            </summary>
    </member>
    <member name="T:EO.Web.TreeViewLineImages">
      <summary>
            Represents all images to display to render line structure 
            for TreeView. 
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewLineImages.Visible">
      <summary>
            Gets or sets a value indicating if a TreeView's line structure is visible.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewLineImages.PlusMinusOnly">
      <summary>
            Gets or sets a value indicating if a TreeView's line structure 
            has plus and minus image only.
            </summary>
      <remarks>
        <p>
            By default, the value is false - means you can specify image for 
            indent lines.
            </p>
        <p>
            If this property is set to <b>true</b>, only the plus and minus sign
            which display on the left of a TreeNode's content will be displayed.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeViewLineImages.ImageWidth">
      <summary>
            Specifies the width (in pixel) of images that forms the TreeView line structure.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewLineImages.ImageHeight">
      <summary>
            Specifies the height (in pixel) of images that forms the TreeView line structure.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewLineImages.ImageUrls">
      <summary>
            Specifies a list of URLs that forms the TreeView's line structure.
            </summary>
      <remarks>
            This property is for internal used only. You should use TreeView builder
            to specify individual image URLs to form the line structure. 
            </remarks>
    </member>
    <member name="P:EO.Web.TreeViewLineImages.ImageFolder">
      <summary>
            Specifies a folder containing all images that form line structure with pre-defined file names.
            </summary>
      <remarks>
        <p>
            Use this folder to specify the location that contains all line images with pre-defined 
            file names. 
            </p>
      </remarks>
    </member>
    <member name="T:EO.Web.TreeViewMargin">
      <summary>
            Represents a class that controls the left margin of a <see cref="T:EO.Web.TreeView"></see>.
            </summary>
      <remarks>
        <p>
            Margin is the resion between a TreeView's left most border and top level nodes.
            </p>
        <p>
            Use <see cref="P:EO.Web.TreeViewMargin.Width"></see> property to specify the width of the margin.
            </p>
        <p>
            Use <see cref="P:EO.Web.TreeViewMargin.BackgroundImageUrl"></see> property to specify the 
            background to display in margin. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeViewMargin.Visible">
      <summary>
            Specifies if margin region should be displayed in a TreeView. 
            </summary>
      <remarks>
            Setting this property to false causes a TreeView to display
            no Margin, its top level nodes display from the left most border. 
            Properties specified for Margin are ignored.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeViewMargin.Width">
      <summary>
            Specifies the width (in pixel" of the image used to display on 
            the margin of the TreeView.
            </summary>
      <remarks>
            Once specified, the Width of the margin does not change even if 
            the image specified in <see cref="P:EO.Web.TreeViewMargin.BackgroundImageUrl"></see> 
            has a larger size.
            </remarks>
    </member>
    <member name="P:EO.Web.TreeViewMargin.BackgroundImageUrl">
      <summary>
            Specifies the URL of the image to display on margin area of a TreeView.
            </summary>
      <remarks>
        <p>
            A TreeNode will display an image specified in <see cref="P:EO.Web.TreeNode.MarginImageUrl"></see> 
            property on a TreeView's margin area. TreeView automatically displays
            the image whenever the TreeNode is visible.
            </p>
        <p>
            Using this property to specify background on which the TreeNode's margin image will be 
            displayed.
            </p>
        <note>
            If the image specified by this property has larger width than <see cref="P:EO.Web.TreeViewMargin.Width"></see>
            property, the image will extend to the background of the TreeView.
            Therefore, you should ensure the width of this image is the same as margin's width.
            </note>
      </remarks>
    </member>
    <member name="P:EO.Web.TreeViewMargin.ImageHeight">
      <summary>
            Specifies the height (in pixel) of the image to be displayed as background of the margin.
            </summary>
    </member>
    <member name="P:EO.Web.TreeViewMargin.ImageWidth">
      <summary>
            Specifies the width (in pixel) of the image to be displayed as background of the margin.
            </summary>
    </member>
    <member name="T:EO.Web.AJAXUploader">
      <summary>
            EO.Web AJAXUploader is a file-upload component
            providing a highly customizable interface to
            upload files asynchrously to the web server. 
            </summary>
      <remarks>
            AJAXUploader allows you to customize uploading textbox and button style, 
            provides a progress bar to monitor the uploading process and optimize
            server side memory usage that offers a clear advantage when uploading 
            large files.
            </remarks>
    </member>
    <member name="M:EO.Web.AJAXUploader.#ctor">
      <summary>
            Creates an instance of AJAXUploader.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.Rows">
      <summary>
            Gets or sets the number of file input elements to be displayed in the AJAXUploader.
            </summary>
      <remarks>
            Gets or sets the number of file input elements to be displayed in the AJAXUploader.
            Each file input element allows end user to upload one file. You can specify how many
            files an end user can upload by setting this property.
            The default value is 1, end user can upload one file to the server a time. 
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.SavePostedFileList">
      <summary>
            Gets or sets whether the AJAXUploader automatically keeps a 
            list of all uploaded files.
            </summary>
      <remarks>
            The default value is true.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.TempFileLocation">
      <summary>
            Gets or sets the folder that the uploader saves temporary files on web server.
            </summary>
      <remarks>
        <p>
            Unlike the standard ASP.NET HtmlInputFile control, EO.Web AJAXUploader
            does not read the entire uploaded file into memory. It streams the data
            into a temporary file on the server as the data is received. For this
            reason, TempFileLocation must be set for an AJAXUploader to function.
            </p>
        <p>
            It is important that the ASP.NET worker process must have read/write 
            permission to this folder. 
            </p>
        <p>
          <b>Note</b>: Several temporary files are created for each uploaded
            file. One of them is the actual uploaded file (whose file name is
            available through <see cref="P:EO.Web.AJAXPostedFile.TempFileName">AJAXPostedFiles.TempFileName</see>
            property), the rest are status files created during upload process.
            </p>
        <p>
            EO AJAXUploader runs a sweeper on the background to automatically
            clean up these files. So it is not necessary for you to delete them.
            Typically you would move the uploaded file to a different location
            and rename the file while moving it. If you do not move the file
            away, it will be automatically deleted along with other temporary
            files sometime later. Note these files are not deleted immediately,
            instead the sweeper checks whether the files have been recently
            created or accessed, if they have, they will be skipped until they
            are "old" enough to be deleted.
            </p>
        <p>
            You can also set <see cref="P:EO.Web.AJAXUploader.FinalFileLocation"></see>. When 
            <b>FinalFileLocation</b> is set, the uploader automatically
            moves uploaded files from <b>TempFileLocation</b> to
            <b>FinalFileLocation</b> once the uploading process is done.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.FinalFileLocation">
      <summary>
            Gets or sets the folder that the uploader saves uploaded files on web server.
            </summary>
      <remarks>
            While you must set <see cref="P:EO.Web.AJAXUploader.TempFileLocation"></see>, setting
            this property is optional. If you set this property, the uploader
            will automatically move files from <b>TempFileLocation</b> to
            this folder once the uploading process is complete. In that case, 
            <see cref="E:EO.Web.AJAXUploader.FileUploaded"></see> event is raised after the files
            have already been moved.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.FinalFileList">
      <summary>
            Gets or sets the ID of the associated AJAXPostedFileList control.
            </summary>
      <remarks>
            The AJAXUploader allows user to upload multiple files
            and automatically maintain the temporary file list. 
            Consider the following sequence:
            <list type="number"><item>User uploads file A. The uploader finishes uploading,
            	then refresh its temporary file list to include A;</item><item>User uploads file B. The uploader finishes uploading,
            	then refresh its temporary file list to include both A and B;</item><item>User submits the page, the uploader moves all the files
            	to <see cref="P:EO.Web.AJAXUploader.FinalFileLocation"></see> and also trigger
            	<see cref="E:EO.Web.AJAXUploader.FileUploaded"></see> event to indicate that all
            	files are now submitted;
            	</item><item>
            	Since all files are now moved to <see cref="P:EO.Web.AJAXUploader.FinalFileLocation"></see>, 
            	the temporary file list now becomes empty. 
            	</item></list><p>
            Sometimes it is desired to keep the final file list, instead
            of temporary file list. In the previous sample, file A and file
            B are moved from temporary file list to the final file list
            when the page is submitted. A separate <see cref="T:EO.Web.AJAXPostedFileList"></see>
            can be used to maintain the final file list. In order to use
            this feature, place an <see cref="T:EO.Web.AJAXPostedFileList"></see>
            in the form, then set the uploader's <see cref="P:EO.Web.AJAXUploader.FinalFileList"></see>
            to the ID of the <see cref="T:EO.Web.AJAXPostedFileList"></see> control.
            You can then use the <see cref="T:EO.Web.AJAXPostedFileList"></see> control's
            <see cref="P:EO.Web.AJAXPostedFileList.Items"></see> to access all submitted files.
            </p><p>
            This feature can only be used when <see cref="P:EO.Web.AJAXUploader.FinalFileLocation"></see>
            is set.
            </p></remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.MaxDataSize">
      <summary>
            Specifies the limit for the size of uploaded file, in kilobytes. 
            This limit can be used to prevent denial of service attacks that 
            are caused, for example, by users uploading large files to the server. 
            </summary>
      <remarks>
            The default value is 0, which means no limit is set. However,
            It is recommend to set this value to prevent denial of service attaches
            caused by user uploading large files.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.ClientSideOnProgress">
      <summary>
            Gets or sets the name of the JavaScript function that is called by AJAXUploader
            periodically during the uploading process.
            </summary>
      <remarks>
        <p>
            If set, AJAXUploader calls this function periodically while
            uploading file. You can query the status of the uploader using
            the uploader's client side Javascript interface 
            and to perform custom actions based on the status.
            </p>
        <p>
            See <see href="JSDoc.Public.Web.Handlers.uploader_progress_handler.html">uploader_progress_handler</see>
            for details about this event.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.ClientSideOnStart">
      <summary>
            Gets or sets the name of the JavaScript function that is called by AJAXUploader when the upload starts.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.ClientSideOnCancel">
      <summary>
            Gets or sets the name of the JavaScript function that is called by AJAXUploader when the uploader has been canceled or failed.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.ClientSideOnDone">
      <summary>
            Gets or sets the name of the JavaScript function that is called by AJAXUploader when the upload finishes.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.ClientSideOnFileSelected">
      <summary>
            Gets or sets the name of the JavaScript function that is called when user selects a file.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.uploader_fileselected_handler.html">uploader_fileselected_handler</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.ClientSideOnChange">
      <summary>
            Gets or sets the name of the JavaScript function that is called by AJAXUploader 
            when the uploaded file list changes.
            </summary>
      <remarks>
        <para>
            This event should not be confused with <see cref="P:EO.Web.AJAXUploader.ClientSideOnFileSelected" />.
            <see cref="P:EO.Web.AJAXUploader.ClientSideOnFileSelected" /> occurs when user selects a file, thus the
            "file to be uploaded" changes. This event occurs after user has finished 
            uploading the file, thus the "commited" file list changes.
            </para>
        <p>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for prototype information about this handler.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.StartToolBarButton">
      <summary>
            Gets or sets a string that specifies a toolbar button to start the upload in the form of ToolBarID:ButtonCommandName.
            </summary>
      <remarks>
        <p>
            Set this property to render the AJAX uploader as a 
            tool bar button instead of a file input box. Clicking
            the toolbar button displays the browse file dialog.
            The format should be "ToolBarID:ButtonCommandName". For example, if this property
            is set to "ToolBar1:Upload", then it refers to the toolbar item with
            <see cref="P:EO.Web.ToolBarItem.CommandName" /> set to "Upload" in toolbar "ToolBar1".
            </p>
        <p>
            It is important for the tool bar button to have 
            approximately the same size as the original browse
            button of a file input element. Thus a toolbar
            button with text is usually used.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.StopToolBarButton">
      <summary>
            Gets or sets a string that specifies a toolbar button to stop the upload in the form of ToolBarID:ButtonCommandName.
            </summary>
      <remarks>
            The format should be "ToolBarID:ButtonCommandName". For example, if this property
            is set to "ToolBar1:Cancel", then it refers to the toolbar item with
            <see cref="P:EO.Web.ToolBarItem.CommandName" /> set to "Cancel" in toolbar "ToolBar1".
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.HideDisabledToolBarButton">
      <summary>
            Gets or sets a boolean indicating whether AJAXUploader automatically hides a disabled toolbar item.
            </summary>
      <remarks>
            Any any given time, either <see cref="P:EO.Web.AJAXUploader.StartToolBarButton"></see> or
            <see cref="P:EO.Web.AJAXUploader.StopToolBarButton"></see> is enabled. The other one is
            disabled. Set this property to true to hide the disabled button.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.TextBoxStyle">
      <summary>
            Gets or sets the style for the textbox of the file input element.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.BrowseButtonStyle">
      <summary>
            Gets or sets the style for the browse button which is used to 
            locate the file on client machine.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.UploadButtonStyle">
      <summary>
            Gets or sets the style for the upload button.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.DeleteButtonStyle">
      <summary>
            Gets or sets the style properties for the delete button.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.CancelButtonStyle">
      <summary>
            Gets or sets the style for cancel button.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.UseLinkButton">
      <summary>
            Gets or sets whether to use link button instead of push button
            for all the buttons.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Web.AJAXUploader.LayoutTemplate"></see>
            is not used.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.BrowseButtonText">
      <summary>
            Gets or sets the text for the browse button.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.UploadButtonText">
      <summary>
            Gets or sets the text for the upload button.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.DeleteButtonText">
      <summary>
            Gets or sets the text for the delete button.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.CancelButtonText">
      <summary>
            Gets or sets the text for the cancel button.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.MaxFileCount">
      <summary>
            Gets or sets the maximum number of files that can be uploaded.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.ProgressDialogID">
      <summary>
            Gets or sets the ID of an EO.Web <see cref="T:EO.Web.AJAXUploaderProgressDialog"></see> which
            is an EO.Web <see cref="T:EO.Web.Dialog"></see> and contains a progress bar indicating current status.
            </summary>
      <remarks>
        <p>
            When an uploading process begins,
            AJAXUploader automatically display the specified AJAXUploaderProgressDialog, 
            changes its progress bar to indicate
            current uploading status and closes the dialog when the process ends.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.PostedFileLabelFormat">
      <summary>
            Gets or sets the format to display posted file names. 
            </summary>
      <remarks>
        <p>
            The format string can includes variables that will be replaced at runtime
            with the value of the variable. A variable is marked by a pair of "{" and "}".
            For example, the default PostedFileLabelFormat:
            </p>
        <i>
            {posted_file_name} - {posted_file_type} ({posted_file_size}bytes)
            </i>
        <p>
            includes three variables: posted_file_name, posted_file_type and posted_file_size.
            </p>
            The following variables are supported:
            <list type="table"><listheader><term>Variable</term><description>Remark</description></listheader><item><term>posted_file_name</term><description>The file name.</description></item><item><term>posted_file_type</term><description>The MIME type.</description></item><item><term>posted_file_size</term><description>File size in bytes.</description></item><item><term>posted_file_size_mb</term><description>File size in MB.</description></item><item><term>posted_file_size_kb</term><description>File size in KB.</description></item></list></remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.ProgressBarSkin">
      <summary>
            Gets or sets the name of the skin to apply to the ProgressBar in this AJAXUploader.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.ProgressTextFormat">
      <summary>
            Gets or sets the format to display the text representing progress of current AJAXUploader.		
            </summary>
      <remarks>
        <p>
            When AJAXUploader is in uploading progress, you can specify to display 
            text to indicate current uploading status. Default template displays 
            the text next to ProgressBar but you can edit the default template and move the 
            uploading text to anywhere. 
            </p>
        <p>
            This property is used to specify the format of the text.
            </p>
        <p>
            The format string can includes variables that will be replaced at runtime
            with the value of the variable. A variable is marked by a pair of "{" and "}".
            </p>
        <p>		
            For example, the default progress text:
            </p>
        <p>
          <i>"Uploading...{transferred} bytes of {total} bytes ({percentage}%) done."</i>
        </p>
        <p>
            Includes three variables: transferred, total and percentage.
            </p>
        <p>
            The following table lists all the supported variables:
            </p>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>trasnferred</term>
            <description>Indicates how many bytes have been transferred</description>
          </item>
          <item>
            <term>total</term>
            <description>Indicates the total bytes need to be transferred</description>
          </item>
          <item>
            <term>percentage</term>
            <description>Indicates the percentage of total bytes that has been transferred</description>
          </item>
          <item>
            <term>current_file_name</term>
            <description>Indicates the current file name that is being transferred</description>
          </item>
          <item>
            <term>total_file_count</term>
            <description>Indicates the number of files that need to be transferred</description>
          </item>
          <item>
            <term>transferred_file_count</term>
            <description>Indicates the number of files that have been transferred </description>
          </item>
          <item>
            <term>elapsed_seconds</term>
            <description>Indicates the time in seconds since the beginning of the uploading process</description>
          </item>
          <item>
            <term>estimated_remaining_seconds</term>
            <description>Indicates the time remained to finish the uploading task.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.LayoutTemplate">
      <summary>
            Gets or sets the AJAXUploader's layout template.
            </summary>
      <remarks>
        <p>
            The default UI of an AJAXUploader consists of one or more file input
            elements, a cancel button, a progress information area and an uploaded
            file list area. You can use LayoutTemplate to change this layout.
            </p>
        <p>
            The LayoutTemplate can contain any valid HTML or ASP.NET server 
            control as well as several pre-defined placeholders. At runtime,
            the placeholders will be replaced with the corresponding HTML
            elements. For example, the following placeholder will
            be replaced with file input elements at runtime.
            </p>
        <code lang="HTML" title="ASPX">&lt;asp:PlaceHolder runat="server" id="InputPlaceHolder"&gt;&lt;/asp:PlaceHolder&gt;</code>
            The following table lists all supported place holders:
            <list type="table"><listheader><term>Place Holder ID</term><description>Replaced With</description></listheader><item><term>InputPlaceHolder</term><description>File input element(s).</description></item><item><term>ProgressTextPlaceHolder</term><description>
            		Progress text. The text format is specified by 
            		<see cref="P:EO.Web.AJAXUploader.ProgressTextFormat"></see>.
            		</description></item><item><term>PostedFilesPlaceHolder</term><description>
            		Posted file list. The format of each item is
            		specified by <see cref="P:EO.Web.AJAXUploader.PostedFileLabelFormat"></see>.
            		</description></item></list><p>
            In addition to the placeholders, a number of predefined
            control IDs are also supported. These predefined control
            IDs trigger a certain predefined action. For example, the
            following button in LayoutTemplate would automatically
            become the uploader's Cancel button:
            </p><code lang="HTML" title="ASPX">&lt;asp:Button runat="server" ID="CancelButton" Text="Cancel Upload" /&gt;</code>
            The following table lists all predefined control IDs:
            <list type="table"><listheader><term>Control ID</term><description>Remark</description></listheader><item><term>UploadButton</term><description>
            		Start upload. Must be a <see cref="T:System.Web.UI.WebControls.Button"></see>,
            		<see cref="T:System.Web.UI.WebControls.LinkButton"></see> or an <see cref="T:System.Web.UI.WebControls.ImageButton"></see> control.
            		</description></item><item><term>CancelButton</term><description>
            		Cancel upload. Must be a <see cref="T:System.Web.UI.WebControls.Button"></see>,
            		<see cref="T:System.Web.UI.WebControls.LinkButton"></see> or an <see cref="T:System.Web.UI.WebControls.ImageButton"></see> control.
            		</description></item><item><term>DeleteButton</term><description>
            		Delete selected files that have already been uploaded. Must be a <see cref="T:System.Web.UI.WebControls.Button"></see>,
            		<see cref="T:System.Web.UI.WebControls.LinkButton"></see> or an <see cref="T:System.Web.UI.WebControls.ImageButton"></see> control.
            		</description></item><item><term>ProgressBar</term><description>
            		The progress bar for the uploader. Must be a <see cref="T:EO.Web.ProgressBar"></see> control.
            		</description></item></list></remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.PostedFiles">
      <summary>
            Gets or sets a list of files that have already been uploaded.
            </summary>
      <remarks>
        <p>
            Each file is represented by an <see cref="T:EO.Web.AJAXPostedFile"></see> object.
            </p>
        <p>
          <b>Note:</b> This property may not include files that are
            already moved into to <see cref="P:EO.Web.AJAXUploader.FinalFileLocation"></see>.
            Use an <see cref="T:EO.Web.AJAXPostedFileList"></see> control to
            maintain the full file list in that case. See
            <see cref="P:EO.Web.AJAXUploader.FinalFileList"></see> for more details.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.AutoPostBack">
      <summary>
            Gets or sets a boolean indicating whether AJAXUploader automatically posts back
            when uploading process is finished. 
            </summary>
      <remarks>
            By default, this property is set to <b>false</b> and the AJAXUploader does not 
            automatically post back to server. You can set it to <b>true</b> to instruct 
            the AJAXUploader to automatically post back when uploading is finished.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXUploader.AutoUpload">
      <summary>
            Gets or sets a boolean indicating whether AJAXUploader automatically start uploading as soon as user has selected a file.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploader.AllowedExtension">
      <summary>
            Gets or sets a list of allowed file extensions for the AJAXUploader.
            </summary>
      <remarks>
        <p>
            By default user can upload files with any extension. You can use this property
            to restrict which extensions allowed. To specify multiple extensions, use "|"
            to separate them, for example, ".bmp|.jpg|.gif".
            </p>
        <p>
            If this property is set and user choose to upload a file with an extension that
            is not in the list, <see cref="P:EO.Web.WebControlBase.ClientSideOnError"></see> will be called with 
            <b>extension_not_allowed</b> as the error code.
            </p>
      </remarks>
    </member>
    <member name="M:EO.Web.AJAXUploader.ClearPostedFiles">
      <summary>
            Clears posted files.
            </summary>
      <remarks>
            AJAXUploader automatically saves the list of the posted files
            in view states. Call this function to clear the list.
            </remarks>
    </member>
    <member name="E:EO.Web.AJAXUploader.FileUploaded">
      <summary>
            Occurs when files have been uploaded between postbacks to the server.
            </summary>
      <remarks>
            View state must be enabled for this event to be triggered.
            </remarks>
    </member>
    <member name="T:EO.Web.AJAXPostedFile">
      <summary>
            AJAXPostedFile class contains information of a posted file.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXPostedFile.TempFileName">
      <summary>
            Gets the temporary file name of this posted file.
            </summary>
      <remarks>
            This property returns <b>null</b> (Visual Basic <b>Nothing</b>)
            if <see cref="P:EO.Web.AJAXUploader.FinalFileLocation"></see> is set,
            in which case you should use <see cref="P:EO.Web.AJAXPostedFile.FinalFileName"></see>.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXPostedFile.FinalFileName">
      <summary>
            Gets the name of the file when it is stored in <see cref="P:EO.Web.AJAXUploader.FinalFileLocation"></see>.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXPostedFile.ClientFileName">
      <summary>
            Gets the posted file's original name from the client machine.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXPostedFile.FullClientFileName">
      <summary>
            Gets the full client file name. IE only.
            </summary>
      <remarks>
            This property is only available on Internet Explorer. On
            other browsers, it returns the same value as
            <see cref="P:EO.Web.AJAXPostedFile.ClientFileName"></see>, which is only the
            file name part without directory information.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXPostedFile.ContentType">
      <summary>
            Gets the content type of this posted file.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXPostedFile.Length">
      <summary>
            Gets the length in bytes of this posted file.
            </summary>
    </member>
    <member name="T:EO.Web.AJAXPostedFileList">
      <summary>
            AJAXPostedFileList maintains the final file list for 
            an AJAXUploader control.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXPostedFileList.SessionVarName">
      <summary>
            Gets or sets the name of the session variable used to store the file list.
            </summary>
      <remarks>
            By default, <see cref="T:EO.Web.AJAXPostedFileList"></see> stores the file
            list in ViewState. If you wish to maintain the list across pages,
            or do not have ViewState enabled, you can set this property to
            instruct the <see cref="T:EO.Web.AJAXPostedFileList"></see> to store the
            file list in the Session object.
            </remarks>
    </member>
    <member name="P:EO.Web.AJAXPostedFileList.Items">
      <summary>
            Gets the file list.
            </summary>
    </member>
    <member name="M:EO.Web.AJAXPostedFileList.Delete(System.Int32)">
      <summary>
            Delete a file in the list.
            </summary>
      <param name="index">The zero-based index of the file to delete.</param>
    </member>
    <member name="T:EO.Web.AJAXUploaderProgressDialog">
      <summary>
            Represents a <see cref="T:EO.Web.Dialog"></see> object that 
            is used to display AJAXUploader uploading progress.
            </summary>
      <remarks>
            Use <see cref="P:EO.Web.Dialog.ContentTemplate"></see> property to customize
            the content of the dialog. The following pre-defined control IDs
            are supported inside <b>ContentTemplate</b>:
            <list type="table"><listheader><term>Control ID</term><description>Remark</description></listheader><item><term>CancelButton</term><description>
            		Cancel upload and close the dialog. Must be a <see cref="T:System.Web.UI.WebControls.Button"></see>,
            		<see cref="T:System.Web.UI.WebControls.LinkButton"></see> or an <see cref="T:System.Web.UI.WebControls.ImageButton"></see> control.
            		</description></item><item><term>ProgressBar</term><description>
            		The progress bar for the uploader. Must be a <see cref="T:EO.Web.ProgressBar"></see> control.
            		</description></item><item><term>ProgressTextPlaceHolder</term><description>
            		Progress text. Most be a <see cref="T:System.Web.UI.WebControls.PlaceHolder"></see> control. The text format is specified by 
            		<see cref="P:EO.Web.AJAXUploader.ProgressTextFormat"></see>.
            		</description></item></list></remarks>
    </member>
    <member name="M:EO.Web.AJAXUploaderProgressDialog.#ctor">
      <summary>
             Creates a new instance of AJAXUploaderProgressDialog.
            </summary>
    </member>
    <member name="P:EO.Web.AJAXUploaderProgressDialog.ProgressTextFormat">
      <summary>
            Gets or sets the format to display the text representing progress of the AJAXUploader that
            is associated with this AJAXUploaderProgressDialog.
            </summary>
      <remarks>
            Please see <see cref="P:EO.Web.AJAXUploader.ProgressTextFormat">AJAXUploader.ProgressTextFormat</see>
            for details.
            </remarks>
    </member>
    <member name="T:EO.Web.WebControlBase">
      <summary>
            Serves as base class that defines the methods, properties and events common to all 
            EO.Web controls that have user interface specific features. 
            </summary>
    </member>
    <member name="P:EO.Web.WebControlBase.ClientSideOnLoad">
      <summary>
            Gets or sets the name of the JavaScript function that is called when the control is loaded on the client side.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for the prototype of this event handler.
            </remarks>
    </member>
    <member name="P:EO.Web.WebControlBase.ClientSideOnUnload">
      <summary>
            Gets or sets the name of the JavaScript function that is called when the control is unloaded on the client side.
            </summary>
      <remarks>
            See <a href="JSDoc.Public.Web.Handlers.clientside_generic_handler.html">clientside_generic_handler</a>
            for the prototype of this event handler.
            </remarks>
    </member>
    <member name="P:EO.Web.WebControlBase.ClientSideOnError">
      <summary>
            Gets or sets the name of the JavaScript function that is called when an error 
            occurs on client side.
            </summary>
      <remarks>
            See <see href="JSDoc.Public.Web.Handlers.clientside_error_handler.html">clientside_error_handler</see>
            for details about this event.
            </remarks>
    </member>
    <member name="P:EO.Web.WebControlBase.ClientSideOnMessage">
      <summary>
            Gets or sets the name of the JavaScript function that is called when the
            control displays a message.
            </summary>
      <remarks>
            This property is often used for localization purpose.
            See <see href="JSDoc.Public.Web.Handlers.clientside_message_handler.html">clientside_message_handler</see>
            for details about this event.
            </remarks>
    </member>
    <member name="T:EO.Web.WebControl">
      <summary>
            Serves as base class that defines the methods, properties and events common to all 
            EO.Web controls that have user interface specific features and EO.Web specific features. 
            </summary>
    </member>
    <member name="P:EO.Web.WebControl.ImageBaseDirectory">
      <summary>
            Gets or sets the folder that contains images for the control.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">
          </see>
        </p>
            The folder that contains images for the control. The default value is null (Nothing in Visual Basic).
            <p> This property is read/write.</p></value>
      <remarks>
        <p>
            If all images used by the control are in one folder, you can use 
            this property to specify the folder, then only
            provide the file name for the specific image URL property. At run time, value
            of this property is combined with the actual URL property. 
            </p>
        <note>
            ImageBaseDirectory must start with "~\" or "~/", or an exception will be thrown.
            </note>
        <tip>
            You can still use "~\" in the actual URL property to bypass this property. For
            example, in the following code:
            <code lang="C#">
            MyMenu1.ImageBaseDirectory = "~/Images";
            MenuItem1.LeftIcon.Url = "one.gif";
            MenuItem2.LeftIcon.Url = "~/two.gif";
            </code><code lang="VB">
            MyMenu1.ImageBaseDirectory = "~/Images"
            MenuItem1.LeftIcon.Url = "one.gif"
            MenuItem2.LeftIcon.Url = "~/two.gif"
            </code>
            The final value for MenuItem1's left icon URL would be "&lt;approot&gt;/Images/one.gif", 
            but the final value for MenuItem2's left icon URL would be "&lt;approot&gt;/two.gif".
            </tip>
      </remarks>
    </member>
    <member name="P:EO.Web.WebControl.CssFile">
      <summary>
            Specifies the path of an external CSS file
            that provides CSS styles used by this control. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The path of the CSS file. 
            <p> This property is read/write.</p></value>
      <remarks>
        <p>
            This external CSS file will be rendered as a link element in the page 
            when the control is rendered.		
            </p>
        <p>
            Use this property to switch the external CSS file if you want to implement
            skin based on CSS file. You can define a set of CSS classes in
            different CSS files with different style settings, then use this property
            to load one of them. 
            </p>
        <p>For more information about skin, see <see href="Web/MenuCommon/LookSkinAndTheme/theme.html">theme and skin</see>.</p>
        <tip>
            Uses '~' to represent the Web application root in the file path.
            </tip>
        <tip>
            If you do not want to use an external CSS file, you can also specify
            CSS styles in  <see cref="P:EO.Web.WebControl.CssBlock"></see> property. 
            </tip>
      </remarks>
    </member>
    <member name="P:EO.Web.WebControl.CssBlock">
      <summary>
            Specifies the CSS style definition used by this control. 
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The text contains CSS style definition. 
            <p> This property is read/write.</p></value>
      <remarks>
        <p> 
            If you want to specify CSS style text, use this property. <br />
            If you want to specify CSS styles in an external file, use <see cref="P:EO.Web.WebControl.CssFile"></see>
            property;
            </p>
        <p>
            You can provide several CSS class styles in this property 
            and use them in control's CssClass properties (E.g., <see cref="P:EO.Web.ElementStyle.CssClass">NavigationItem.NormalStyle.CssClass</see>).
            </p>		
            Here's a sample of content of this block. 
            <code lang="HTML">
            &lt;style  type="text/css"&gt;
            	 a.eo_calendar_style1_title_button 
            	 { 
            	 	width: 21px;
            	 	height: 17px;
            	 	border-right: #f3f3f3 1px solid; 
            	 	border-top: #f3f3f3 1px solid; 
            	 	border-left: #f3f3f3 1px solid; 
            	 	border-bottom: #f3f3f3 1px solid; 
            	 	background-color: transparent; 
            	 }   
            	 a.eo_calendar_style1_title_button:hover 
            	 { 
            	 	width: 21px;
            	 	height: 17px;
            	 	border-right: #0044ff 1px solid; 
            	 	border-top: #0044ff 1px solid; 
            	 	border-left: #0044ff 1px solid; 
            	 	border-bottom: #0044ff 1px solid; 
            	 	background-color: #aaaaff   
            	 }   
            &lt;/style&gt;
            </code></remarks>
    </member>
    <member name="P:EO.Web.WebControl.ControlSkinID">
      <summary>
            Specifies the ID of the skin used by this control.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The ID of the skin. 
            <p> This property is read/write.</p></value>
      <remarks>
        <p>
            Skin is a special control from which other control of the same type can inherit appearance 
            settings. For example, when a skin menu is applied to a target menu, the target menu merges 
            appearance settings from the skin menu with its own appearance setting. 
            </p>
        <p>
            Almost every EO.Web offers a set of ready to use built-in skins. You can use EO.Web Control 
            Builder to design your control based on a built-in skin or save it as an external skin. 
            </p>
        <p>
            For more information about the menu skin, see <see href="Web/MenuCommon/LookSkinAndTheme/skins.html">Menu Skin</see>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.WebControl.Shortcut">
      <summary>
            Get a <see cref="P:EO.Web.WebControl.Shortcut"></see> object through which you can get or set the keyboard short cut
            for this control.
            </summary>
      <remarks>
            The short cut can be a single character, number, F1 - F12, ENTER, BACKSPACE, TAB, ESC, INSERT, DELETE, 
            HOME, END and them prefixed with Ctrl, Shift or Alt.
            For example, "Ctrl+A" or "Shift+DELETE". 
            <p>
            Shortcut is not case sensitive.
            </p></remarks>
    </member>
    <member name="P:EO.Web.WebControl.EnableKeyboardNavigation">
      <summary>
            Gets or sets a value indicating whether keyboard navigation should be enabled.
            </summary>
      <remarks>
        <p>
            Setting this property to <b>True</b> to instruct <b>EO.Web</b> control to capture arrow, 
            enter and escape keys to navigate the current selected item when the control is active. 
            </p>
        <p>
            The default value is <b>False</b>.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.WebControl.RightToLeft">
      <summary>
            Gets or sets a value indicating whether the control should renders as right to left.
            </summary>
      <remarks>
            Middle eastern languages such as Hebrew and Arabic are written predominantly right-to-left. 
            Set this property to <b>True</b> to render the control as right to left. For example, when a menu is
            rendered as right to left:
            <list type="number"><item>
            	Menu item text are automatically right aligned instead of left aligned;
            	</item><item>
            	Sub menu side image are displayed on the right side of a menu group;
            	</item><item>
            	Left icon and right icon swaps positions;
            	</item><item>
            	Sub menu icon appears on the left side of a menu group;
            	</item><item>
            	By default, sub menu expands on the left side of it's parent menu group;
            	</item></list><warning>
            Due to a bug in Internet Explorer's layout engine, <b>Menu.Width</b> must 
            be set to a value that is greater than the top level menu group's minimum width. Setting 
            <b>Menu.Width</b> to a value less than the minium width will cause sub menu shifting to the left from
            it's correct position. For example, if the top level menu group's minimum width is 400 pixels, 
            setting eMenu.Width to "300px" will causes sub menu to be displayed 100 pixel off to the left.
            </warning></remarks>
    </member>
    <member name="P:EO.Web.WebControl.ForceSSL">
      <summary>
            Gets or sets a value indicating whether the server should work as if
            it were always running on a secure server (https).
            </summary>
      <remarks>
        <p>
            EO.Web WebControls render slightly different HTML/JavaScript code when the request is from a 
            secure HTTPS connection instead of a normal HTTP connection. Such difference is necessary
            because otherwise the client user will receive "This page contains both secure and insecure 
            contents" warning message when viewing the control in a secure page. 
            The difference is automatically handled by the control based on the return value of 
            <see cref="P:System.Web.HttpRequest.IsSecureConnection">HttpRequest.IsSecureConnection</see>.
            </p>
        <p>
            Under some special circumstance, particularly when a load balancer or a proxy server is 
            involved, <see cref="P:System.Web.HttpRequest.IsSecureConnection">HttpRequest.IsSecureConnection</see>
            may not reflect the true connection type. While the connection between the end user and
            the load balancer/proxy server can be a secure connection, the connection between the 
            load balancer/proxy server and the Web server may not be. In this case, the Web server will
            serve the "regular HTML" instead of "secure HTLM" that is needed by the end browser.
            </p>
        <p>
            To avoid this problem, set this property to <b>True</b>. 
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.WebControl.BorderImages">
      <summary>
            Provides a list of images used to create customized borders for the control.
            </summary>
      <remarks>
            See <see cref="T:EO.Web.BorderImages"></see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Web.WebControl.ClientSideOnEvalVar">
      <summary>
            Specifies the name of client side JavaScript function which is called 
            when a variable needs to be evaluated in a client template.
            </summary>
      <remarks>
        <p>
            Some controls support <see cref="T:EO.Web.ClientTemplate"></see>, which
            can include custom variables. Use this client side event handler to
            evaluate custom variables. See <see href="JSDoc.Public.Web.Handlers.clientside_evalvar.html">clientside_evalvar</see>
            for prototype information about the handler.
            </p>
        <p>
            See <see cref="T:EO.Web.ClientTemplate"></see> for more details about
            this property.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.WebControl.DesignOptions">
      <summary>
            Contains options used for design time preview.
            </summary>
      <remarks>
            This property returns a <see cref="P:EO.Web.WebControl.DesignOptions"></see> object that maintain
            options used for design time preview. These options have no effect at run time.
            </remarks>
    </member>
    <member name="T:EO.Web.DataBoundControl">
      <summary>
            Serves as the base class for all EO.Web data-bound controls.
            </summary>
    </member>
    <member name="P:EO.Web.DataBoundControl.DataSource">
      <summary>
            Gets or sets the data source used by the control.
            </summary>
    </member>
    <member name="P:EO.Web.DataBoundControl.DataSourceID">
      <summary>
            Gets or sets the ID of this control's data source object. Used in .NET 2.0 only.
            </summary>
    </member>
    <member name="P:EO.Web.DataBoundControl.DataItem">
      <summary>
            The current data item during data binding.
            </summary>
      <remarks>
            This property should only be used inside data binding related event handlers.
            </remarks>
    </member>
    <member name="T:EO.Web.ControlFrame">
      <summary>
            ControlFrame creates an image based frame.
            </summary>
    </member>
    <member name="M:EO.Web.ControlFrame.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Web.ControlFrame"></see> class.
            </summary>
    </member>
    <member name="P:EO.Web.ControlFrame.ContentTemplate">
      <summary>
            Gets or sets the template for the content area.
            </summary>
    </member>
    <member name="T:EO.Web.ImageInfo">
      <summary>
            Contains information about an image.
            </summary>
    </member>
    <member name="P:EO.Web.ImageInfo.ImageUrl">
      <summary>
            Gets or sets Url of the button image.
            </summary>
    </member>
    <member name="P:EO.Web.ImageInfo.DisabledImageUrl">
      <summary>
            Gets or sets Url of the button image when the button is disabled.
            </summary>
    </member>
    <member name="P:EO.Web.ImageInfo.Width">
      <summary>
            Gets or sets the width of the button in pixel.
            </summary>
    </member>
    <member name="P:EO.Web.ImageInfo.Height">
      <summary>
            Gets or sets the height of the button in pixel.
            </summary>
    </member>
    <member name="T:EO.Web.ImageButtonInfo">
      <summary>
            Contains information about an image button.
            </summary>
    </member>
    <member name="P:EO.Web.ImageButtonInfo.HoverImageUrl">
      <summary>
            Gets or sets Url of the button image when the mouse is over the button.
            </summary>
    </member>
    <member name="P:EO.Web.ImageButtonInfo.DownImageUrl">
      <summary>
            Gets or sets Url of the button image when the button is pressed.
            </summary>
    </member>
    <member name="T:EO.Web.Consts">
      <summary>
            Defines constants used by EO.Web controls.
            </summary>
    </member>
    <member name="F:EO.Web.Consts.IntNotSet">
      <summary>
            Represents an integer that is not assigned. 
            This value is equal to <b>int.MinValue</b>.
            </summary>
    </member>
    <member name="F:EO.Web.Consts.None">
      <summary>
            Represents a string with value of "None".
            </summary>
    </member>
    <member name="F:EO.Web.Consts.DebugLevel_On">
      <summary>
            Represents a constant used by <see cref="P:EO.Web.Runtime.DebugLevel">Runtime.DebugLevel</see>
            to turn on all debug messages.
            </summary>
    </member>
    <member name="F:EO.Web.Consts.DebugLevel_Off">
      <summary>
            Represents a constant used by <see cref="P:EO.Web.Runtime.DebugLevel">Runtime.DebugLevel</see>
            to turn off all debug messages.
            </summary>
    </member>
    <member name="T:EO.Web.EffectType">
      <summary>
            Specifies the effect type.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.None">
      <summary>
            Applies no effect.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.NotSet">
      <summary>
            The effect value is not set.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GlideTopToBottom">
      <summary>
            Glides the submenu from top to bottom. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GlideBottomToTop">
      <summary>
            Glides the submenu from bottom to top. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GlideLeftToRight">
      <summary>
            Glides the submenu from left to right. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GlideRightToLeft">
      <summary>
            Glides the submenu from right to left. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GlideTopLeftToBottomRight">
      <summary>
            Glides the submenu from top left corner to bottom right corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GlideTopRightToBottomLeft">
      <summary>
            Glides the submenu from top right corner to bottom left corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GlideBottomRightToTopLeft">
      <summary>
            Glides the submenu from bottom right corner to top left corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GlideBottomLeftToTopRight">
      <summary>
            Glides the submenu from bottom left corner to top right corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RevealTopToBottom">
      <summary>
            Reveals the submenu from top to bottom. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RevealBottomToTop">
      <summary>
            Reveals the submenu from bottom to top. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RevealLeftToRight">
      <summary>
            Reveals the submenu from left to right. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RevealRightToLeft">
      <summary>
            Reveals the submenu from right to left. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RevealTopLeftToBottomRight">
      <summary>
            Reveals the submenu from top left corner to bottom right corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RevealTopRightToBottomLeft">
      <summary>
            Reveals the submenu from top right corner to bottom left corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RevealBottomRightToTopLeft">
      <summary>
            Reveals the submenu from bottom right corner to top left corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RevealBottomLeftToTopRight">
      <summary>
            Reveals the submenu from bottom left corner to top right corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.BarnOutHorizontal">
      <summary>
            Reveals the submenu from the center toward the borders horizontally. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.BarnOutVertical">
      <summary>
            Reveals the submenu from the center toward the borders vertically. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.BarnInHorizontal">
      <summary>
            Reveals the submenu from the borders toward the center horizontally. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.BarnInVertical">
      <summary>
            Reveals the submenu from the borders toward the center vertically. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.BlindsUp">
      <summary>
            Reveals the submenu with a motion that appears to open blinds upwards. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.BlindsDown">
      <summary>
            Reveals the submenu with a motion that appears to open blinds downwards. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.BlindsLeft">
      <summary>
            Reveals the submenu with a motion that appears to open blinds to the left. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.BlindsRight">
      <summary>
            Reveals the submenu with a motion that appears to open blinds to the right. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.CheckerBoardUp">
      <summary>
            Reveals the submenu uncovering squares placed like a checkerboard upwards. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.CheckerBoardDown">
      <summary>
            Reveals the submenu uncovering squares placed like a checkerboard downwards. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.CheckerBoardLeft">
      <summary>
            Reveals the submenu uncovering squares placed like a checkerboard towards left. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.CheckerBoardRight">
      <summary>
            Reveals the submenu uncovering squares placed like a checkerboard towards right. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.Fade">
      <summary>
            Reveals the submenu by fading out the original submenu. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GradientWipeUp">
      <summary>	
            Reveals the submenu by passing a gradient band upwards over the original content. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GradientWipeDown">
      <summary>	
            Reveals the submenu by passing a gradient band downwards over the original content. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GradientWipeLeft">
      <summary>	
            Reveals the submenu by passing a gradient band to the left over the original content. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.GradientWipeRight">
      <summary>	
            Reveals the submenu by passing a gradient band to the right over the original content. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.Inset">
      <summary>	
            Reveals the submenu diagonally. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisDiamondOut">
      <summary>	
            Reveals submenu from center toward the borders the way similar to the opening of a camera aperture, with shape of diamond. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisDiamondIn">
      <summary>	
            Reveals submenu from borders toward the center the way similar to the opening of a camera aperture, with shape of diamond. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisCircleOut">
      <summary>	
            Reveals submenu from center toward the borders the way similar to the opening of a camera aperture, with shape of circular. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisCircleIn">
      <summary>	
            Reveals submenu from border toward the center the way similar to the opening of a camera aperture, with shape of circular. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisCrossOut">
      <summary>	
            Reveals submenu from center toward the borders the way similar to the opening of a camera aperture, in X shape. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisCrossIn">
      <summary>	
            Reveals submenu from the borders toward the center the way similar to the opening of a camera aperture, in X shape. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisPlusOut">
      <summary>	
            Reveals submenu from center toward the borders the way similar to the opening of a camera aperture, in plus sign shape. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisPlusIn">
      <summary>	
            Reveals submenu from the borders toward the center the way similar to the opening of a camera aperture, in plus sign shape. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisSquareOut">
      <summary>	
            Reveals submenu from the center toward the borders the way similar to the opening of a camera aperture, in square shape. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisSquareIn">
      <summary>	
            Reveals submenu from the border toward the center the way similar to the opening of a camera aperture, in square shape. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisStarOut">
      <summary>	
            Reveals submenu from the center toward the borders the way similar to the opening of a camera aperture, in star shape. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.IrisStarIn">
      <summary>	
            Reveals submenu from the border toward the center the way similar to the opening of a camera aperture, in star shape. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.Pixelate">
      <summary>	
            Reveals the submenu as colored squares that take the average color value of the pixels they replace. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RadialWipeClock">
      <summary>	
            Reveals submenu with a radial wipe, like a windshield-wiper blade sweeping around the center, clockwise from the top. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RadialWipeWedge">
      <summary>	
            Reveals submenu with a radial wipe, like a windshield-wiper blade sweeping around the center in both directions from the top. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RadialWipeRadial">
      <summary>	
            Reveals submenu with a radial wipe, sweeping from the top to the left side, with one end of the sweep anchored on the upper left corner. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RandomBarsHorizontal">
      <summary>
            Reveals submenu by exposing horizontal random lines of pixels. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RandomBarsVertical">
      <summary>
            Reveals submenu by exposing vertical random lines of pixels. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.RandomDissolve">
      <summary>
            Reveals submenu by exposing random pixels. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.SlideHide">
      <summary>
             Slides submenu by pushing original content out, exposing new content. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.SlidePush">
      <summary>
             Slides submenu by getting new content in, pushing original content out. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.SlideSwap">
      <summary>
             Alternating bands expose new content, or push original content out, at the same time. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.Spiral">
      <summary>
             Reveals submenu with a spiral motion. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.StretchHide">
      <summary>
             Reveals submenu by stretching new content from left to right. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.StretchPush">
      <summary>
             Reveals submenu by stretching new content in and squeezes original content out, moving from left to right. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.StretchSpin">
      <summary>
             Reveals submenu by stretching new content over original content from the center outward. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.StripsLeftUp">
      <summary>
             Reveals submenu by moving successive strips into place from the lower left corner to the upper right, like a diagonal saw blade passing across the original content. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.StripsLeftDown">
      <summary>
             Reveals submenu by moving successive strips into place from the upper left corner to the lower right, like a diagonal saw blade passing across the original content. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.StripsRightUp">
      <summary>
             Reveals submenu by moving successive strips into place from the lower right corner to the upper left, like a diagonal saw blade passing across the original content. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.StripsRightDown">
      <summary>
             Reveals submenu by moving successive strips into place from the upper right corner to the lower left, like a diagonal saw blade passing across the original content. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.Wheel">
      <summary>
             Reveals submenu with a rotating motion, like spokes of a wheel covering the original content. Applies to IE only.
            </summary>
    </member>
    <member name="F:EO.Web.EffectType.Zigzag">
      <summary>
             Reveals submenu with a forward and back motion that moves down the object. Applies to IE only.
            </summary>
    </member>
    <member name="T:EO.Web.Effect">
      <summary>
            Specifies the effect to display when a submenu expands or collapses.
            </summary>
      <remarks>
        <p>
            EO.Web Menu supports <see cref="T:EO.Web.EffectType">60+ expand/collapse effects</see>. 
            <list type="bullet"><item>Use <see cref="P:EO.Web.Effect.Type"></see>  property to specify what kind of effect to display. </item><item>Use <see cref="P:EO.Web.Effect.Duration"></see> property to specify how long (in milliseconds) the effect will take. </item><item>Use <see cref="P:EO.Web.Effect.Steps"></see> property to specify the number of steps the effect will take. More steps results in smoother effect.</item></list></p>
        <p>
            See <see href="Web/Menu/QuickStartGuide/effects.html">using expand/collapse effect</see> for a simple walkthrough 
            on how to set a submenu's expanding/collapsing effects.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Effect.Type">
      <summary>
            Gets or sets the type of the effect.
            </summary>
      <remarks>
        <p>
            EO.Web Menu supports 60+ expand/collapse effects. 
            See <see cref="T:EO.Web.EffectType"></see> enum for all the supported effect types.
            </p>
        <p>
            If a menu group's <b>Type</b> is <b>NotSet</b>, 
            the control will try to get the effect type
            from the parent menu item's look item.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.Effect.Duration">
      <summary>
            Specifies how long in milliseconds the effect should display. 		
            </summary>
      <remarks>
            Specifies how long in milliseconds the effect should display.
            If not set, default value 300 (milliseconds) is used.
            </remarks>
    </member>
    <member name="P:EO.Web.Effect.Steps">
      <summary>
            Gets or sets the number of steps of showing the effect.
            </summary>
      <remarks>
        <p>
            Use <b>Steps</b> to control how smooth the effect is. More steps results in smoother effect.
            </p>
        <remarks>
            If value is not set, default value 10 (steps) is used.
            </remarks>
      </remarks>
    </member>
    <member name="T:EO.Web.NullableBool">
      <summary>
            A boolean value with True, False and Null.
            </summary>
      <remarks>
            In addition to the standard value of <b>True</b> and <b>False</b>, 
            <b>NullableBool</b> also defines <b>Null</b>, which means none value has been set.
            EO.Web navigation controls use <b>NullableBool</b> for properties such as 
            <see cref="P:EO.Web.NavigationItem.RaisesServerEvent"></see> and 
            <see cref="P:EO.Web.NavigationItem.CausesValidation"></see>.
            </remarks>
    </member>
    <member name="F:EO.Web.NullableBool.Null">
      <summary>
            The value is not set. Final value is 
            determined by run time based on the context.
            </summary>
    </member>
    <member name="F:EO.Web.NullableBool.True">
      <summary>
            True Boolean value. 
            </summary>
    </member>
    <member name="F:EO.Web.NullableBool.False">
      <summary>
            False Boolean value.
            </summary>
    </member>
    <member name="M:EO.Web.NullableBool.Parse(System.String)">
      <summary>
            Parses the string into Boolean value.
            </summary>
      <param name="value">The string name of the Boolean value.</param>
      <returns>The Boolean value.</returns>
    </member>
    <member name="M:EO.Web.NullableBool.op_Equality(EO.Web.NullableBool,EO.Web.NullableBool)">
      <summary>
            Tests whether two specified <see cref="T:EO.Web.NullableBool"></see> structures are equivalent.
            </summary>
      <param name="left">
            The <see cref="T:EO.Web.NullableBool"></see> structure that is to the left of the equality operator. 
            </param>
      <param name="right">
            The <see cref="T:EO.Web.NullableBool"></see> structure that is to the right of the equality operator. 
            </param>
      <returns>
            This operator returns <b>true</b> if the two <see cref="T:EO.Web.NullableBool"></see> 
            structures are equal; otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="M:EO.Web.NullableBool.op_Inequality(EO.Web.NullableBool,EO.Web.NullableBool)">
      <summary>
            Tests whether two specified <see cref="T:EO.Web.NullableBool"></see> structures are different.
            </summary>
      <param name="left">
            The <see cref="T:EO.Web.NullableBool"></see> structure that is to the left of the inequality operator. 
            </param>
      <param name="right">
            The <see cref="T:EO.Web.NullableBool"></see> structure that is to the right of the inequality operator. 
            </param>
      <returns>
            This operator returns <b>true</b> if the two <see cref="T:EO.Web.NullableBool"></see> 
            structures are different; otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="T:EO.Web.ElementPaddings">
      <summary>
            Represents paddings around a Web UI element.
            </summary>
      <remarks>
            This class is used by <see cref="P:EO.Web.ElementStyle.Paddings">ElementStyle.Paddings</see> property to support
            setting paddings to the Web UI element to which <see cref="T:EO.Web.ElementStyle"></see> applies.
            
            </remarks>
    </member>
    <member name="P:EO.Web.ElementPaddings.IsEmpty">
      <summary>
            Return the boolean indicating if any padding value is set.
            </summary>
    </member>
    <member name="P:EO.Web.ElementPaddings.All">
      <summary>
             Gets or sets all four padding values.
             </summary>
      <remarks>
             If the values of "top", "bottom", "left", "right" are the same, returns this value. 
             Otherwise, returns <see cref="F:EO.Web.Consts.IntNotSet"></see>.		
             Set this property will set all four paddings to the same value. 
            <code lang="C#">
             // Get a menu look item
             MenuItem lookItem;
             lookItem = Menu1.LookItems.GetItemByID("default");
             
             // Set look item's left, right, top and bottom paddings all together
             // This affects all the menu items that uses this look item.
             lookItem.NormalStyle.Paddings.All = 2;	
             
             // Set look item's submenu's left, right, top and bottom paddings all together.
             lookItem.SubMenu.Style.Paddings.All = 2;
             </code><code lang="VB">
             ' Get a menu look item
             Dim lookItem as MenuItem
             lookItem = Menu1.LookItems.GetItemByID("default")
             
             ' Set look item's left, right, top and bottom paddings all together
             ' This affects all the menu items that uses this look item.
             lookItem.NormalStyle.Paddings.All = 2	
             
             'Set a specific MenuItem's main area's left, right, top and bottom padding all together
             lookItem.SubMenu.Style.Paddings.All = 2
            	
             </code><p>
             Use individual ElementPaddings's property 
             <see cref="P:EO.Web.ElementPaddings.Right"></see>, 
             <see cref="P:EO.Web.ElementPaddings.Left"></see>, 
             <see cref="P:EO.Web.ElementPaddings.Top"></see>, 
             <see cref="P:EO.Web.ElementPaddings.Bottom"></see> to set
             the corresponding attributes.
             </p><p>
             To learn about how to control a navigation control's appearance, 
             see  <see cref="T:EO.Web.ElementStyle"></see> class for reference.		
             </p></remarks>
    </member>
    <member name="P:EO.Web.ElementPaddings.Bottom">
      <summary>
             Gets or sets the padding (in pixels) to the bottom.
             </summary>
      <remarks>
             This value is used by <see cref="P:EO.Web.ElementStyle.Paddings"></see> 
             property.
            <code lang="C#">
             // Get a menu look item
             MenuItem lookItem;
             lookItem = Menu1.LooksItems.GetItemByID("default");
             
             // Set look item's bottom padding.
             // This affects all the menu items that uses this look item.
             lookItem.NormalStyle.Paddings.Bottom = 2;	
             
             // Set look item's submenu's bottom padding.
             lookItem.SubMenu.Style.Paddings.Bottom = 2;
             </code><code lang="VB">
             'Get a menu look item
             Dim lookItem as MenuItem
             lookItem = Menu1.LooksItems.GetItemByID("default")
             
             'Set look item's bottom padding.
             'This affects all the menu items that uses this look item.
             lookItem.NormalStyle.Paddings.Bottom = 2	
             
             'Set look item's submenu's bottom padding.
             lookItem.SubMenu.Style.Paddings.Bottom = 2
             </code></remarks>
    </member>
    <member name="P:EO.Web.ElementPaddings.Left">
      <summary>
             Gets or sets the padding (in pixels) to the left.
             </summary>
      <remarks>
             This property is used by <see cref="P:EO.Web.ElementStyle.Paddings">ElementStyle.Paddings</see> property to support
             setting paddings to the web UI element to which ElementStyle applies.
            <code lang="C#">
             // Get a menu look item
             MenuItem lookItem;
             lookItem = Menu1.LookItems.GetItemByID("default");
             
             // Set look item's left padding.
             // This affects all the menu items that uses this look item.
             lookItem.NormalStyle.Paddings.Left = 2;	
             
             // Set look item's submenu's left padding.
             lookItem.SubMenu.Style.Paddings.Left = 2;
             </code><code lang="VB">
             ' Get a menu look item
             Dim lookItem as MenuItem
             lookItem = Menu1.LookItems.GetItemByID("default")
             
             ' Set look item's left paddings.
             ' This affects all the menu items that uses this look item.
             lookItem.NormalStyle.Paddings.Left = 2	
             
             'Set look item's submenu's left padding.
             lookItem.SubMenu.Style.Paddings.Left = 2
            	
             </code></remarks>
    </member>
    <member name="P:EO.Web.ElementPaddings.Right">
      <summary>
             Gets or sets the padding (in pixels) to the right.
             </summary>
      <remarks>
             This property is used by <see cref="P:EO.Web.ElementStyle.Paddings">ElementStyle.Paddings</see> property to support
             setting paddings to the web UI element that ElementStyle applies.
            <code lang="C#">
             // Get a menu look item
             MenuItem lookItem;
             lookItem = Menu1.LookItems.GetItemByID("default");
             
             // Set look item's right paddings.
             // This affects all the menu items that uses this look item.
             lookItem.NormalStyle.Paddings.Right = 2;	
             
             // Set look item's submenu's right padding.
             lookItem.SubMenu.Style.Paddings.Right = 2;
             </code><code lang="VB">
             ' Get a menu look item
             Dim lookItem as MenuItem
             lookItem = Menu1.LookItems.GetItemByID("default")
             
             ' Set look item's right padding.
             ' This affects all the menu items that uses this look item.
             lookItem.NormalStyle.Paddings.Right = 2	
             
             'Set look item's submenu's right padding.
             lookItem.SubMenu.Style.Paddings.Right = 2
            	
             </code></remarks>
    </member>
    <member name="P:EO.Web.ElementPaddings.Top">
      <summary>
             Gets or sets the padding (in pixels) to the top.
             </summary>
      <remarks>
             This property is used by <see cref="P:EO.Web.ElementStyle.Paddings">ElementStyle.Paddings</see> property to support
             setting paddings to the web UI element that ElementStyle applies.
            <code lang="C#">
             // Get a menu look item
             MenuItem lookItem;
             lookItem = Menu1.LookItems.GetItemByID("default");
             
             // Set look item's top padding.
             // This affects all the menu items that uses this look item.
             lookItem.NormalStyle.Paddings.Top = 2;	
             
             // Set look item's submenu's top padding.
             lookItem.SubMenu.Style.Paddings.Top = 2;
             </code><code lang="VB">
             ' Get a menu look item
             Dim lookItem as MenuItem
             lookItem = Menu1.LookItems.GetItemByID("default")
             
             ' Set look item's top padding
             ' This affects all the menu items that uses this look item.
             lookItem.NormalStyle..Paddings.Top = 2	
             
             'Set look item's submenu's top padding.
             lookItem.SubMenu.Style.Paddings.Top = 2
            	
             </code></remarks>
    </member>
    <member name="T:EO.Web.DesignOptions">
      <summary>
            Stores preview options associated with the control.
            </summary>
      <remarks>
        <b>DesignOptions</b> maintain options used for design time preview. 
            These options have no effect at run time.
            </remarks>
    </member>
    <member name="P:EO.Web.DesignOptions.ApplicationRoot">
      <summary>
            Sets the web application root directory for Menu Builder.
            </summary>
      <value>
        <p>
          <see cref="T:System.String">System.String</see>
        </p>
            The path of the web application root.
            <p> This property is read/write. It is only available at design time.
            </p></value>
      <remarks>
        <p>This property is used by Menu Builder only. 
            It has no effects at run time. </p>
        <p>
            This property is used to specify the web application root when 
            Menu Builder is running as an independent application outside of 
            Visual Studio .NET environment. Menu Builder needs to know the
            web application root path to be able to correctly preview menus.
            When Menu Builder runs inside Visual Studio.Net, Menu Builder can
            acquire this information from the current project, however, when
            Menu Builder is running as an independent application outside of
            Visual Studio.Net, this path must be specified in order to load
            the resource properly and display the menu in preview panel.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.DesignOptions.BackColor">
      <summary>
            Specifies the background color for the preview window.
            </summary>
      <p>This property is used by Menu Builder only. 
            It has no effects at run time. </p>
      <remarks>
        <p>
            This property is used to specify the background color of the preview
            window. The default background window for the preview window is white,
            this may not be appropriate for some menus because such color can not
            distinguish those menus from the background.
            </p>
      </remarks>
    </member>
    <member name="P:EO.Web.DesignOptions.Left">
      <summary>
            Gets or sets the x-coordinate of a control's left edge in pixels in the preview panel.
            </summary>
      <remarks>
            By default, the control is rendered at the left top conver of the preview panel.
            However, sometimes you may want to change this location to get better preview result,
            For example, if a Menu is on the right edge of the page and expands to the left,
            to get a better preview result that is identical to the page, you can use this
            property to move the location to the right.
            </remarks>
    </member>
    <member name="P:EO.Web.DesignOptions.Top">
      <summary>
            Gets or sets the y-coordinate of a control's top edge in pixels in the preview panel.
            </summary>
      <remarks>
            By default, the control is rendered at the left top conver of the preview panel.
            However, sometimes you may want to change this location to get better preview result,
            For example, if a Menu is on the right edge of the page and expands to the left,
            to get a better preview result that is identical to the page, you can use this
            property to move the location to the right.
            </remarks>
    </member>
    <member name="P:EO.Web.DesignOptions.HTML">
      <summary>
            Gets or sets the HTML code to host the control in the preview panel.
            </summary>
    </member>
    <member name="T:EO.Web.RunningMode">
      <summary>
            Specifies the <a href="Web/Grid/mode.html">running mode</a> of a <see cref="T:EO.Web.Grid"></see> control.
            </summary>
    </member>
    <member name="F:EO.Web.RunningMode.Server">
      <summary>
            The grid performs sorting and paging on the the server side.
            </summary>
    </member>
    <member name="F:EO.Web.RunningMode.Callback">
      <summary>
            The grid performs sorting and paging on the server side but does
            so with an AJAX callback.
            </summary>
    </member>
    <member name="F:EO.Web.RunningMode.Client">
      <summary>
            The grid performs sorting and paging on the client side.
            </summary>
    </member>
    <member name="T:EO.Web.Runtime">
      <summary>
            Provides a set of EO.Web runtime related services.
            </summary>
    </member>
    <member name="P:EO.Web.Runtime.DebugLevel">
      <summary>
            Gets or sets the debug level.
            </summary>
      <remarks>
        <p>
            Debug level is set to <see cref="F:EO.Web.Consts.DebugLevel_On">Consts.DebugLevel_On</see> by default,
            which enables debug mode. When debug mode is enabled, EO.Web Controls client side script
            displays a message box when an error occurs. The message box contains detailed information about 
            the error and suggestions about how to correct the error. If you do not wish to see these messages, 
            you can set debug level to <see crfef="Consts.DebugLevel_Off"></see> in your code. Usually you 
            should call this in your <b>Application_Start</b> event handler:
            </p>
        <code lang="VB">
            Sub Application_Start(ByVal sender As Object, ByVal e As EventArgs)
                EO.Web.Runtime.DebugLevel = Consts.DebugLevel_Off
            End Sub
            </code>
        <code lang="C#">
            protected void Application_Start(Object sender, EventArgs e)
            {
                EO.Web.Runtime.DebugLevel = Consts.DebugLevel_Off;
            }
            </code>
      </remarks>
    </member>
    <member name="M:EO.Web.Runtime.AddLicense(System.String)">
      <summary>
            Applies a license.
            </summary>
      <param name="license">The license data.</param>
    </member>
    <member name="M:EO.Web.Runtime.ResetState(System.Web.UI.Control)">
      <summary>
            Resets client side state information for any 
            EO.Web controls that are child controls of the
            given control.
            </summary>
      <param name="ctrl">The control whose children control's client
            state information should be reseted.</param>
    </member>
    <member name="T:EO.Web.InlineStyle">
      <summary>
            This class maintains a collection of CSS style attributes. 
            </summary>
      <remarks>
            InlineStyle and CssText property maintain the same set of CSS attributes, 
            you can use either to access a CSS attribute value. 
            Here is an example of retrieving the same CSS attribute value by using InlineStyle 
            and specific style property.
            <code lang="C#">
            string strBorderStyle;
            Color borderColor;
            
            strBorderStyle = Menu1.TopGroup.Style.InlineStyle["border-top"];
            borderColor = Menu1.TopGroup.Style.BorderColor;
            </code><code lang="VB">
            Dim strCSSValue As String
            Dim borderColor As Color
            
            strCSSValue = Menu1.TopGroup.Style.InlineStyle.Item("border-top")
            borderColor = Menu1.TopGroup.Style.BorderColor()
            </code></remarks>
    </member>
    <member name="P:EO.Web.InlineStyle.IsEmpty">
      <summary>
            Gets a value indicating whether this InlineStyle object contains any attributes.
            </summary>
    </member>
    <member name="M:EO.Web.InlineStyle.Add(System.String,System.String)">
      <summary>
            Adds a CSS attribute.
            </summary>
      <param name="propName">The CSS attribute name. </param>
      <param name="propValue">The CSS attribute value.</param>
      <remarks>
            Composite CSS attributes are parsed and converted into primary attributes. 
            Here is an example that adds three properties: border-top-width, border-top-style and  border-top-color into the collection. 
            <code lang="c#">Add("border-top", "1px solid blue");</code><code lang="VB">Add("border-top", "1px solid blue")</code></remarks>
    </member>
    <member name="M:EO.Web.InlineStyle.Remove(System.String)">
      <summary>
            Removes a CSS attribute.
            </summary>
      <param name="propName">The CSS attribute name to remove.</param>
    </member>
    <member name="P:EO.Web.InlineStyle.Item(System.String)">
      <summary>
            Gets or sets a specific CSS attribute. 
            </summary>
      <remarks>
            In C#, this property is the indexer for the InlineStyle class. 
            <code lang="C#">
            string strBorderStyle;
            strBorderStyle = Menu1.TopGroup.Style.InlineStyle["border-top"];
            </code><code lang="VB">
            Dim strCSSValue As String
            strCSSValue = Menu1.TopGroup.Style.InlineStyle.Item("border-top")
            </code></remarks>
    </member>
    <member name="M:EO.Web.InlineStyle.op_Addition(EO.Web.InlineStyle,EO.Web.InlineStyle)">
      <summary>
            Combines two <see cref="T:EO.Web.InlineStyle"></see> instances together. 
            </summary>
      <param name="style1">The first style to combine.</param>
      <param name="style2">The Second style to combine.
            If the same CSS attribute exists in the first <see cref="T:EO.Web.InlineStyle"></see> instances, 
            value from this <see cref="T:EO.Web.InlineStyle"></see> will override that of the 
            first <see cref="T:EO.Web.InlineStyle"></see>.
            </param>
      <returns>The combination of the two styles.</returns>
    </member>
    <member name="M:EO.Web.InlineStyle.op_Addition(EO.Web.InlineStyle,System.String)">
      <summary>
            Combines <see cref="T:EO.Web.InlineStyle"></see> and CSS text together.
            </summary>
      <param name="style1">The <see cref="T:EO.Web.InlineStyle"></see> to combine.</param>
      <param name="cssText">The CSS string to combine. 
            If the same CSS attribute exists in the first <see cref="T:EO.Web.InlineStyle"></see> instances, 
            the CSS attribute value in this CSS string will override that of the first <see cref="T:EO.Web.InlineStyle"></see>. </param>
      <returns>The combination of the two styles</returns>
    </member>
    <member name="M:EO.Web.InlineStyle.Equals(System.Object)">
      <summary>
            Determines whether the two objects are equal.
            </summary>
      <param name="obj">The object to compare.</param>
      <returns>
        <b>True</b> if two objects are equal. <b>False</b> if two objects are not equal.</returns>
    </member>
    <member name="M:EO.Web.InlineStyle.op_Equality(EO.Web.InlineStyle,EO.Web.InlineStyle)">
      <summary>
            Determines if the two <see cref="T:EO.Web.InlineStyle"></see> are equal.
            </summary>
      <param name="style1">The first <see cref="T:EO.Web.InlineStyle"></see> to compare.</param>
      <param name="style2">The second <see cref="T:EO.Web.InlineStyle"></see> to compare.</param>
      <returns>
        <b>True</b> if two objects are equal.</returns>
    </member>
    <member name="M:EO.Web.InlineStyle.op_Inequality(EO.Web.InlineStyle,EO.Web.InlineStyle)">
      <summary>
            Determines if the two <see cref="T:EO.Web.InlineStyle"></see> are not equal.
            </summary>
      <param name="style1">The first <see cref="T:EO.Web.InlineStyle"></see> to compare.</param>
      <param name="style2">The second <see cref="T:EO.Web.InlineStyle"></see> to compare.</param>
      <returns>
        <b>True</b> if two objects are not equal. <b>False</b> if two objects are equal.</returns>
    </member>
    <member name="T:EO.Web.FontInfo">
      <summary>
            This class maintains the CSS attributes specific to font. 
            </summary>
      <remarks>
        <see cref="P:EO.Web.ElementStyle.Font">ElementStyle's Font</see> property uses this class to 
            maintain font-related CSS attributes for navigation controls and navigation items.  
            Here is an example to use this property to set font related CSS attributes. 
            <code lang="C#">		
            // Get a menu look item
            MenuItem lookItem;
            lookItem = Menu1.ItemLooks.GetItemByID("default");
            
            // Set the look item's normal style font to bold.
            // All the menu items that uses this look item will 
            // have bold font in normal state.
            lookItem.NormalStyle.Font.Bold = true;
            </code><code lang="VB">
            ' Get a menu look item
            Dim lookItem as MenuItem
            lookItem = Menu1.ItemLooks.GetItemByID("default")
            
            ' Set the look item's normal style font to bold.
            ' All the menu items that uses this look item will 
            ' have bold font in normal state.
            lookItem.NormalStyle.Font.Bold = true
            </code></remarks>
    </member>
    <member name="P:EO.Web.FontInfo.Bold">
      <summary>
            Gets or sets a value indicating if the font is bold.
            </summary>
      <remarks>
            Gets or sets the "font-weight" attribute.
            </remarks>
    </member>
    <member name="P:EO.Web.FontInfo.Italic">
      <summary>
            Gets or sets a value indicating whether the font is italic.
            </summary>
      <remarks>
            Gets or sets the "font-style" attribute.
            </remarks>
    </member>
    <member name="P:EO.Web.FontInfo.Name">
      <summary>
            Gets or sets the primary font name.
            </summary>
    </member>
    <member name="P:EO.Web.FontInfo.Names">
      <summary>
            Gets or sets an ordered array of font names. 
            </summary>
    </member>
    <member name="P:EO.Web.FontInfo.Overline">
      <summary>
            Gets or sets a value that indicates whether the text is overlined. 
            </summary>
      <remarks>
            This property gets or sets "text-decoration" CSS attributes. 
            </remarks>
    </member>
    <member name="P:EO.Web.FontInfo.Size">
      <summary>
            Gets or sets the font size.
            </summary>
      <remarks>
            This property gets or sets "font-size" CSS attribute. 
            </remarks>
    </member>
    <member name="P:EO.Web.FontInfo.Strikeout">
      <summary>
            Gets or sets a value that indicates if text displays with a line through the middle. 
            </summary>
      <remarks>
            This proerty gets or sets the "text-decoration" CSS attribute. 
            </remarks>
    </member>
    <member name="P:EO.Web.FontInfo.Underline">
      <summary>
            Gets or sets a value that indicates whether the text is underlined.
            </summary>
    </member>
    <member name="T:EO.Web.ElementStyle">
      <summary>
        <b>ElementStyle</b> class contains CSS style settings for a specific Web UI element.
            </summary>
      <remarks>
        <b>ElementStyle</b> class maintains CSS style information used to control the style of 
            an UI element. <b>ElementStyle</b> exposes the following properties:
            <list type="table"><listheader><term>What property to use to control the style</term><description>Description</description></listheader><item><term><see cref="P:EO.Web.ElementStyle.CssClass">CssClass</see></term><description>
            		The CSS class name. This property controls the CSS attributes according to the specified CSS class name.
            		You can set this property in design time as well as run time. 
            		</description></item><item><term><see cref="P:EO.Web.ElementStyle.CssText">CssText</see> or
            			<see cref="P:EO.Web.ElementStyle.InlineStyle">InlineStyle</see></term><description>
            			Menu Builders support inline CSS editor which provides 
            			an easy way to edit and preview any CSS settings. 
            			<b>CssText</b> and <b>InlineStyle</b> properties are pointing to the same set of CSS style. 
            			Updating one will affect the other.
            			See <see cref="P:EO.Web.ElementStyle.InlineStyle">InlineStyle</see> for programming examples.
            		</description></item><item><term>
            			Other properties that wrap CSS attributes
            		</term><description>
            			Common attributes such as 
            			<see cref="P:EO.Web.ElementStyle.BackColor"></see>, 
            			<see cref="P:EO.Web.ElementStyle.Font"></see> and 
            			<see cref="P:EO.Web.ElementStyle.Paddings"></see> are directly exposed as properties.
            			Setting these properties indirectly changes <b>CssText</b> and <b>InlineStyle</b>.
            			See <see cref="P:EO.Web.ElementStyle.InlineStyle">InlineStyle</see> for programming examples.
            		</description></item></list><tip>
            Use item look to control the common appearance settings of items.
            </tip>
            
            Here is an example to control style by using both <see cref="P:EO.Web.ElementStyle.InlineStyle">InlineStyle</see>
            and individual CSS style attribute to achieve the same result:
            <code lang="C#">
            // Get a menu look item
            MenuItem lookItem;
            lookItem = Menu1.ItINoDocServiceProvideremLooks.GetItemByID("default");
            
            // Set look item's background color to red by using BackColor property.
            lookItem.NormalStyle.BackColor = Color.Red;
            
            // Set the submenu of the look item's background color to 
            // red by using BackColor property.
            lookItem.SubMenu.Style.InlineStyle["background-color"] = "red";
            
            </code><code lang="VB">
            Dim foreColor As Color
            
            ' Get a menu look item
            Dim lookItem as MenuItem
            lookItem = Menu1.ItemLooks.GetItemByID("default")
            
            'Set look item's background color to red by using BackColor property. 
            lookItem.NormalStyle.BackColor =  Color.Red
            
            'Set submenu of the look item's background color to red 
            'by using BackColor property. 
            lookItem.SubMenu.Style.InlineStyle.Item("background-color") = "red"
             </code></remarks>
      <seealso cref="P:EO.Web.ElementStyle.InlineStyle">ElementStyle.InlineStyle property</seealso>
    </member>
    <member name="P:EO.Web.ElementStyle.CssClass">
      <summary>
            Gets or sets CSS style's class name. 
            </summary>
      <remarks>
            Specifies CSS file name on a navigation control and use CssClass name on its	
            <see cref="T:EO.Web.NavigationItem"></see>
            or <see cref="T:EO.Web.NavigationItemGroup"></see>.
            <warning>
            This property is ignored if <see cref="P:EO.Web.ElementStyle.CssText"></see> or other style property is set.
            </warning></remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.CssText">
      <summary>
            Gets or sets inline CSS text. 
            </summary>
      <remarks>
            This property and <see cref="P:EO.Web.ElementStyle.InlineStyle">InlineStyle</see> property access
            the same CSS attribute collection. 
            Changing this property also changes the content of <see cref="P:EO.Web.ElementStyle.InlineStyle">InlineStyle</see> property. 
            Directly setting the CSS properties of <see cref="T:EO.Web.ElementStyle"></see>, such as 
            <see cref="P:EO.Web.ElementStyle.BackColor"></see>, 
            <see cref="P:EO.Web.ElementStyle.BackgroundImage"></see>, 
            will also change the <b>CssText</b> property. 
            </remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.BackColor">
      <summary>
            Gets or sets background color of a Web UI element.
            </summary>
      <remarks>
            This property gets or sets "background-color" CSS attribute.
            <code lang="C#">
            // Get a menu look item
            MenuItem lookItem;
            lookItem = Menu1.ItemLooks.GetItemByID("default");
            
            // Set look item's background color to white by using this property.
            lookItem.SubMenu.Style.Normal.BackColor = Color.White;
            
            // Set look item's background color to white by using InlineStyle.
            lookItem.SubMenu.Style.Normal.InlineStyle["background-color"] = "white";
            
            </code><code lang="VB">
            'Get a menu look item
            Dim lookItem as MenuItem
            lookItem = Menu1.ItemLooks.GetItemByID("default")
            
            ' Set look item's background color to white by using this property.
            lookItem.NormalStyle.BackColor = Color.White
            
            ' Set look item's background color to white by using InlineStyle.
            lookItem.NormalStyle.InlineStyle["background-color"] = "white"
             </code></remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.ForeColor">
      <summary>
             Gets or sets fore color (text color) of an UI element. 
             </summary>
      <remarks>
             This property gets or sets "color" CSS attribute. 
             <code lang="C#">
             // Set Menu1's text color to white by using this property.
             Menu1.TopGroup.Style.ForeColor = Color.White;
             
             // Set Menu1's text color to white by using InlineStyle.
             Menu1.TopGroup.Style.InlineStyle["color"] = "white";
             
             </code><code lang="VB">
             Dim foreColor As Color
             
             'Set Menu1's text color to white by using this property.
            eMenu1.TopGroup.Style.ForeColor = Color.White
            	
             'Set Menu1's text color to white by using InlineStyle.
            	Menu1.TopGroup.Style.InlineStyle.Item("color") = "white"
            	 </code></remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.BorderColor">
      <summary>
            Gets or sets border color. 
            </summary>
      <remarks>
            This properties gets or sets all the border color including "border-top-color", "border-left-color", 
            "border-right-color" and "border-bottom-color" CSS attributes.
            If the color is different for all four attributes, this property returns 
            <see cref="F:System.Drawing.Color.Empty">Color.Empty</see>.
            
            If you want to set an individual border color, use <see cref="P:EO.Web.ElementStyle.InlineStyle">ElementStyle.InlineStyle</see>.
            <code lang="C#">
            // Get a menu look item
            MenuItem lookItem;
            lookItem = Menu1.ItemLooks.GetItemByID("default");
            
            // Set look item's border color to black
            // This affects all the menu items that uses this look item.
            lookItem.NormalStyle.BorderColor = Color.Black;	
            
            // Set look item's submenu's bottom padding.
            lookItem.SubMenu.Style.BorderColor = Color.Black;	
            
            </code><code lang="VB">
            ' Get a menu look item
            Dim lookItem as MenuItem 
            lookItem = Menu1.ItemLooks.GetItemByID("default")
            
            ' Set look item's border color to black
            ' This affects all the menu items that uses this look item.
            lookItem.NormalStyle.BorderColor = Color.Black	
            
            ' Set look item's submenu's bottom padding.
            lookItem.SubMenu.Style.BorderColor = Color.Black	
            </code></remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.BorderStyle">
      <summary>
            Gets or sets border style.
            </summary>
      <remarks>
            This properties gets or sets all border styles including "border-top-style", "border-left-style", 
            "border-right-style" and "border-bottom-style" CSS attributes.
            If the border style is different for all four attributes, this property returns 
            <see cref="F:System.Web.UI.WebControls.BorderStyle.NotSet">BorderStyle.NotSet</see>.
            
            If you want to set individual border style, use <see cref="P:EO.Web.ElementStyle.InlineStyle">ElementStyle.InlineStyle</see>.
            <code lang="C#">
            // Get a menu look item
            MenuItem lookItem;
            lookItem = Menu1.ItemLooks.GetItemByID("default");
            
            // Set look item's border style to solid
            // This affects all the menu items that uses this look item.
            lookItem.NormalStyle.BorderStyle = BorderStyle.Solid;
            
            // Set the submenu of look item's border style to solid.		
            lookItem.SubMenu.Style.BorderStyle = BorderStyle.Solid;
            </code><code lang="VB">
            ' Get a menu look item
            Dim lookItem as MenuItem 
            lookItem = Menu1.ItemLooks.GetItemByID("default")
            
            ' Set look item's border style to solid
            ' This affects all the menu items that uses this look item.
            lookItem.NormalStyle.BorderStyle = BorderStyle.Solid
            
            ' Set the submenu of look item's border style to solid.		
            lookItem.SubMenu.Style.BorderStyle = BorderStyle.Solid
            </code></remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.BorderWidth">
      <summary>
            Gets or sets border width.
            </summary>
      <remarks>
            This properties gets or sets all border width including "border-top-width", "border-left-width", 
            "border-right-width" and "border-bottom-width" CSS attributes.
            If the border width is different for all four attributes, this property returns 
            <see cref="F:EO.Web.Consts.IntNotSet">Consts.IntNotSet</see>.
            
            If you want to set the individual border width, use <see cref="P:EO.Web.ElementStyle.InlineStyle"></see>.
            <code lang="C#">
            // Get a menu look item
            MenuItem lookItem;
            lookItem = Menu1.ItemLooks.GetItemByID("default");
            
            // Set look item's border width to 1px
            // This affects all the menu items that uses this look item.
            lookItem.NormalStyle.BorderWidth = 1;
            
            // Set the submenu of look item's border style to solid.		
            lookItem.SubMenu.Style.BorderWidth = 1;
            </code><code lang="VB">
            ' Get a menu look item
            Dim lookItem as MenuItem 
            lookItem = Menu1.ItemLooks.GetItemByID("default")
            
            ' Set look item's border style to solid
            ' This affects all the menu items that uses this look item.
            lookItem.NormalStyle.BorderWidth = 1
            
            ' Set the submenu of look item's border style to solid.		
            lookItem.SubMenu.Style.BorderWidth = 1
            </code></remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.BackgroundImage">
      <summary>
            Gets or sets background image URL.
            </summary>
      <remarks>
            This properties gets or sets "background-image" CSS attribute.
            Here is an example to use both this property and 
            <see cref="P:EO.Web.ElementStyle.InlineStyle"></see> to get the same CSS attribute.
            <code lang="C#">
            string backgroundUrl;
            MenuItem lookItem;
            
            // Get a menu look item
            lookItem = Menu1.ItemLooks.GetItemByID("default");
            
            // If a menu item's LookID is set, you should get the image URL from the look item.
            backgroundUrl = lookItem.NormalStyle.BackgroundImage;
            
            // If a menu item's Look ID is not set, you can get the image URL from this menu item object.
            backgroundUrl = myMenuItem.NormalStyle.BackgroundImage;		
            
            </code><code lang="VB">
            string backgroundUrl;
            MenuItem lookItem;
            
            ' Get a menu look item
            lookItem = Menu1.ItemLooks.GetItemByID("default")
            
            ' If a menu item's LookID is set, you should get the image URL from the look item.
            backgroundUrl = lookItem.NormalStyle.BackgroundImage
            
            ' If a menu item's Look ID is not set, you can get the image URL from this menu item object.
            backgroundUrl = myMenuItem.NormalStyle.BackgroundImage		
            
            </code></remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.Font">
      <summary>
            Gets the font of an UI element.
            </summary>
      <remarks>
            This property gets <see cref="T:EO.Web.FontInfo">FontInfo</see> object 
            which wraps up font-related CSS attributes. 
            Here is an example of using this property to set font-related CSS attributes. 
            <code lang="C#">		
            // Get a menu look item
            MenuItem lookItem;
            lookItem = Menu1.ItemLooks.GetItemByID("default");
            
            // Set the look item's normal style font to bold.
            // All the menu items that uses this look item will have bold font in normal state.
            lookItem.NormalStyle.Font.Bold = true;
            
            </code><code lang="VB">
            ' Get a menu look item
            Dim lookItem as MenuItem
            lookItem = Menu1.ItemLooks.GetItemByID("default")
            ' Set the look item's normal style font to bold.
            
            ' All the menu items that uses this look item will have bold font in normal state.
            lookItem.NormalStyle.Font.Bold = true
            </code><seealso cref="T:EO.Web.FontInfo">FontInfo</seealso></remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.Paddings">
      <summary>
            Gets <see cref="T:EO.Web.ElementPaddings">ElementPaddings</see> of an UI element.
            </summary>
      <remarks>
            Use this property to set left, right, top, bottom and all paddings.
            You can use either this property or <see cref="P:EO.Web.ElementStyle.InlineStyle"></see> to access to the same set of CSS attributes.
            See the sample below:
            <code lang="C#">
            // Get a menu look item
            MenuItem lookItem;
            lookItem = Menu1.ItemLooks.GetItemByID("default");
            
            // Set look item's border width to 1px
            // This affects all the menu items that uses this look item.
            lookItem.NormalStyle.BorderWidth = 1;
            
            // Set the submenu of look item's border style to solid.		
            lookItem.SubMenu.Style.BorderWidth = 1;
            </code><code lang="VB">
            ' Get a menu look item
            Dim lookItem as MenuItem 
            lookItem = Menu1.ItemLooks.GetItemByID("default")
            
            ' Set look item's border style to solid
            ' This affects all the menu items that uses this look item.
            lookItem.NormalStyle.BorderWidth = 1
            
            ' Set the submenu of look item's border style to solid.		
            lookItem.SubMenu.Style.BorderWidth = 1
            </code></remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.InlineStyle">
      <summary>
            Gets <see cref="P:EO.Web.ElementStyle.InlineStyle">InlineStyle</see> of an UI element. 
            </summary>
      <remarks>
        <p>
          <b>InlineStyle</b> property provides a powerful way to directly access CSS attributes 
            by using CSS attribute name.	
            <see cref="T:EO.Web.ElementStyle"></see> exposes a few "shortcut" properties for some 
            commonly used CSS attributes. 
            </p>
        <p>
            You can achieve the same result by either setting properties through <b>ElementStyle</b> 
            or setting the corresponding CSS attribute through <b>InlineStyle</b>.
            </p>
            Here is an example of getting CSS attribute value by using both 
            <b>InlineStyle</b> and the specific <b>ElementStyle</b> property.
            <code lang="C#">
            string strBorderStyle;
            Color borderColor;
            
            // Use the following code to retrieve border color and border style for top level menu group.
            // If this property is not defined, when the menu is rendered, top level group will use the value
            // defined in "default" menu look.
            strBorderStyle = Menu1.TopGroup.Style.InlineStyle["border-top"];
            borderColor = Menu1.TopGroup.Style.BorderColor;
            </code><code lang="VB">
            Dim strCSSValue As String
            Dim borderColor As Color
            
            ' Use the following code to retrieve border color and border style for top level menu group.
            ' If this property is not defined, when the menu is rendered, top level group will use the value
            ' defined in "default" menu look.
            strCSSValue = Menu1.TopGroup.Style.InlineStyle.Item("border-top")
            borderColor = Menu1.TopGroup.Style.BorderColor()
            </code></remarks>
    </member>
    <member name="P:EO.Web.ElementStyle.IsEmpty">
      <summary>
            Get a value indicating if the <see cref="T:EO.Web.ElementStyle">ElementStyle</see> is empty.
            </summary>
    </member>
    <member name="M:EO.Web.ElementStyle.Assign(EO.Web.ElementStyle)">
      <summary>
            Initializes this <see cref="T:EO.Web.ElementStyle"></see> object to have the same value of another <see cref="T:EO.Web.ElementStyle"></see> object.
            </summary>
      <param name="style">The ElementStyle instance to assign.</param>
    </member>
    <member name="T:EO.Web.ReadingDirection">
      <summary>
            Specifies the content reading order.
            </summary>
    </member>
    <member name="F:EO.Web.ReadingDirection.Inherit">
      <summary>
            Content flow is inherited.
            </summary>
    </member>
    <member name="F:EO.Web.ReadingDirection.LeftToRight">
      <summary>
            Content flows left to right.
            </summary>
    </member>
    <member name="F:EO.Web.ReadingDirection.RightToLeft">
      <summary>
            Content flows right to left.
            </summary>
    </member>
  </members>
</doc>